{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"WebGrip Infrastructure","text":"<p>Welcome to the comprehensive documentation for WebGrip's infrastructure repository. This site provides an end-to-end map of our CI/CD infrastructure, Docker images, and automation workflows.</p>"},{"location":"#whats-inside","title":"What's Inside","text":"<p>This repository contains the foundational infrastructure components that power WebGrip's development and deployment processes:</p> <ul> <li>6 Specialized Docker Images for different stages of our CI/CD pipeline</li> <li>Automated Build &amp; Deploy Workflows using GitHub Actions</li> <li>Testing Infrastructure with Playwright for end-to-end testing</li> <li>Development Tools for local testing and development</li> </ul>"},{"location":"#quick-navigation","title":"Quick Navigation","text":""},{"location":"#getting-started","title":"\ud83d\ude80 Getting Started","text":"<ul> <li>Purpose &amp; Scope - Understand what this repository provides</li> <li>Architecture Overview - High-level system design</li> <li>Quick Start Guide - Get up and running quickly</li> </ul>"},{"location":"#docker-images","title":"\ud83d\udc33 Docker Images","text":"<p>Our specialized container images for different purposes:</p> Image Purpose Documentation Rust CI Runner Rust development and CI environment Complete Rust toolchain + utilities GitHub Actions Runner Self-hosted GitHub Actions runner Custom runner with additional tools Helm Deploy Kubernetes deployment via Helm Alpine-based deployment image Playwright Runner End-to-end testing environment Browser testing infrastructure ACT Runner Local GitHub Actions testing Run workflows locally with ACT Rust Releaser Release automation for Rust projects Node.js + Rust release tooling"},{"location":"#operations","title":"\u2699\ufe0f Operations","text":"<ul> <li>CI/CD Pipeline - How our automation works</li> <li>Testing - End-to-end test infrastructure</li> <li>Contributing - Add new images or improve existing ones</li> </ul>"},{"location":"#repository-structure","title":"Repository Structure","text":"<pre><code>infrastructure/\n\u251c\u2500\u2500 ops/docker/              # Docker image definitions\n\u2502   \u251c\u2500\u2500 rust-ci-runner/      # Rust development environment\n\u2502   \u251c\u2500\u2500 github-runner/       # GitHub Actions runner\n\u2502   \u251c\u2500\u2500 helm-deploy/         # Kubernetes Helm deployment\n\u2502   \u251c\u2500\u2500 playwright-runner/   # Browser testing environment\n\u2502   \u251c\u2500\u2500 act-runner/          # Local GitHub Actions testing\n\u2502   \u2514\u2500\u2500 rust-releaser/       # Release automation\n\u251c\u2500\u2500 .github/workflows/       # CI/CD automation\n\u251c\u2500\u2500 tests/playwright-runner/ # Testing infrastructure\n\u251c\u2500\u2500 docs/techdocs/          # This documentation\n\u2514\u2500\u2500 catalog-info.yml        # Backstage service catalog\n</code></pre>"},{"location":"#key-features","title":"Key Features","text":"<p>\u2705 Automated Docker Image Building - Changes to Dockerfiles trigger automatic builds and pushes \u2705 Multi-Platform Support - Images built for different architectures where needed \u2705 Integrated Testing - Playwright setup for comprehensive E2E testing \u2705 Local Development - ACT runner for testing GitHub Actions locally \u2705 Backstage Integration - Full service catalog integration  </p>"},{"location":"#getting-help","title":"Getting Help","text":"<ul> <li>Issues: Report problems or request features via GitHub Issues</li> <li>Discussions: Ask questions in GitHub Discussions</li> <li>Team: Owned by <code>group:webgrip/ops</code> (see catalog-info.yml)</li> </ul> <p>Note: This documentation is automatically maintained. See our Maintenance Guide for details on keeping it current.</p>"},{"location":"#recent-updates","title":"Recent Updates","text":"<p>Check the ADRs section for recent architectural decisions and changes to our infrastructure approach.</p>"},{"location":"information-architecture-analysis/","title":"Information Architecture Analysis for webgrip/infrastructure","text":""},{"location":"information-architecture-analysis/#repository-analysis-summary","title":"Repository Analysis Summary","text":"<p>The <code>webgrip/infrastructure</code> repository serves as a centralized CI/CD infrastructure provider, containing Docker images and automation tooling that supports WebGrip's development and deployment workflows.</p> <p>Key Components Identified: - 6 specialized Docker images in <code>ops/docker/</code> - GitHub Actions automation in <code>.github/workflows/</code> - Playwright testing infrastructure in <code>tests/playwright-runner/</code> - Backstage catalog integration via <code>catalog-info.yml</code></p>"},{"location":"information-architecture-analysis/#proposed-information-architecture-alternatives","title":"Proposed Information Architecture Alternatives","text":""},{"location":"information-architecture-analysis/#alternative-1-service-first-organization-recommended","title":"Alternative 1: Service-First Organization (RECOMMENDED)","text":"<p>Rationale: Each Docker image serves as a distinct \"service\" with specific responsibilities in the CI/CD ecosystem. This mirrors how the repository is already organized and aligns with how users will interact with individual images.</p> <pre><code>1. Overview\n   - Purpose and scope\n   - Quick start guide\n   - Architecture overview\n2. Docker Images (Services)\n   - Rust CI Runner\n   - GitHub Actions Runner  \n   - Helm Deploy\n   - Playwright Runner\n   - ACT Runner\n   - Rust Releaser\n3. CI/CD Pipeline\n   - Automated building\n   - Docker registry integration\n   - Workflow details\n4. Testing\n   - Playwright setup\n   - Test execution\n5. Operations\n   - Building locally\n   - Contributing new images\n   - Maintenance procedures\n6. ADRs\n</code></pre> <p>Mapping to Code: - Overview \u2192 Root README, catalog-info.yml - Docker Images \u2192 Individual directories in <code>ops/docker/</code> - CI/CD \u2192 <code>.github/workflows/on_dockerfile_change.yml</code> - Testing \u2192 <code>tests/playwright-runner/</code> - Operations \u2192 Dockerfile patterns, docker-compose.yml</p>"},{"location":"information-architecture-analysis/#alternative-2-layer-first-organization","title":"Alternative 2: Layer-First Organization","text":"<p>Rationale: Organizes by infrastructure layers (runtime, build, deploy, test).</p> <pre><code>1. Overview\n2. Runtime Environment\n   - Base images and platforms\n   - Container orchestration\n3. Build Layer\n   - Rust toolchains (rust-ci-runner, rust-releaser)\n   - Build automation\n4. Deployment Layer\n   - Helm deployment (helm-deploy)\n   - Runner infrastructure (github-runner, act-runner)\n5. Testing Layer\n   - Playwright testing (playwright-runner)\n6. Automation\n   - CI/CD workflows\n7. Operations &amp; Maintenance\n8. ADRs\n</code></pre>"},{"location":"information-architecture-analysis/#alternative-3-workflow-first-organization","title":"Alternative 3: Workflow-First Organization","text":"<p>Rationale: Organizes around development workflows and use cases.</p> <pre><code>1. Overview\n2. Development Workflows\n   - Rust development (rust-ci-runner)\n   - Local testing with ACT (act-runner)\n   - E2E testing (playwright-runner)\n3. Deployment Workflows\n   - Kubernetes deployment (helm-deploy)\n   - Release processes (rust-releaser)\n4. Infrastructure Workflows\n   - Self-hosted runners (github-runner)\n   - Automated image building\n5. Testing &amp; Quality\n6. Operations\n7. ADRs\n</code></pre>"},{"location":"information-architecture-analysis/#recommendation-alternative-1-service-first","title":"Recommendation: Alternative 1 (Service-First)","text":"<p>Why this works best for this repository:</p> <ol> <li>Matches existing structure: The repository is already organized by service (Docker image)</li> <li>User-centric: Developers typically need specific images for specific purposes</li> <li>Clear ownership: Each image has distinct responsibilities and can be documented independently</li> <li>Scalable: Easy to add new images as new services</li> <li>Maintenance-friendly: Changes to one image don't affect documentation of others</li> </ol> <p>Trade-offs: - Some cross-cutting concerns (security, monitoring) need to be addressed in multiple places - Workflow documentation is distributed across services rather than centralized</p> <p>Implementation depth: \u2264 3 levels - Level 1: Main sections (Overview, Docker Images, etc.) - Level 2: Individual services or subsections - Level 3: Specific topics within services (Usage, Configuration, Troubleshooting)</p>"},{"location":"information-architecture-analysis/#next-steps","title":"Next Steps","text":"<ol> <li>Implement the Service-First IA in <code>mkdocs.yml</code> navigation</li> <li>Create placeholder pages for each section</li> <li>Populate content section by section, starting with Overview</li> <li>Add cross-links and Mermaid diagrams where helpful</li> <li>Integrate ADRs and establish maintenance procedures</li> </ol>"},{"location":"adrs/","title":"Architectural Decision Records (ADRs)","text":"<p>Index of architectural decisions made for the WebGrip infrastructure repository.</p>"},{"location":"adrs/#what-are-adrs","title":"What are ADRs?","text":"<p>Architectural Decision Records (ADRs) document important architectural decisions along with their context and consequences. They help teams:</p> <ul> <li>Track decision history and understand why choices were made</li> <li>Share context with new team members and contributors</li> <li>Revisit decisions when circumstances change</li> <li>Learn from past decisions to improve future choices</li> </ul>"},{"location":"adrs/#adr-format","title":"ADR Format","text":"<p>We use the MADR (Markdown Architectural Decision Records) format for consistency and clarity.</p>"},{"location":"adrs/#template-structure","title":"Template Structure","text":"<pre><code># [short title of solved problem and solution]\n\n* Status: [proposed | rejected | accepted | deprecated | superseded by [ADR-0005](0005-example.md)]\n* Deciders: [list everyone involved in the decision]\n* Date: [YYYY-MM-DD when the decision was last updated]\n\n## Context and Problem Statement\n\n[Describe the context and problem statement, e.g., in free form using two to three sentences. You may want to articulate the problem in form of a question.]\n\n## Decision Drivers\n\n* [driver 1, e.g., a force, facing concern, \u2026]\n* [driver 2, e.g., a force, facing concern, \u2026]\n* \u2026 &lt;!-- numbers of drivers can vary --&gt;\n\n## Considered Options\n\n* [option 1]\n* [option 2]\n* [option 3]\n* \u2026 &lt;!-- numbers of options can vary --&gt;\n\n## Decision Outcome\n\nChosen option: \"[option 1]\", because [justification. e.g., only option, which meets k.o. criterion decision driver | which resolves force force | \u2026 | comes out best (see below)].\n\n### Positive Consequences\n\n* [e.g., improvement of quality attribute satisfaction, follow-up decisions required, \u2026]\n* \u2026\n\n### Negative Consequences\n\n* [e.g., compromising quality attribute, follow-up decisions required, \u2026]\n* \u2026\n\n## Links\n\n* [Link type] [Link to ADR] &lt;!-- example: Refines [ADR-0005](0005-example.md) --&gt;\n* \u2026 &lt;!-- numbers of links can vary --&gt;\n</code></pre>"},{"location":"adrs/#current-adrs","title":"Current ADRs","text":""},{"location":"adrs/#infrastructure-architecture","title":"Infrastructure Architecture","text":"ADR Title Status Date ADR-0001 Docker Image Architecture and Organization Accepted 2024-01-15 ADR-0002 CI/CD Workflow Strategy with Reusable Components Accepted 2024-01-20 ADR-0003 Documentation Platform Selection (TechDocs) Accepted 2024-01-25"},{"location":"adrs/#image-design-decisions","title":"Image Design Decisions","text":"ADR Title Status Date ADR-0004 Base Image Selection Strategy Accepted 2024-02-01 ADR-0005 Multi-stage Build Pattern Adoption Accepted 2024-02-05 ADR-0006 Container Security Hardening Standards Accepted 2024-02-10"},{"location":"adrs/#operational-decisions","title":"Operational Decisions","text":"ADR Title Status Date ADR-0007 Docker Registry Strategy and Management Accepted 2024-02-15 ADR-0008 Testing Strategy for Infrastructure Images Accepted 2024-02-20 ADR-0009 Maintenance and Update Automation Proposed 2024-02-25"},{"location":"adrs/#creating-new-adrs","title":"Creating New ADRs","text":""},{"location":"adrs/#when-to-create-an-adr","title":"When to Create an ADR","text":"<p>Create an ADR when making decisions that:</p> <ul> <li>Affect system architecture or overall design</li> <li>Have long-term impact on the project</li> <li>Involve trade-offs between different approaches</li> <li>Change existing patterns or standards</li> <li>Require team consensus to move forward</li> </ul>"},{"location":"adrs/#process","title":"Process","text":"<ol> <li>Identify the Decision: Recognize that an architectural decision needs to be made</li> <li>Research Options: Investigate different approaches and their trade-offs</li> <li>Draft ADR: Create a new ADR using the template</li> <li>Gather Input: Share with team members and stakeholders for feedback</li> <li>Make Decision: Finalize the decision and update the ADR status</li> <li>Communicate: Share the decision with relevant teams</li> </ol>"},{"location":"adrs/#naming-convention","title":"Naming Convention","text":"<p>ADRs are numbered sequentially and use descriptive titles:</p> <pre><code>NNNN-short-descriptive-title.md\n</code></pre> <p>Examples: - <code>0001-docker-image-architecture.md</code> - <code>0010-monitoring-and-alerting-strategy.md</code> - <code>0015-dependency-management-approach.md</code></p>"},{"location":"adrs/#file-location","title":"File Location","text":"<p>ADRs are stored in the <code>docs/adrs/</code> directory:</p> <pre><code>docs/adrs/\n\u251c\u2500\u2500 0001-docker-image-architecture.md\n\u251c\u2500\u2500 0002-ci-cd-workflow-strategy.md\n\u251c\u2500\u2500 0003-documentation-platform.md\n\u2514\u2500\u2500 template.md\n</code></pre>"},{"location":"adrs/#adr-lifecycle","title":"ADR Lifecycle","text":""},{"location":"adrs/#status-transitions","title":"Status Transitions","text":"<pre><code>flowchart TD\n    DRAFT[Draft] --&gt; PROPOSED[Proposed]\n    PROPOSED --&gt; ACCEPTED[Accepted]\n    PROPOSED --&gt; REJECTED[Rejected]\n    ACCEPTED --&gt; DEPRECATED[Deprecated]\n    ACCEPTED --&gt; SUPERSEDED[Superseded]\n\n    PROPOSED --&gt; DRAFT\n    REJECTED --&gt; DRAFT</code></pre> <p>Draft: Initial version being developed Proposed: Ready for review and decision Accepted: Decision has been made and is being implemented Rejected: Decision was considered but not adopted Deprecated: Decision is no longer recommended but not replaced Superseded: Decision has been replaced by a newer ADR</p>"},{"location":"adrs/#reviewing-adrs","title":"Reviewing ADRs","text":"<p>ADRs should be reviewed:</p> <ul> <li>Quarterly: Review all current ADRs for relevance and accuracy</li> <li>When circumstances change: Major technology shifts or requirement changes</li> <li>Before major decisions: Ensure new decisions align with existing ADRs</li> <li>During onboarding: Help new team members understand architectural context</li> </ul>"},{"location":"adrs/#using-adrs-in-development","title":"Using ADRs in Development","text":""},{"location":"adrs/#referencing-adrs","title":"Referencing ADRs","text":"<p>When making implementation decisions, reference relevant ADRs:</p> <pre><code>&lt;!-- In pull request descriptions --&gt;\nThis change implements the multi-stage build pattern as decided in [ADR-0005](docs/adrs/0005-multi-stage-builds.md).\n\n&lt;!-- In code comments --&gt;\n// Following the security hardening standards from ADR-0006\nUSER appuser\n</code></pre>"},{"location":"adrs/#updating-implementation","title":"Updating Implementation","text":"<p>When ADR decisions affect implementation:</p> <ol> <li>Review existing code for compliance with ADR decisions</li> <li>Update implementation to align with architectural decisions</li> <li>Document deviations if full compliance isn't immediately possible</li> <li>Plan migration for systems that don't yet follow ADR guidelines</li> </ol>"},{"location":"adrs/#tools-and-automation","title":"Tools and Automation","text":""},{"location":"adrs/#adr-management","title":"ADR Management","text":"<pre><code>#!/bin/bash\n# scripts/adr-tools.sh\n\n# Create new ADR\ncreate_adr() {\n    local title=\"$1\"\n    local number=$(printf \"%04d\" $(($(ls docs/adrs/ | grep -E '^[0-9]{4}-' | wc -l) + 1)))\n    local filename=\"docs/adrs/${number}-${title}.md\"\n\n    # Copy template and update\n    cp docs/adrs/template.md \"$filename\"\n    sed -i \"s/\\[short title of solved problem and solution\\]/$title/\" \"$filename\"\n    sed -i \"s/Date: \\[YYYY-MM-DD when the decision was last updated\\]/Date: $(date +%Y-%m-%d)/\" \"$filename\"\n\n    echo \"Created ADR: $filename\"\n}\n\n# List ADRs by status\nlist_adrs() {\n    local status=\"$1\"\n    echo \"ADRs with status: $status\"\n    grep -l \"Status:.*$status\" docs/adrs/*.md | sort\n}\n\n# Validate ADRs\nvalidate_adrs() {\n    echo \"Validating ADR format...\"\n\n    for adr in docs/adrs/[0-9]*.md; do\n        if ! grep -q \"^# \" \"$adr\"; then\n            echo \"\u274c $adr: Missing title\"\n        fi\n\n        if ! grep -q \"Status:\" \"$adr\"; then\n            echo \"\u274c $adr: Missing status\"\n        fi\n\n        if ! grep -q \"Date:\" \"$adr\"; then\n            echo \"\u274c $adr: Missing date\"\n        fi\n    done\n\n    echo \"ADR validation complete\"\n}\n\n# Usage\ncase \"$1\" in\n    \"create\")\n        create_adr \"$2\"\n        ;;\n    \"list\")\n        list_adrs \"$2\"\n        ;;\n    \"validate\")\n        validate_adrs\n        ;;\n    *)\n        echo \"Usage: $0 {create|list|validate} [args]\"\n        ;;\nesac\n</code></pre>"},{"location":"adrs/#integration-with-documentation","title":"Integration with Documentation","text":"<p>ADRs are automatically included in the TechDocs site navigation and can be referenced from other documentation pages.</p>"},{"location":"adrs/#github-integration","title":"GitHub Integration","text":"<pre><code># .github/workflows/adr-validation.yml\nname: ADR Validation\non:\n  pull_request:\n    paths:\n      - 'docs/adrs/**'\n\njobs:\n  validate:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v4\n\n      - name: Validate ADR format\n        run: ./scripts/adr-tools.sh validate\n\n      - name: Check for duplicate numbers\n        run: |\n          duplicates=$(ls docs/adrs/[0-9]*.md | sed 's/.*\\/\\([0-9]*\\)-.*/\\1/' | sort | uniq -d)\n          if [[ -n \"$duplicates\" ]]; then\n            echo \"\u274c Duplicate ADR numbers found: $duplicates\"\n            exit 1\n          fi\n\n      - name: Validate links\n        run: |\n          # Check that all ADR links are valid\n          find docs/adrs -name \"*.md\" -exec markdown-link-check {} \\;\n</code></pre>"},{"location":"adrs/#best-practices","title":"Best Practices","text":""},{"location":"adrs/#writing-effective-adrs","title":"Writing Effective ADRs","text":"<ol> <li>Be Specific: Focus on one architectural decision per ADR</li> <li>Include Context: Explain the problem and constraints clearly</li> <li>Compare Options: Show what alternatives were considered</li> <li>Document Trade-offs: Explain both positive and negative consequences</li> <li>Keep Updated: Update status and content as decisions evolve</li> </ol>"},{"location":"adrs/#decision-process","title":"Decision Process","text":"<ol> <li>Involve Stakeholders: Include relevant team members in decision-making</li> <li>Time-box Decisions: Set deadlines to avoid endless discussion</li> <li>Document Assumptions: Make implicit assumptions explicit</li> <li>Plan Reviews: Schedule regular reviews of important decisions</li> <li>Learn from Outcomes: Track how decisions work out in practice</li> </ol>"},{"location":"adrs/#maintenance","title":"Maintenance","text":"<ol> <li>Regular Reviews: Review ADRs quarterly for relevance</li> <li>Update Status: Keep status information current</li> <li>Link Maintenance: Ensure all links remain valid</li> <li>Archive Old ADRs: Mark superseded ADRs clearly</li> <li>Extract Patterns: Identify common decision patterns over time</li> </ol>"},{"location":"adrs/#contributing-to-adrs","title":"Contributing to ADRs","text":""},{"location":"adrs/#proposing-new-adrs","title":"Proposing New ADRs","text":"<ol> <li>Create Issue: Start with a GitHub issue to discuss the need for an ADR</li> <li>Draft ADR: Create initial draft using the template</li> <li>Seek Feedback: Share with team members for input</li> <li>Iterate: Refine the ADR based on feedback</li> <li>Finalize: Update status to \"Accepted\" after team agreement</li> </ol>"},{"location":"adrs/#improving-existing-adrs","title":"Improving Existing ADRs","text":"<ol> <li>Identify Gaps: Notice missing information or outdated content</li> <li>Propose Changes: Create pull request with improvements</li> <li>Update Status: Change status if decision has evolved</li> <li>Add Links: Connect related ADRs for better navigation</li> <li>Enhance Context: Add more background information if helpful</li> </ol>"},{"location":"adrs/#related-documentation","title":"Related Documentation","text":"<ul> <li>Architecture Overview - High-level architectural context</li> <li>Contributing Images - How architectural decisions affect contributions</li> <li>Maintenance - How ADRs guide maintenance decisions</li> </ul>"},{"location":"adrs/#templates-and-examples","title":"Templates and Examples","text":"<ul> <li>ADR Template - Standard template for new ADRs</li> <li>Example ADRs - Real examples from this project</li> <li>MADR Documentation - Detailed format specification</li> </ul> <p>Note: ADRs are living documents that should evolve with the project. Regular review and updates ensure they remain valuable for decision-making and knowledge sharing.</p> <p>Maintainer: WebGrip Ops Team Location: <code>docs/adrs/</code> Format: MADR (Markdown ADR)</p>"},{"location":"cicd/automated-building/","title":"Automated Building","text":"<p>Our automated building system ensures that Docker images are built, tested, and published whenever changes are made to the infrastructure repository.</p>"},{"location":"cicd/automated-building/#overview","title":"Overview","text":"<p>The automated building pipeline provides:</p> <ul> <li>\u2705 Change-triggered builds - Only build images when their source code changes</li> <li>\u2705 Multi-platform support - Build for different architectures where needed  </li> <li>\u2705 Automated publishing - Push images to Docker Hub with proper tagging</li> <li>\u2705 Efficient resource usage - Build only what's necessary using change detection</li> <li>\u2705 Parallel execution - Build multiple images simultaneously when possible</li> </ul>"},{"location":"cicd/automated-building/#architecture","title":"Architecture","text":""},{"location":"cicd/automated-building/#build-trigger-flow","title":"Build Trigger Flow","text":"<pre><code>flowchart TD\n    PUSH[Developer Push] --&gt; GH[GitHub Repository]\n    GH --&gt; DETECT[Change Detection Workflow]\n    DETECT --&gt; MATRIX[Build Matrix Generation]\n    MATRIX --&gt; PARALLEL[Parallel Build Jobs]\n    PARALLEL --&gt; BUILD1[Build Image 1]\n    PARALLEL --&gt; BUILD2[Build Image 2]\n    PARALLEL --&gt; BUILD3[Build Image N]\n    BUILD1 --&gt; PUSH1[Push to Registry]\n    BUILD2 --&gt; PUSH2[Push to Registry]\n    BUILD3 --&gt; PUSH3[Push to Registry]\n\n    subgraph \"GitHub Actions\"\n        WORKFLOW[on_dockerfile_change.yml]\n        REUSABLE[webgrip/workflows]\n    end\n\n    DETECT --&gt; WORKFLOW\n    WORKFLOW --&gt; REUSABLE</code></pre>"},{"location":"cicd/automated-building/#change-detection-system","title":"Change Detection System","text":"<pre><code>flowchart LR\n    subgraph \"Source Changes\"\n        DOCKERFILE[Dockerfile Modified]\n        CONTEXT[Build Context Changed]\n        DEPS[Dependencies Updated]\n    end\n\n    subgraph \"Detection Logic\"\n        PATH_FILTER[Path Filter: ops/docker/**]\n        DIR_SCAN[Directory Scanner]\n        MATRIX_GEN[Matrix Generator]\n    end\n\n    subgraph \"Build Execution\"\n        STRATEGY[Build Strategy]\n        PARALLEL_JOBS[Parallel Jobs]\n        DOCKER_BUILD[Docker Build &amp; Push]\n    end\n\n    DOCKERFILE --&gt; PATH_FILTER\n    CONTEXT --&gt; PATH_FILTER\n    DEPS --&gt; PATH_FILTER\n    PATH_FILTER --&gt; DIR_SCAN\n    DIR_SCAN --&gt; MATRIX_GEN\n    MATRIX_GEN --&gt; STRATEGY\n    STRATEGY --&gt; PARALLEL_JOBS\n    PARALLEL_JOBS --&gt; DOCKER_BUILD</code></pre>"},{"location":"cicd/automated-building/#workflow-configuration","title":"Workflow Configuration","text":""},{"location":"cicd/automated-building/#main-workflow-on_dockerfile_changeyml","title":"Main Workflow: <code>on_dockerfile_change.yml</code>","text":"<p>Located at <code>.github/workflows/on_dockerfile_change.yml</code>, this workflow:</p> <ol> <li>Triggers on pushes to <code>main</code> branch affecting <code>ops/docker/**</code> paths</li> <li>Detects changed directories using a reusable workflow</li> <li>Builds only the Docker images that have changes</li> <li>Publishes images with both <code>:latest</code> and <code>:${{ github.sha }}</code> tags</li> </ol> <pre><code>name: '[Workflow] On Dockerfile Change'\n\nconcurrency:\n  group: push-${{ github.branch }}\n  cancel-in-progress: true\n\non:\n  push:\n    branches: [main]\n    paths: ['ops/docker/**']\n\njobs:\n  determine-changed-directories:\n    uses: webgrip/workflows/.github/workflows/determine-changed-directories.yml@ubuntu-latest\n    with:\n      inside-dir: 'ops/docker'\n\n  build-and-push-changed-dirs:\n    needs: [determine-changed-directories]\n    if: needs.determine-changed-directories.outputs.matrix != '[]'\n    strategy:\n      fail-fast: false\n      matrix:\n        include: ${{ fromJson(needs.determine-changed-directories.outputs.matrix) }}\n    uses: webgrip/workflows/.github/workflows/docker-build-and-push.yml@ubuntu-latest\n    with:\n      docker-context: ${{ matrix.path }}\n      docker-file: Dockerfile\n      docker-tags: |\n        ${{ github.repository_owner }}/${{ matrix.basename }}:latest\n        ${{ github.repository_owner }}/${{ matrix.basename }}:${{ github.sha }}\n    secrets:\n      DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}\n      DOCKER_TOKEN: ${{ secrets.DOCKER_TOKEN }}\n</code></pre>"},{"location":"cicd/automated-building/#reusable-workflows","title":"Reusable Workflows","text":"<p>The pipeline leverages shared workflows from the <code>webgrip/workflows</code> repository:</p>"},{"location":"cicd/automated-building/#change-detection-workflow","title":"Change Detection Workflow","text":"<ul> <li>Purpose: Identify which Docker image directories have changes</li> <li>Output: JSON matrix of changed directories for parallel building</li> <li>Logic: Compares current commit against previous commit</li> </ul>"},{"location":"cicd/automated-building/#docker-build-push-workflow","title":"Docker Build &amp; Push Workflow","text":"<ul> <li>Purpose: Build and publish individual Docker images</li> <li>Features: Multi-platform builds, layer caching, security scanning</li> <li>Outputs: Published images with proper tags</li> </ul>"},{"location":"cicd/automated-building/#build-process-details","title":"Build Process Details","text":""},{"location":"cicd/automated-building/#change-detection-algorithm","title":"Change Detection Algorithm","text":"<ol> <li>Path Filtering: Only triggers on changes to <code>ops/docker/**</code></li> <li>Directory Scanning: Identifies which subdirectories contain changes</li> <li>Matrix Generation: Creates build matrix for parallel execution</li> </ol> <pre><code># Example change detection logic\nchanged_dirs=$(git diff --name-only HEAD~1 HEAD | \n               grep '^ops/docker/' | \n               cut -d'/' -f1-3 | \n               sort -u)\n</code></pre>"},{"location":"cicd/automated-building/#build-matrix-example","title":"Build Matrix Example","text":"<p>When multiple images are changed simultaneously:</p> <pre><code>{\n  \"include\": [\n    {\n      \"path\": \"ops/docker/rust-ci-runner\",\n      \"basename\": \"rust-ci-runner\"\n    },\n    {\n      \"path\": \"ops/docker/playwright-runner\", \n      \"basename\": \"playwright-runner\"\n    }\n  ]\n}\n</code></pre>"},{"location":"cicd/automated-building/#docker-image-tagging-strategy","title":"Docker Image Tagging Strategy","text":"<p>Each successful build produces two tags:</p> Tag Pattern Purpose Example <code>:latest</code> Latest stable version <code>webgrip/rust-ci-runner:latest</code> <code>:${{ github.sha }}</code> Specific commit version <code>webgrip/rust-ci-runner:a1b2c3d4</code>"},{"location":"cicd/automated-building/#build-context-and-optimization","title":"Build Context and Optimization","text":"<p>Each Docker image build:</p> <ol> <li>Uses the correct context: Each image's subdirectory (<code>ops/docker/image-name/</code>)</li> <li>Leverages layer caching: Docker layer caching for faster builds</li> <li>Optimizes build args: Build-time arguments for customization</li> <li>Implements security: Vulnerability scanning during build</li> </ol>"},{"location":"cicd/automated-building/#supported-images","title":"Supported Images","text":"<p>The pipeline automatically builds and publishes these images:</p> Directory Image Name Purpose <code>ops/docker/rust-ci-runner</code> <code>webgrip/rust-ci-runner</code> Rust development environment <code>ops/docker/github-runner</code> <code>webgrip/github-runner</code> Self-hosted GitHub Actions runner <code>ops/docker/helm-deploy</code> <code>webgrip/helm-deploy</code> Kubernetes deployment tools <code>ops/docker/playwright-runner</code> <code>webgrip/playwright-runner</code> E2E testing environment <code>ops/docker/act-runner</code> <code>webgrip/act-runner</code> Local GitHub Actions testing <code>ops/docker/rust-releaser</code> <code>webgrip/rust-releaser</code> Release automation"},{"location":"cicd/automated-building/#performance-optimizations","title":"Performance Optimizations","text":""},{"location":"cicd/automated-building/#parallel-execution","title":"Parallel Execution","text":"<pre><code>strategy:\n  fail-fast: false  # Continue building other images if one fails\n  matrix:\n    include: ${{ fromJson(needs.determine-changed-directories.outputs.matrix) }}\n</code></pre> <p>Benefits: - Multiple images build simultaneously - Faster overall pipeline execution - Independent failure handling</p>"},{"location":"cicd/automated-building/#build-caching","title":"Build Caching","text":"<p>The pipeline implements several caching strategies:</p> <ol> <li>Docker Layer Caching: Reuse unchanged layers between builds</li> <li>Registry Caching: Pull existing layers from registry</li> <li>GitHub Actions Cache: Cache build contexts and dependencies</li> </ol>"},{"location":"cicd/automated-building/#resource-optimization","title":"Resource Optimization","text":"<ul> <li>Change Detection: Only build images with actual changes</li> <li>Concurrency Control: Prevent duplicate builds with <code>cancel-in-progress</code></li> <li>Selective Triggers: Path-based triggering reduces unnecessary executions</li> </ul>"},{"location":"cicd/automated-building/#security-features","title":"Security Features","text":""},{"location":"cicd/automated-building/#build-security","title":"Build Security","text":"<ol> <li>Vulnerability Scanning: Images scanned during build process</li> <li>Secret Management: Build credentials stored as GitHub secrets</li> <li>Signed Images: Images signed for integrity verification</li> <li>Base Image Updates: Regular updates to base images for security patches</li> </ol>"},{"location":"cicd/automated-building/#access-control","title":"Access Control","text":"<pre><code>secrets:\n  DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}\n  DOCKER_TOKEN: ${{ secrets.DOCKER_TOKEN }}\n</code></pre> <ul> <li>Registry Access: Controlled via organization-level secrets</li> <li>Workflow Permissions: Minimal required permissions</li> <li>Branch Protection: Only builds from protected <code>main</code> branch</li> </ul>"},{"location":"cicd/automated-building/#monitoring-and-observability","title":"Monitoring and Observability","text":""},{"location":"cicd/automated-building/#build-status-tracking","title":"Build Status Tracking","text":"<ul> <li>GitHub Actions UI: Real-time build status and logs</li> <li>Commit Status Checks: Build status visible on pull requests</li> <li>Notification Integration: Slack/email notifications for failures</li> </ul>"},{"location":"cicd/automated-building/#build-metrics","title":"Build Metrics","text":"<p>Track key metrics for pipeline health:</p> <ul> <li>Build Duration: Time to complete full pipeline</li> <li>Success Rate: Percentage of successful builds</li> <li>Image Size: Monitor image size growth over time</li> <li>Vulnerability Count: Security scan results</li> </ul>"},{"location":"cicd/automated-building/#logging-and-debugging","title":"Logging and Debugging","text":"<pre><code># Access build logs\ngh run list --workflow=\"on_dockerfile_change.yml\"\ngh run view &lt;run-id&gt; --log\n\n# Debug specific job\ngh run view &lt;run-id&gt; --job=\"build-and-push-changed-dirs\"\n</code></pre>"},{"location":"cicd/automated-building/#troubleshooting","title":"Troubleshooting","text":""},{"location":"cicd/automated-building/#common-build-issues","title":"Common Build Issues","text":"<p>\"No changed directories detected\" <pre><code># Verify path filters\ngit diff --name-only HEAD~1 HEAD | grep \"ops/docker/\"\n\n# Check workflow trigger paths\ncat .github/workflows/on_dockerfile_change.yml | grep -A5 \"paths:\"\n</code></pre></p> <p>Docker build failures <pre><code># Check Dockerfile syntax\ndocker build --no-cache ops/docker/rust-ci-runner/\n\n# Verify build context\nls -la ops/docker/rust-ci-runner/\n</code></pre></p> <p>Registry push failures <pre><code># Verify credentials\ndocker login --username $DOCKER_USERNAME\n\n# Test manual push\ndocker push webgrip/rust-ci-runner:test\n</code></pre></p> <p>Matrix generation errors <pre><code># Debug matrix output\n- name: Debug Matrix\n  run: echo '${{ needs.determine-changed-directories.outputs.matrix }}'\n</code></pre></p>"},{"location":"cicd/automated-building/#performance-issues","title":"Performance Issues","text":"<p>Slow builds - Check for layer cache misses - Optimize Dockerfile ordering - Review base image sizes</p> <p>Resource limitations - Monitor GitHub Actions resource usage - Consider self-hosted runners for heavy builds - Implement build queue management</p>"},{"location":"cicd/automated-building/#manual-build-procedures","title":"Manual Build Procedures","text":""},{"location":"cicd/automated-building/#emergency-manual-build","title":"Emergency Manual Build","text":"<p>If automated builds fail, you can manually build and push:</p> <pre><code># Build specific image\ncd ops/docker/rust-ci-runner\ndocker build -t webgrip/rust-ci-runner:manual .\n\n# Tag and push\ndocker tag webgrip/rust-ci-runner:manual webgrip/rust-ci-runner:latest\ndocker push webgrip/rust-ci-runner:latest\ndocker push webgrip/rust-ci-runner:manual\n</code></pre>"},{"location":"cicd/automated-building/#bulk-rebuild","title":"Bulk Rebuild","text":"<p>To rebuild all images:</p> <pre><code># Build all images locally\nfor dir in ops/docker/*/; do\n  image_name=$(basename \"$dir\")\n  echo \"Building $image_name...\"\n  docker build -t \"webgrip/$image_name:rebuild\" \"$dir\"\ndone\n\n# Push all images\nfor dir in ops/docker/*/; do\n  image_name=$(basename \"$dir\")\n  docker push \"webgrip/$image_name:rebuild\"\ndone\n</code></pre>"},{"location":"cicd/automated-building/#configuration-management","title":"Configuration Management","text":""},{"location":"cicd/automated-building/#workflow-updates","title":"Workflow Updates","text":"<p>To modify the build pipeline:</p> <ol> <li>Test changes locally using ACT Runner</li> <li>Create feature branch for workflow changes</li> <li>Test in staging before merging to main</li> <li>Monitor first builds after changes</li> </ol>"},{"location":"cicd/automated-building/#adding-new-images","title":"Adding New Images","text":"<p>To add a new Docker image to the automated pipeline:</p> <ol> <li>Create image directory: <code>ops/docker/new-image/</code></li> <li>Add Dockerfile: Follow existing patterns</li> <li>Test locally: Verify build works</li> <li>Commit changes: Pipeline will automatically detect and build</li> </ol> <p>No workflow changes needed - the change detection system automatically includes new directories.</p>"},{"location":"cicd/automated-building/#secrets-management","title":"Secrets Management","text":"<p>Required secrets for the pipeline:</p> Secret Purpose Where to Set <code>DOCKER_USERNAME</code> Docker Hub authentication GitHub org secrets <code>DOCKER_TOKEN</code> Docker Hub push token GitHub org secrets"},{"location":"cicd/automated-building/#related-documentation","title":"Related Documentation","text":"<ul> <li>Architecture Overview - How CI/CD fits into our infrastructure</li> <li>Docker Registry - Registry configuration and management</li> <li>Workflow Details - Detailed workflow breakdown</li> <li>ACT Runner - Local testing of workflows</li> </ul>"},{"location":"cicd/automated-building/#maintenance","title":"Maintenance","text":""},{"location":"cicd/automated-building/#regular-maintenance-tasks","title":"Regular Maintenance Tasks","text":"<p>Weekly: - Review build success rates - Check for security vulnerabilities - Monitor image sizes</p> <p>Monthly: - Update base images - Review workflow performance - Clean up old image tags</p> <p>Quarterly: - Audit secrets and permissions - Review and optimize build times - Update reusable workflows</p>"},{"location":"cicd/automated-building/#update-procedures","title":"Update Procedures","text":"<p>Workflow Updates: 1. Test with ACT locally 2. Deploy to feature branch 3. Monitor initial builds 4. Merge to main</p> <p>Image Updates: 1. Update Dockerfile 2. Test local build 3. Commit to trigger pipeline 4. Verify published image</p> <p>Assumption: Builds primarily target x86_64 architecture. Multi-architecture builds (ARM64, etc.) may require additional configuration in the reusable workflows. Validation needed: Confirm architecture requirements with development teams.</p> <p>Maintainer: WebGrip Ops Team Source: <code>.github/workflows/on_dockerfile_change.yml</code> Dependencies: <code>webgrip/workflows</code></p>"},{"location":"cicd/docker-registry/","title":"Docker Registry","text":"<p>Our Docker Registry strategy and configuration for storing and distributing infrastructure container images.</p>"},{"location":"cicd/docker-registry/#overview","title":"Overview","text":"<p>WebGrip uses Docker Hub as the primary registry for hosting our infrastructure container images, providing:</p> <ul> <li>\u2705 Public accessibility for all team members and CI/CD systems</li> <li>\u2705 Automated pushing from GitHub Actions workflows  </li> <li>\u2705 Version management with semantic tagging strategies</li> <li>\u2705 Security scanning and vulnerability management</li> <li>\u2705 Global CDN for fast image pulls worldwide</li> </ul>"},{"location":"cicd/docker-registry/#registry-configuration","title":"Registry Configuration","text":""},{"location":"cicd/docker-registry/#docker-hub-organization","title":"Docker Hub Organization","text":"<p>Organization: <code>webgrip</code> Visibility: Public repositories Access Control: Organization-managed credentials</p>"},{"location":"cicd/docker-registry/#image-repositories","title":"Image Repositories","text":"Repository Purpose Latest Size Tags <code>webgrip/rust-ci-runner</code> Rust development environment ~800MB <code>latest</code>, commit SHAs <code>webgrip/github-runner</code> Self-hosted GitHub Actions runner ~500MB <code>latest</code>, commit SHAs <code>webgrip/helm-deploy</code> Kubernetes deployment tools ~150MB <code>latest</code>, commit SHAs <code>webgrip/playwright-runner</code> E2E testing environment ~2GB <code>latest</code>, commit SHAs <code>webgrip/act-runner</code> Local GitHub Actions testing ~100MB <code>latest</code>, commit SHAs <code>webgrip/rust-releaser</code> Release automation ~2GB <code>latest</code>, commit SHAs"},{"location":"cicd/docker-registry/#tagging-strategy","title":"Tagging Strategy","text":""},{"location":"cicd/docker-registry/#standard-tags","title":"Standard Tags","text":"<p>Every successful build produces consistent tags:</p> <pre><code># Latest stable version (moves with each build)\nwebgrip/rust-ci-runner:latest\n\n# Specific commit version (immutable)\nwebgrip/rust-ci-runner:a1b2c3d4567890abcdef1234567890abcdef1234\n</code></pre>"},{"location":"cicd/docker-registry/#semantic-versioning-future","title":"Semantic Versioning (Future)","text":"<p>For stable releases, we plan to implement semantic versioning:</p> <pre><code># Major.Minor.Patch versions\nwebgrip/rust-ci-runner:1.0.0\nwebgrip/rust-ci-runner:1.0.1\nwebgrip/rust-ci-runner:1.1.0\n\n# Pre-release versions\nwebgrip/rust-ci-runner:2.0.0-beta.1\nwebgrip/rust-ci-runner:2.0.0-rc.1\n</code></pre>"},{"location":"cicd/docker-registry/#tag-lifecycle","title":"Tag Lifecycle","text":"<pre><code>flowchart TD\n    COMMIT[Git Commit] --&gt; BUILD[Automated Build]\n    BUILD --&gt; SHA_TAG[Create SHA Tag]\n    BUILD --&gt; LATEST_TAG[Update Latest Tag]\n\n    SHA_TAG --&gt; IMMUTABLE[Immutable Reference]\n    LATEST_TAG --&gt; MOVING[Moving Reference]\n\n    IMMUTABLE --&gt; LONG_TERM[Long-term Storage]\n    MOVING --&gt; CURRENT[Current Version]\n\n    subgraph \"Tag Retention\"\n        LONG_TERM --&gt; CLEANUP[Cleanup Old SHAs]\n        CURRENT --&gt; ALWAYS[Always Available]\n    end</code></pre>"},{"location":"cicd/docker-registry/#authentication-and-access","title":"Authentication and Access","text":""},{"location":"cicd/docker-registry/#registry-credentials","title":"Registry Credentials","text":"<p>Access to push images is controlled via GitHub organization secrets:</p> Secret Purpose Access Level <code>DOCKER_USERNAME</code> Docker Hub username Organization-wide <code>DOCKER_TOKEN</code> Docker Hub access token Organization-wide"},{"location":"cicd/docker-registry/#access-patterns","title":"Access Patterns","text":"<pre><code># CI/CD Push Access\n- name: Login to Docker Hub\n  uses: docker/login-action@v2\n  with:\n    username: ${{ secrets.DOCKER_USERNAME }}\n    password: ${{ secrets.DOCKER_TOKEN }}\n\n# Public Pull Access (no authentication required)\ndocker pull webgrip/rust-ci-runner:latest\n</code></pre>"},{"location":"cicd/docker-registry/#permission-model","title":"Permission Model","text":"<pre><code>flowchart LR\n    subgraph \"GitHub Organization\"\n        ORG_SECRETS[Organization Secrets]\n        WORKFLOWS[GitHub Actions Workflows]\n    end\n\n    subgraph \"Docker Hub\"\n        WEBGRIP_ORG[webgrip Organization]\n        REPOSITORIES[Image Repositories]\n    end\n\n    subgraph \"Users\"\n        DEVELOPERS[Developers - Pull Only]\n        CI_CD[CI/CD - Push Access]\n        PUBLIC[Public - Pull Only]\n    end\n\n    ORG_SECRETS --&gt; WORKFLOWS\n    WORKFLOWS --&gt; CI_CD\n    CI_CD --&gt; WEBGRIP_ORG\n    WEBGRIP_ORG --&gt; REPOSITORIES\n\n    DEVELOPERS --&gt; REPOSITORIES\n    PUBLIC --&gt; REPOSITORIES</code></pre>"},{"location":"cicd/docker-registry/#image-management","title":"Image Management","text":""},{"location":"cicd/docker-registry/#build-and-push-process","title":"Build and Push Process","text":"<p>The automated pipeline follows this sequence:</p> <ol> <li>Change Detection: Identify modified Docker images</li> <li>Parallel Building: Build changed images simultaneously  </li> <li>Security Scanning: Scan for vulnerabilities</li> <li>Registry Push: Upload with both tags</li> <li>Cleanup: Remove temporary build artifacts</li> </ol> <pre><code>sequenceDiagram\n    participant Dev as Developer\n    participant GH as GitHub\n    participant Actions as GitHub Actions\n    participant Registry as Docker Hub\n\n    Dev-&gt;&gt;GH: Push Dockerfile changes\n    GH-&gt;&gt;Actions: Trigger workflow\n    Actions-&gt;&gt;Actions: Build image\n    Actions-&gt;&gt;Actions: Security scan\n    Actions-&gt;&gt;Registry: docker login\n    Actions-&gt;&gt;Registry: docker push image:latest\n    Actions-&gt;&gt;Registry: docker push image:sha\n    Registry-&gt;&gt;Registry: Update repository</code></pre>"},{"location":"cicd/docker-registry/#image-size-optimization","title":"Image Size Optimization","text":"<p>We implement several strategies to keep images small:</p>"},{"location":"cicd/docker-registry/#multi-stage-builds","title":"Multi-stage Builds","text":"<pre><code># Example from rust-ci-runner\nFROM rust:1.87.0-slim-bookworm AS build\n# ... build tools and dependencies\n\nFROM debian:bookworm-slim AS final\n# ... copy only necessary artifacts\n</code></pre>"},{"location":"cicd/docker-registry/#layer-optimization","title":"Layer Optimization","text":"<pre><code># Combine RUN commands to reduce layers\nRUN apt-get update -qq &amp;&amp; \\\n    apt-get install -y --no-install-recommends \\\n      ca-certificates build-essential &amp;&amp; \\\n    rm -rf /var/lib/apt/lists/*\n</code></pre>"},{"location":"cicd/docker-registry/#base-image-selection","title":"Base Image Selection","text":"<ul> <li>Alpine Linux: For minimal footprint (<code>act-runner</code>, <code>helm-deploy</code>)</li> <li>Debian Slim: For compatibility (<code>rust-ci-runner</code>)</li> <li>Official Images: For feature completeness (<code>playwright-runner</code>)</li> </ul>"},{"location":"cicd/docker-registry/#registry-storage-management","title":"Registry Storage Management","text":""},{"location":"cicd/docker-registry/#automated-cleanup","title":"Automated Cleanup","text":"<p>Current State: Manual cleanup of old SHA tags Planned: Automated retention policies</p> <pre><code># Manual cleanup script (planned automation)\n#!/bin/bash\n# Keep last 50 SHA tags, remove older ones\ndocker_tags=$(curl -s \"https://hub.docker.com/v2/repositories/webgrip/rust-ci-runner/tags/\" | \\\n             jq -r '.results[].name' | \\\n             grep -E '^[a-f0-9]{40}$' | \\\n             tail -n +51)\n\nfor tag in $docker_tags; do\n  # Delete old SHA tags\n  curl -X DELETE \\\n    -H \"Authorization: Bearer $DOCKER_TOKEN\" \\\n    \"https://hub.docker.com/v2/repositories/webgrip/rust-ci-runner/tags/$tag/\"\ndone\n</code></pre>"},{"location":"cicd/docker-registry/#storage-monitoring","title":"Storage Monitoring","text":"<p>Track registry usage metrics:</p> <ul> <li>Total storage: Sum of all image layers across repositories</li> <li>Bandwidth usage: Download statistics for optimization</li> <li>Tag proliferation: Number of tags per repository</li> </ul>"},{"location":"cicd/docker-registry/#security-and-compliance","title":"Security and Compliance","text":""},{"location":"cicd/docker-registry/#image-security-scanning","title":"Image Security Scanning","text":"<p>Images are scanned for vulnerabilities during the build process:</p> <pre><code># Security scanning in CI pipeline\n- name: Scan image for vulnerabilities\n  uses: docker/scout-action@v1\n  with:\n    command: cves\n    image: webgrip/rust-ci-runner:latest\n</code></pre>"},{"location":"cicd/docker-registry/#vulnerability-management","title":"Vulnerability Management","text":"<pre><code>flowchart TD\n    BUILD[Image Build] --&gt; SCAN[Security Scan]\n    SCAN --&gt; CRITICAL{Critical Vulns?}\n    CRITICAL --&gt;|Yes| BLOCK[Block Release]\n    CRITICAL --&gt;|No| HIGH{High Vulns?}\n    HIGH --&gt;|Yes| WARN[Warning + Release]\n    HIGH --&gt;|No| PASS[Pass + Release]\n\n    BLOCK --&gt; FIX[Fix Vulnerabilities]\n    FIX --&gt; BUILD\n\n    WARN --&gt; TRACK[Track for Next Release]\n    PASS --&gt; RELEASE[Release to Registry]</code></pre>"},{"location":"cicd/docker-registry/#supply-chain-security","title":"Supply Chain Security","text":"<ol> <li>Base Image Verification: Use official, signed base images</li> <li>Dependency Scanning: Scan package dependencies for vulnerabilities</li> <li>SBOM Generation: Generate Software Bill of Materials</li> <li>Image Signing: Plan to implement image signing with cosign</li> </ol>"},{"location":"cicd/docker-registry/#access-security","title":"Access Security","text":"<ul> <li>Token Rotation: Regular rotation of Docker Hub access tokens</li> <li>Least Privilege: Minimal permissions for CI/CD access</li> <li>Audit Logging: Track all registry access and modifications</li> </ul>"},{"location":"cicd/docker-registry/#performance-and-optimization","title":"Performance and Optimization","text":""},{"location":"cicd/docker-registry/#pull-performance","title":"Pull Performance","text":"<p>Optimize image pull times through:</p>"},{"location":"cicd/docker-registry/#layer-caching-strategy","title":"Layer Caching Strategy","text":"<pre><code># Order layers by change frequency (least to most)\nCOPY requirements.txt .\nRUN pip install -r requirements.txt  # Changes infrequently\n\nCOPY . .                             # Changes frequently\nRUN python setup.py install         # Changes frequently\n</code></pre>"},{"location":"cicd/docker-registry/#registry-proximity","title":"Registry Proximity","text":"<ul> <li>Global CDN: Docker Hub provides global edge locations</li> <li>Regional Caching: Consider additional registry mirrors for high-usage regions</li> </ul>"},{"location":"cicd/docker-registry/#build-performance","title":"Build Performance","text":""},{"location":"cicd/docker-registry/#parallel-builds","title":"Parallel Builds","text":"<pre><code>strategy:\n  matrix:\n    image: [rust-ci-runner, playwright-runner, helm-deploy]\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Build ${{ matrix.image }}\n        run: docker build ops/docker/${{ matrix.image }}\n</code></pre>"},{"location":"cicd/docker-registry/#build-cache-optimization","title":"Build Cache Optimization","text":"<pre><code>- name: Setup Docker Buildx\n  uses: docker/setup-buildx-action@v2\n  with:\n    driver-opts: |\n      image=moby/buildkit:master\n      network=host\n\n- name: Build with cache\n  uses: docker/build-push-action@v4\n  with:\n    cache-from: type=gha\n    cache-to: type=gha,mode=max\n</code></pre>"},{"location":"cicd/docker-registry/#monitoring-and-alerting","title":"Monitoring and Alerting","text":""},{"location":"cicd/docker-registry/#registry-health-monitoring","title":"Registry Health Monitoring","text":"<p>Track key metrics for registry health:</p> <pre><code># Example monitoring checks\nregistry_metrics:\n  - name: \"Image pull success rate\"\n    threshold: \"&gt; 99%\"\n\n  - name: \"Average pull time\"\n    threshold: \"&lt; 30s\"\n\n  - name: \"Storage usage growth\"\n    threshold: \"&lt; 10% per month\"\n\n  - name: \"Security scan pass rate\"\n    threshold: \"&gt; 95%\"\n</code></pre>"},{"location":"cicd/docker-registry/#alerting-configuration","title":"Alerting Configuration","text":"<p>Critical Alerts: - Registry authentication failures - Critical security vulnerabilities detected - Registry storage quota exceeded</p> <p>Warning Alerts: - Slow image pull times - High vulnerability counts - Unusual download patterns</p>"},{"location":"cicd/docker-registry/#backup-and-disaster-recovery","title":"Backup and Disaster Recovery","text":""},{"location":"cicd/docker-registry/#backup-strategy","title":"Backup Strategy","text":"<pre><code>flowchart TD\n    REGISTRY[Docker Hub Registry] --&gt; MIRROR[Mirror Registry]\n    REGISTRY --&gt; LOCAL[Local Backup]\n    REGISTRY --&gt; REBUILD[Source-based Rebuild]\n\n    subgraph \"Recovery Options\"\n        MIRROR --&gt; RESTORE1[Quick Restore]\n        LOCAL --&gt; RESTORE2[Offline Restore]\n        REBUILD --&gt; RESTORE3[Clean Rebuild]\n    end</code></pre>"},{"location":"cicd/docker-registry/#recovery-procedures","title":"Recovery Procedures","text":""},{"location":"cicd/docker-registry/#quick-recovery-mirror-registry","title":"Quick Recovery (Mirror Registry)","text":"<pre><code># Pull from backup registry\ndocker pull backup-registry.com/webgrip/rust-ci-runner:latest\ndocker tag backup-registry.com/webgrip/rust-ci-runner:latest webgrip/rust-ci-runner:latest\ndocker push webgrip/rust-ci-runner:latest\n</code></pre>"},{"location":"cicd/docker-registry/#source-based-recovery","title":"Source-based Recovery","text":"<pre><code># Rebuild from source\ngit clone https://github.com/webgrip/infrastructure\ncd infrastructure\nmake rebuild-all-images\n</code></pre>"},{"location":"cicd/docker-registry/#local-backup-recovery","title":"Local Backup Recovery","text":"<pre><code># Restore from local backup\ndocker load &lt; backups/webgrip-rust-ci-runner-latest.tar\ndocker push webgrip/rust-ci-runner:latest\n</code></pre>"},{"location":"cicd/docker-registry/#future-improvements","title":"Future Improvements","text":""},{"location":"cicd/docker-registry/#planned-enhancements","title":"Planned Enhancements","text":"<ol> <li>Multi-architecture Builds: Support ARM64 and other architectures</li> <li>Private Registry: Consider private registry for sensitive images</li> <li>Image Signing: Implement cosign for image verification</li> <li>Automated Cleanup: Implement automated tag retention policies</li> <li>Registry Mirrors: Deploy regional mirrors for faster access</li> </ol>"},{"location":"cicd/docker-registry/#migration-considerations","title":"Migration Considerations","text":"<p>To Private Registry: - Update authentication mechanisms - Modify CI/CD workflows - Update documentation and access patterns</p> <p>To Multi-registry Strategy: - Implement registry selection logic - Add failover mechanisms - Update monitoring and alerting</p>"},{"location":"cicd/docker-registry/#troubleshooting","title":"Troubleshooting","text":""},{"location":"cicd/docker-registry/#common-issues","title":"Common Issues","text":"<p>\"Authentication failed\" errors <pre><code># Verify credentials\ndocker login --username $DOCKER_USERNAME\n\n# Test with docker command\necho $DOCKER_TOKEN | docker login --username $DOCKER_USERNAME --password-stdin\n</code></pre></p> <p>Image pull failures <pre><code># Check image exists\ndocker manifest inspect webgrip/rust-ci-runner:latest\n\n# Try different tag\ndocker pull webgrip/rust-ci-runner:latest\ndocker pull webgrip/rust-ci-runner:$(git rev-parse HEAD)\n</code></pre></p> <p>Large image sizes <pre><code># Analyze image layers\ndocker history webgrip/rust-ci-runner:latest\n\n# Use dive for detailed analysis\ndive webgrip/rust-ci-runner:latest\n</code></pre></p> <p>Registry quota exceeded <pre><code># Check registry usage\ncurl -s -H \"Authorization: Bearer $DOCKER_TOKEN\" \\\n  \"https://hub.docker.com/v2/repositories/webgrip/?page_size=100\"\n\n# Clean up old images\n# (See automated cleanup script above)\n</code></pre></p>"},{"location":"cicd/docker-registry/#related-documentation","title":"Related Documentation","text":"<ul> <li>Automated Building - How images are built and pushed</li> <li>Workflow Details - Detailed CI/CD workflow information</li> <li>Architecture Overview - Registry role in infrastructure</li> <li>Docker Images - Individual image documentation</li> </ul> <p>Assumption: Docker Hub public repositories meet current needs. Future growth may require private registries or multi-cloud registry strategy. Validation needed: Confirm long-term registry strategy with infrastructure team.</p> <p>Maintainer: WebGrip Ops Team Registry: Docker Hub webgrip organization Authentication: Organization-level GitHub secrets</p>"},{"location":"cicd/workflow-details/","title":"Workflow Details","text":"<p>Detailed breakdown of our GitHub Actions workflows, their dependencies, and integration patterns.</p>"},{"location":"cicd/workflow-details/#overview","title":"Overview","text":"<p>Our CI/CD workflows are built on a foundation of reusable workflows from the <code>webgrip/workflows</code> repository, providing:</p> <ul> <li>\u2705 Standardized patterns across all WebGrip repositories</li> <li>\u2705 Centralized maintenance of common workflow logic</li> <li>\u2705 Consistent behavior for builds, tests, and deployments</li> <li>\u2705 Reduced duplication through reusable components</li> <li>\u2705 Version management of workflow dependencies</li> </ul>"},{"location":"cicd/workflow-details/#workflow-architecture","title":"Workflow Architecture","text":""},{"location":"cicd/workflow-details/#primary-workflow-dockerfile-change-detection","title":"Primary Workflow: Dockerfile Change Detection","text":"<pre><code>flowchart TD\n    subgraph \"Main Repository\"\n        TRIGGER[Push to main&lt;br/&gt;ops/docker/** changes]\n        MAIN_WF[on_dockerfile_change.yml]\n    end\n\n    subgraph \"webgrip/workflows Repository\"\n        DETECT_WF[determine-changed-directories.yml]\n        BUILD_WF[docker-build-and-push.yml]\n    end\n\n    subgraph \"Execution Flow\"\n        MATRIX[Build Matrix Generation]\n        PARALLEL[Parallel Build Jobs]\n        REGISTRY[Docker Registry Push]\n    end\n\n    TRIGGER --&gt; MAIN_WF\n    MAIN_WF --&gt; DETECT_WF\n    DETECT_WF --&gt; MATRIX\n    MATRIX --&gt; BUILD_WF\n    BUILD_WF --&gt; PARALLEL\n    PARALLEL --&gt; REGISTRY</code></pre>"},{"location":"cicd/workflow-details/#workflow-dependencies","title":"Workflow Dependencies","text":"<pre><code>flowchart LR\n    subgraph \"Infrastructure Repo\"\n        ON_CHANGE[on_dockerfile_change.yml]\n    end\n\n    subgraph \"webgrip/workflows Repo\"\n        DETECT[determine-changed-directories]\n        BUILD[docker-build-and-push]\n        COMMON[common-actions]\n    end\n\n    subgraph \"External Dependencies\"\n        DOCKER_HUB[Docker Hub Registry]\n        GITHUB_API[GitHub API]\n        ACTION_MARKETPLACE[GitHub Actions Marketplace]\n    end\n\n    ON_CHANGE --&gt; DETECT\n    ON_CHANGE --&gt; BUILD\n    DETECT --&gt; COMMON\n    BUILD --&gt; COMMON\n\n    BUILD --&gt; DOCKER_HUB\n    DETECT --&gt; GITHUB_API\n    COMMON --&gt; ACTION_MARKETPLACE</code></pre>"},{"location":"cicd/workflow-details/#workflow-breakdown","title":"Workflow Breakdown","text":""},{"location":"cicd/workflow-details/#1-trigger-configuration","title":"1. Trigger Configuration","text":"<pre><code># .github/workflows/on_dockerfile_change.yml\non:\n  push:\n    branches: [main]\n    paths: ['ops/docker/**']\n</code></pre> <p>Trigger Logic: - Branch Filter: Only <code>main</code> branch pushes - Path Filter: Only changes to <code>ops/docker/**</code>  - File Types: Any file changes in Docker image directories</p> <p>Concurrency Control: <pre><code>concurrency:\n  group: push-${{ github.branch }}\n  cancel-in-progress: true\n</code></pre></p>"},{"location":"cicd/workflow-details/#2-change-detection-job","title":"2. Change Detection Job","text":"<pre><code>determine-changed-directories:\n  uses: webgrip/workflows/.github/workflows/determine-changed-directories.yml@ubuntu-latest\n  with:\n    inside-dir: 'ops/docker'\n</code></pre> <p>Purpose: Identify which Docker image directories contain changes</p> <p>Inputs: - <code>inside-dir</code>: Directory to scan for changes (<code>ops/docker</code>)</p> <p>Outputs: - <code>matrix</code>: JSON array of changed directories for parallel building</p> <p>Algorithm: 1. Compare current commit with previous commit 2. Filter changes to specified directory 3. Group changes by subdirectory 4. Generate matrix for parallel execution</p>"},{"location":"cicd/workflow-details/#3-build-and-push-job","title":"3. Build and Push Job","text":"<pre><code>build-and-push-changed-dirs:\n  needs: [determine-changed-directories]\n  if: needs.determine-changed-directories.outputs.matrix != '[]'\n  strategy:\n    fail-fast: false\n    matrix:\n      include: ${{ fromJson(needs.determine-changed-directories.outputs.matrix) }}\n  uses: webgrip/workflows/.github/workflows/docker-build-and-push.yml@ubuntu-latest\n</code></pre> <p>Conditional Execution: Only runs if changes detected</p> <p>Parallel Strategy: - <code>fail-fast: false</code>: Continue building other images if one fails - Dynamic matrix from change detection output</p> <p>Per-Image Inputs: <pre><code>with:\n  docker-context: ${{ matrix.path }}\n  docker-file: Dockerfile\n  docker-tags: |\n    ${{ github.repository_owner }}/${{ matrix.basename }}:latest\n    ${{ github.repository_owner }}/${{ matrix.basename }}:${{ github.sha }}\n</code></pre></p>"},{"location":"cicd/workflow-details/#reusable-workflow-details","title":"Reusable Workflow Details","text":""},{"location":"cicd/workflow-details/#determine-changed-directoriesyml","title":"determine-changed-directories.yml","text":"<p>Location: <code>webgrip/workflows/.github/workflows/determine-changed-directories.yml</code></p> <p>Purpose: Detect which directories have changes and create build matrix</p> <p>Inputs: | Input | Required | Description | Default | |-------|----------|-------------|---------| | <code>inside-dir</code> | Yes | Directory to scan for changes | N/A | | <code>exclude-dirs</code> | No | Directories to exclude | <code>\"\"</code> |</p> <p>Outputs: | Output | Description | Example | |--------|-------------|---------| | <code>matrix</code> | JSON build matrix | <code>[{\"path\": \"ops/docker/rust-ci\", \"basename\": \"rust-ci\"}]</code> | | <code>changed-count</code> | Number of changed directories | <code>2</code> |</p> <p>Implementation Logic: <pre><code># Simplified logic\ngit diff --name-only HEAD~1 HEAD | \\\n  grep \"^${inside_dir}/\" | \\\n  cut -d'/' -f1-3 | \\\n  sort -u | \\\n  jq -R -s 'split(\"\\n\") | map(select(length &gt; 0)) | map({\"path\": ., \"basename\": split(\"/\")[-1]})'\n</code></pre></p>"},{"location":"cicd/workflow-details/#docker-build-and-pushyml","title":"docker-build-and-push.yml","text":"<p>Location: <code>webgrip/workflows/.github/workflows/docker-build-and-push.yml</code></p> <p>Purpose: Build and push individual Docker images</p> <p>Inputs: | Input | Required | Description | Default | |-------|----------|-------------|---------| | <code>docker-context</code> | Yes | Build context directory | N/A | | <code>docker-file</code> | No | Dockerfile name | <code>Dockerfile</code> | | <code>docker-tags</code> | Yes | Newline-separated tags | N/A | | <code>platforms</code> | No | Target platforms | <code>linux/amd64</code> | | <code>build-args</code> | No | Build arguments | <code>\"\"</code> |</p> <p>Secrets: | Secret | Required | Description | |--------|----------|-------------| | <code>DOCKER_USERNAME</code> | Yes | Docker Hub username | | <code>DOCKER_TOKEN</code> | Yes | Docker Hub access token |</p> <p>Workflow Steps: 1. Checkout: Source code checkout 2. Setup: Docker Buildx setup for advanced features 3. Login: Authenticate with Docker registry 4. Build: Build image with specified context and tags 5. Push: Push to registry with all specified tags 6. Cleanup: Clean up build artifacts</p>"},{"location":"cicd/workflow-details/#advanced-workflow-features","title":"Advanced Workflow Features","text":""},{"location":"cicd/workflow-details/#multi-platform-builds","title":"Multi-Platform Builds","text":"<pre><code># Example multi-platform configuration\nwith:\n  docker-context: ops/docker/rust-ci-runner\n  platforms: |\n    linux/amd64\n    linux/arm64\n  docker-tags: |\n    webgrip/rust-ci-runner:latest\n    webgrip/rust-ci-runner:${{ github.sha }}\n</code></pre> <p>Supported Platforms: - <code>linux/amd64</code> - Intel/AMD 64-bit (primary) - <code>linux/arm64</code> - ARM 64-bit (experimental) - <code>linux/arm/v7</code> - ARM 32-bit (on request)</p>"},{"location":"cicd/workflow-details/#build-arguments","title":"Build Arguments","text":"<pre><code># Pass build-time arguments\nwith:\n  build-args: |\n    RUST_VERSION=1.87.0\n    NODE_VERSION=20\n    BUILD_DATE=${{ github.event.head_commit.timestamp }}\n</code></pre>"},{"location":"cicd/workflow-details/#registry-configuration","title":"Registry Configuration","text":"<pre><code># Alternative registry configuration\nwith:\n  registry: ghcr.io\n  docker-tags: |\n    ghcr.io/webgrip/rust-ci-runner:latest\n    ghcr.io/webgrip/rust-ci-runner:${{ github.sha }}\nsecrets:\n  DOCKER_USERNAME: ${{ github.actor }}\n  DOCKER_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n</code></pre>"},{"location":"cicd/workflow-details/#workflow-security","title":"Workflow Security","text":""},{"location":"cicd/workflow-details/#secret-management","title":"Secret Management","text":"<pre><code>flowchart TD\n    subgraph \"GitHub Organization\"\n        ORG_SECRETS[Organization Secrets]\n        REPO_SECRETS[Repository Secrets]\n    end\n\n    subgraph \"Workflow Execution\"\n        WF_CONTEXT[Workflow Context]\n        JOB_CONTEXT[Job Context]\n    end\n\n    subgraph \"External Services\"\n        DOCKER_HUB[Docker Hub]\n        REGISTRIES[Other Registries]\n    end\n\n    ORG_SECRETS --&gt; WF_CONTEXT\n    REPO_SECRETS --&gt; WF_CONTEXT\n    WF_CONTEXT --&gt; JOB_CONTEXT\n    JOB_CONTEXT --&gt; DOCKER_HUB\n    JOB_CONTEXT --&gt; REGISTRIES</code></pre>"},{"location":"cicd/workflow-details/#permission-model","title":"Permission Model","text":"<p>Workflow Permissions: <pre><code>permissions:\n  contents: read    # Read repository contents\n  packages: write   # Push to GitHub Packages (if needed)\n  actions: read     # Read workflow status\n</code></pre></p> <p>Secret Access: - Organization Level: <code>DOCKER_USERNAME</code>, <code>DOCKER_TOKEN</code> - Repository Level: Project-specific secrets - Environment Level: Environment-specific overrides</p>"},{"location":"cicd/workflow-details/#security-best-practices","title":"Security Best Practices","text":"<ol> <li>Minimal Permissions: Workflows use least-privilege access</li> <li>Secret Rotation: Regular rotation of access tokens</li> <li>Audit Logging: All workflow executions logged and auditable</li> <li>Branch Protection: Only protected branches can trigger builds</li> </ol>"},{"location":"cicd/workflow-details/#workflow-monitoring","title":"Workflow Monitoring","text":""},{"location":"cicd/workflow-details/#execution-tracking","title":"Execution Tracking","text":"<pre><code># Built-in monitoring via GitHub Actions\n- name: Report build status\n  if: always()\n  run: |\n    echo \"Workflow: ${{ github.workflow }}\"\n    echo \"Run ID: ${{ github.run_id }}\"\n    echo \"Status: ${{ job.status }}\"\n</code></pre>"},{"location":"cicd/workflow-details/#performance-metrics","title":"Performance Metrics","text":"<p>Track key workflow performance indicators:</p> Metric Target Current Monitoring Build Time &lt; 10 minutes ~5 minutes GitHub Actions UI Success Rate &gt; 95% ~98% Workflow status API Parallel Efficiency &gt; 80% ~85% Job duration analysis Cache Hit Rate &gt; 70% ~75% Build logs analysis"},{"location":"cicd/workflow-details/#alerting-configuration","title":"Alerting Configuration","text":"<pre><code># Example workflow notification\n- name: Notify on failure\n  if: failure()\n  uses: 8398a7/action-slack@v3\n  with:\n    status: failure\n    webhook_url: ${{ secrets.SLACK_WEBHOOK }}\n    message: |\n      Docker build failed for ${{ matrix.basename }}\n      Run: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}\n</code></pre>"},{"location":"cicd/workflow-details/#troubleshooting-workflows","title":"Troubleshooting Workflows","text":""},{"location":"cicd/workflow-details/#common-issues","title":"Common Issues","text":"<p>Matrix generation empty <pre><code># Debug matrix output\n- name: Debug Matrix\n  run: |\n    echo \"Matrix: ${{ needs.determine-changed-directories.outputs.matrix }}\"\n    echo \"Changed count: ${{ needs.determine-changed-directories.outputs.changed-count }}\"\n</code></pre></p> <p>Build context errors <pre><code># Verify build context\n- name: List build context\n  run: |\n    echo \"Context: ${{ matrix.path }}\"\n    ls -la ${{ matrix.path }}/\n    cat ${{ matrix.path }}/Dockerfile\n</code></pre></p> <p>Registry authentication failures <pre><code># Test registry access\n- name: Test Docker login\n  run: |\n    echo \"Testing Docker Hub connection...\"\n    docker info\n    echo \"${{ secrets.DOCKER_TOKEN }}\" | docker login --username \"${{ secrets.DOCKER_USERNAME }}\" --password-stdin\n</code></pre></p> <p>Workflow dependency issues <pre><code># Check reusable workflow versions\n- name: Check workflow versions\n  run: |\n    echo \"Using workflows from: webgrip/workflows@ubuntu-latest\"\n    # Consider pinning to specific versions for stability\n</code></pre></p>"},{"location":"cicd/workflow-details/#debugging-strategies","title":"Debugging Strategies","text":"<ol> <li> <p>Enable Debug Logging:    <pre><code>env:\n  ACTIONS_STEP_DEBUG: true\n  ACTIONS_RUNNER_DEBUG: true\n</code></pre></p> </li> <li> <p>Add Debug Steps:    <pre><code>- name: Debug Environment\n  run: |\n    echo \"GitHub Context:\"\n    echo \"${{ toJson(github) }}\"\n    echo \"Matrix Context:\"\n    echo \"${{ toJson(matrix) }}\"\n</code></pre></p> </li> <li> <p>Local Testing:    <pre><code># Use ACT for local workflow testing\ndocker run --rm -v $(pwd):/workspace -w /workspace \\\n  webgrip/act-runner:latest \\\n  -W .github/workflows/on_dockerfile_change.yml\n</code></pre></p> </li> </ol>"},{"location":"cicd/workflow-details/#workflow-optimization","title":"Workflow Optimization","text":""},{"location":"cicd/workflow-details/#performance-improvements","title":"Performance Improvements","text":"<ol> <li> <p>Build Caching:    <pre><code>- name: Setup Docker Buildx\n  uses: docker/setup-buildx-action@v2\n  with:\n    driver-opts: network=host\n\n- name: Build with cache\n  uses: docker/build-push-action@v4\n  with:\n    cache-from: type=gha\n    cache-to: type=gha,mode=max\n</code></pre></p> </li> <li> <p>Parallel Execution:    <pre><code>strategy:\n  fail-fast: false\n  max-parallel: 4  # Limit concurrent jobs\n</code></pre></p> </li> <li> <p>Conditional Execution:    <pre><code>if: |\n  needs.determine-changed-directories.outputs.matrix != '[]' &amp;&amp;\n  !contains(github.event.head_commit.message, '[skip ci]')\n</code></pre></p> </li> </ol>"},{"location":"cicd/workflow-details/#resource-optimization","title":"Resource Optimization","text":"<pre><code># Optimize runner resources\nruns-on: ubuntu-latest  # Use GitHub-hosted runners\n# Consider self-hosted for heavy builds:\n# runs-on: [self-hosted, linux, x64]\n</code></pre>"},{"location":"cicd/workflow-details/#future-enhancements","title":"Future Enhancements","text":""},{"location":"cicd/workflow-details/#planned-improvements","title":"Planned Improvements","text":"<ol> <li>Workflow Versioning: Pin reusable workflows to specific versions</li> <li>Advanced Caching: Implement cross-workflow caching strategies</li> <li>Multi-Registry: Support multiple Docker registries</li> <li>Security Scanning: Integrate security scanning into workflows</li> <li>Notification Integration: Enhanced Slack/email notifications</li> </ol>"},{"location":"cicd/workflow-details/#workflow-evolution","title":"Workflow Evolution","text":"<pre><code>flowchart TD\n    CURRENT[Current Workflow] --&gt; VERSIONED[Versioned Workflows]\n    VERSIONED --&gt; CACHED[Advanced Caching]\n    CACHED --&gt; SECURITY[Security Integration]\n    SECURITY --&gt; MULTI_REG[Multi-Registry]\n    MULTI_REG --&gt; NOTIFICATIONS[Enhanced Notifications]\n\n    subgraph \"Version 1.0\"\n        CURRENT\n    end\n\n    subgraph \"Version 2.0\"\n        VERSIONED\n        CACHED\n    end\n\n    subgraph \"Version 3.0\"\n        SECURITY\n        MULTI_REG\n        NOTIFICATIONS\n    end</code></pre>"},{"location":"cicd/workflow-details/#related-documentation","title":"Related Documentation","text":"<ul> <li>Automated Building - High-level build process overview</li> <li>Docker Registry - Registry configuration and management</li> <li>ACT Runner - Local workflow testing</li> <li>Architecture Overview - CI/CD in our infrastructure</li> </ul> <p>Assumption: Reusable workflows from webgrip/workflows repository remain stable and backward-compatible. Major changes should be coordinated across all consuming repositories. Validation needed: Establish workflow versioning and compatibility policies.</p> <p>Maintainer: WebGrip Ops Team Source: <code>.github/workflows/on_dockerfile_change.yml</code> Dependencies: <code>webgrip/workflows</code></p>"},{"location":"docker-images/act-runner/","title":"ACT Runner","text":"<p>A lightweight Alpine-based container for running GitHub Actions workflows locally using the ACT (Actions Container Toolkit) tool.</p>"},{"location":"docker-images/act-runner/#purpose","title":"Purpose","text":"<p>The ACT Runner enables local GitHub Actions testing by providing:</p> <ul> <li>\u2705 Local workflow execution without pushing to GitHub</li> <li>\u2705 Fast iteration cycles for workflow development</li> <li>\u2705 Debugging capabilities for complex GitHub Actions</li> <li>\u2705 Cost reduction by testing locally before using GitHub Actions minutes</li> <li>\u2705 Offline development when internet connectivity is limited</li> </ul>"},{"location":"docker-images/act-runner/#image-details","title":"Image Details","text":"Property Value Base Image <code>alpine:3.22.1</code> Size ~100MB (minimal Alpine + ACT + Docker CLI) Architecture AMD64 Registry <code>webgrip/act-runner</code> Dockerfile <code>ops/docker/act-runner/Dockerfile</code>"},{"location":"docker-images/act-runner/#installed-tools","title":"Installed Tools","text":""},{"location":"docker-images/act-runner/#core-tools","title":"Core Tools","text":"Tool Purpose Installation Method ACT GitHub Actions local runner Official install script Docker CLI Container management Alpine package Git Version control integration Alpine package Bash Shell scripting environment Alpine package curl HTTP client for API calls Alpine package"},{"location":"docker-images/act-runner/#system-components","title":"System Components","text":"<ul> <li>Alpine Linux 3.22.1 - Minimal, security-focused base OS</li> <li>Docker socket access - Required for running containerized actions</li> <li>Workspace directory - <code>/workspace</code> for project files</li> </ul>"},{"location":"docker-images/act-runner/#architecture","title":"Architecture","text":""},{"location":"docker-images/act-runner/#local-workflow-execution","title":"Local Workflow Execution","text":"<pre><code>flowchart TD\n    DEV[Developer] --&gt; ACT_CMD[act command]\n    ACT_CMD --&gt; ACT_RUNNER[ACT Runner Container]\n    ACT_RUNNER --&gt; DOCKER_HOST[Docker Host]\n    DOCKER_HOST --&gt; ACTION_CONTAINERS[Action Containers]\n    ACTION_CONTAINERS --&gt; WORKSPACE[Workspace Volume]\n    WORKSPACE --&gt; RESULTS[Execution Results]\n    RESULTS --&gt; DEV\n\n    subgraph \"ACT Runner Container\"\n        ACT_BINARY[ACT Binary]\n        DOCKER_CLI[Docker CLI]\n        GIT[Git]\n    end\n\n    subgraph \"Action Execution\"\n        CHECKOUT[actions/checkout]\n        SETUP[actions/setup-*]\n        CUSTOM[Custom Actions]\n        SCRIPTS[Run Scripts]\n    end\n\n    ACT_RUNNER --&gt; ACT_BINARY\n    ACT_BINARY --&gt; ACTION_EXECUTION\n    ACTION_EXECUTION --&gt; CHECKOUT\n    ACTION_EXECUTION --&gt; SETUP\n    ACTION_EXECUTION --&gt; CUSTOM\n    ACTION_EXECUTION --&gt; SCRIPTS</code></pre>"},{"location":"docker-images/act-runner/#docker-in-docker-pattern","title":"Docker-in-Docker Pattern","text":"<pre><code>flowchart LR\n    subgraph \"Host System\"\n        DOCKER_DAEMON[Docker Daemon]\n        HOST_WORKSPACE[Host Workspace]\n    end\n\n    subgraph \"ACT Runner Container\"\n        ACT[ACT Process]\n        DOCKER_CLI[Docker CLI]\n        WORKSPACE_MOUNT[/workspace]\n    end\n\n    subgraph \"Action Containers\"\n        UBUNTU[ubuntu-latest]\n        NODE[actions/setup-node]\n        CUSTOM_ACTION[Custom Actions]\n    end\n\n    ACT --&gt; DOCKER_CLI\n    DOCKER_CLI -.-&gt;|Socket| DOCKER_DAEMON\n    DOCKER_DAEMON --&gt; UBUNTU\n    DOCKER_DAEMON --&gt; NODE\n    DOCKER_DAEMON --&gt; CUSTOM_ACTION\n    HOST_WORKSPACE --&gt; WORKSPACE_MOUNT</code></pre>"},{"location":"docker-images/act-runner/#usage-examples","title":"Usage Examples","text":""},{"location":"docker-images/act-runner/#basic-workflow-testing","title":"Basic Workflow Testing","text":"<pre><code># Run all workflows in the current repository\ndocker run --rm \\\n  -v $(pwd):/workspace \\\n  -v /var/run/docker.sock:/var/run/docker.sock \\\n  -w /workspace \\\n  webgrip/act-runner:latest\n</code></pre>"},{"location":"docker-images/act-runner/#specific-workflow-execution","title":"Specific Workflow Execution","text":"<pre><code># Run a specific workflow file\ndocker run --rm \\\n  -v $(pwd):/workspace \\\n  -v /var/run/docker.sock:/var/run/docker.sock \\\n  -w /workspace \\\n  webgrip/act-runner:latest \\\n  -W .github/workflows/ci.yml\n</code></pre>"},{"location":"docker-images/act-runner/#event-specific-testing","title":"Event-specific Testing","text":"<pre><code># Test push event\ndocker run --rm \\\n  -v $(pwd):/workspace \\\n  -v /var/run/docker.sock:/var/run/docker.sock \\\n  -w /workspace \\\n  webgrip/act-runner:latest \\\n  push\n\n# Test pull request event\ndocker run --rm \\\n  -v $(pwd):/workspace \\\n  -v /var/run/docker.sock:/var/run/docker.sock \\\n  -w /workspace \\\n  webgrip/act-runner:latest \\\n  pull_request\n</code></pre>"},{"location":"docker-images/act-runner/#job-specific-execution","title":"Job-specific Execution","text":"<pre><code># Run specific job\ndocker run --rm \\\n  -v $(pwd):/workspace \\\n  -v /var/run/docker.sock:/var/run/docker.sock \\\n  -w /workspace \\\n  webgrip/act-runner:latest \\\n  -j test\n\n# List available jobs\ndocker run --rm \\\n  -v $(pwd):/workspace \\\n  -v /var/run/docker.sock:/var/run/docker.sock \\\n  -w /workspace \\\n  webgrip/act-runner:latest \\\n  -l\n</code></pre>"},{"location":"docker-images/act-runner/#advanced-usage","title":"Advanced Usage","text":""},{"location":"docker-images/act-runner/#custom-platform-configuration","title":"Custom Platform Configuration","text":"<pre><code># Create custom platform mapping\ncat &gt; .actrc &lt;&lt; EOF\n-P ubuntu-latest=catthehacker/ubuntu:act-latest\n-P ubuntu-20.04=catthehacker/ubuntu:act-20.04\n-P ubuntu-18.04=catthehacker/ubuntu:act-18.04\nEOF\n\n# Use custom platforms\ndocker run --rm \\\n  -v $(pwd):/workspace \\\n  -v /var/run/docker.sock:/var/run/docker.sock \\\n  -w /workspace \\\n  webgrip/act-runner:latest \\\n  --platform-file .actrc\n</code></pre>"},{"location":"docker-images/act-runner/#environment-variables-and-secrets","title":"Environment Variables and Secrets","text":"<pre><code># Pass environment variables\ndocker run --rm \\\n  -v $(pwd):/workspace \\\n  -v /var/run/docker.sock:/var/run/docker.sock \\\n  -w /workspace \\\n  -e GITHUB_TOKEN=your_token \\\n  webgrip/act-runner:latest \\\n  --env GITHUB_TOKEN\n\n# Use secrets file\necho \"GITHUB_TOKEN=your_token\" &gt; .secrets\ndocker run --rm \\\n  -v $(pwd):/workspace \\\n  -v /var/run/docker.sock:/var/run/docker.sock \\\n  -w /workspace \\\n  webgrip/act-runner:latest \\\n  --secret-file .secrets\n</code></pre>"},{"location":"docker-images/act-runner/#interactive-debugging","title":"Interactive Debugging","text":"<pre><code># Run interactively for debugging\ndocker run -it --rm \\\n  -v $(pwd):/workspace \\\n  -v /var/run/docker.sock:/var/run/docker.sock \\\n  -w /workspace \\\n  --entrypoint=/bin/bash \\\n  webgrip/act-runner:latest\n\n# Inside container - manual ACT execution\nact --help\nact -l\nact -n  # Dry run\n</code></pre>"},{"location":"docker-images/act-runner/#development-workflow-integration","title":"Development Workflow Integration","text":""},{"location":"docker-images/act-runner/#pre-commit-hook","title":"Pre-commit Hook","text":"<pre><code>#!/bin/bash\n# .git/hooks/pre-commit\n\necho \"\ud83e\uddea Testing GitHub Actions locally with ACT...\"\n\ndocker run --rm \\\n  -v $(pwd):/workspace \\\n  -v /var/run/docker.sock:/var/run/docker.sock \\\n  -w /workspace \\\n  webgrip/act-runner:latest \\\n  -n --verbose\n\nif [ $? -ne 0 ]; then\n    echo \"\u274c GitHub Actions workflow validation failed!\"\n    exit 1\nfi\n\necho \"\u2705 GitHub Actions workflows validated successfully!\"\n</code></pre>"},{"location":"docker-images/act-runner/#makefile-integration","title":"Makefile Integration","text":"<pre><code># Makefile\n.PHONY: test-actions\ntest-actions:\n    @echo \"Testing GitHub Actions locally...\"\n    docker run --rm \\\n        -v $(PWD):/workspace \\\n        -v /var/run/docker.sock:/var/run/docker.sock \\\n        -w /workspace \\\n        webgrip/act-runner:latest \\\n        -n\n\n.PHONY: run-actions\nrun-actions:\n    @echo \"Running GitHub Actions locally...\"\n    docker run --rm \\\n        -v $(PWD):/workspace \\\n        -v /var/run/docker.sock:/var/run/docker.sock \\\n        -w /workspace \\\n        webgrip/act-runner:latest\n\n.PHONY: debug-actions\ndebug-actions:\n    @echo \"Debugging GitHub Actions...\"\n    docker run -it --rm \\\n        -v $(PWD):/workspace \\\n        -v /var/run/docker.sock:/var/run/docker.sock \\\n        -w /workspace \\\n        --entrypoint=/bin/bash \\\n        webgrip/act-runner:latest\n</code></pre>"},{"location":"docker-images/act-runner/#vs-code-integration","title":"VS Code Integration","text":"<pre><code>// .vscode/tasks.json\n{\n  \"version\": \"2.0.0\",\n  \"tasks\": [\n    {\n      \"label\": \"Test GitHub Actions\",\n      \"type\": \"shell\",\n      \"command\": \"docker\",\n      \"args\": [\n        \"run\", \"--rm\",\n        \"-v\", \"${workspaceFolder}:/workspace\",\n        \"-v\", \"/var/run/docker.sock:/var/run/docker.sock\",\n        \"-w\", \"/workspace\",\n        \"webgrip/act-runner:latest\",\n        \"-n\"\n      ],\n      \"group\": \"test\",\n      \"presentation\": {\n        \"echo\": true,\n        \"reveal\": \"always\",\n        \"focus\": false,\n        \"panel\": \"shared\"\n      }\n    }\n  ]\n}\n</code></pre>"},{"location":"docker-images/act-runner/#configuration","title":"Configuration","text":""},{"location":"docker-images/act-runner/#act-configuration-file","title":"ACT Configuration File","text":"<pre><code># .actrc or ~/.actrc\n# Platform mappings\n-P ubuntu-latest=catthehacker/ubuntu:act-latest\n-P ubuntu-20.04=catthehacker/ubuntu:act-20.04\n\n# Default secrets\n--secret-file .secrets\n\n# Default environment\n--env-file .env\n\n# Verbose output\n--verbose\n\n# Reuse containers for faster execution\n--reuse\n</code></pre>"},{"location":"docker-images/act-runner/#docker-compose-integration","title":"Docker Compose Integration","text":"<pre><code># docker-compose.yml\nversion: '3.8'\n\nservices:\n  act-runner:\n    image: webgrip/act-runner:latest\n    volumes:\n      - .:/workspace\n      - /var/run/docker.sock:/var/run/docker.sock\n    working_dir: /workspace\n    command: [\"--list\"]\n\n  act-test:\n    extends: act-runner\n    command: [\"--dryrun\"]\n\n  act-debug:\n    extends: act-runner\n    entrypoint: [\"/bin/bash\"]\n    stdin_open: true\n    tty: true\n</code></pre> <p>Usage: <pre><code># List workflows\ndocker-compose run act-runner\n\n# Test workflows (dry run)\ndocker-compose run act-test\n\n# Debug interactively\ndocker-compose run act-debug\n</code></pre></p>"},{"location":"docker-images/act-runner/#testing-specific-webgrip-workflows","title":"Testing Specific WebGrip Workflows","text":""},{"location":"docker-images/act-runner/#rust-ci-testing","title":"Rust CI Testing","text":"<pre><code># Test Rust CI workflow with custom image\ndocker run --rm \\\n  -v $(pwd):/workspace \\\n  -v /var/run/docker.sock:/var/run/docker.sock \\\n  -w /workspace \\\n  webgrip/act-runner:latest \\\n  -P ubuntu-latest=webgrip/rust-ci-runner:latest \\\n  -j test\n</code></pre>"},{"location":"docker-images/act-runner/#dockerfile-build-testing","title":"Dockerfile Build Testing","text":"<pre><code># Test Docker image building workflow\ndocker run --rm \\\n  -v $(pwd):/workspace \\\n  -v /var/run/docker.sock:/var/run/docker.sock \\\n  -w /workspace \\\n  webgrip/act-runner:latest \\\n  -W .github/workflows/on_dockerfile_change.yml \\\n  push\n</code></pre>"},{"location":"docker-images/act-runner/#e2e-testing-with-playwright","title":"E2E Testing with Playwright","text":"<pre><code># Test E2E workflow\ndocker run --rm \\\n  -v $(pwd):/workspace \\\n  -v /var/run/docker.sock:/var/run/docker.sock \\\n  -w /workspace \\\n  webgrip/act-runner:latest \\\n  -P ubuntu-latest=webgrip/playwright-runner:latest \\\n  -j e2e-test\n</code></pre>"},{"location":"docker-images/act-runner/#troubleshooting","title":"Troubleshooting","text":""},{"location":"docker-images/act-runner/#common-issues","title":"Common Issues","text":"<p>Docker socket permission denied <pre><code># Ensure Docker socket is accessible\nls -la /var/run/docker.sock\n\n# On some systems, add to docker group\nsudo usermod -aG docker $USER\n\n# Or run with elevated privileges\ndocker run --rm --privileged \\\n  -v $(pwd):/workspace \\\n  -v /var/run/docker.sock:/var/run/docker.sock \\\n  webgrip/act-runner:latest\n</code></pre></p> <p>ACT runner image not found <pre><code># Pull missing runner images\ndocker pull catthehacker/ubuntu:act-latest\ndocker pull catthehacker/ubuntu:act-20.04\n\n# Or use custom platform mapping\ndocker run --rm \\\n  -v $(pwd):/workspace \\\n  -v /var/run/docker.sock:/var/run/docker.sock \\\n  -w /workspace \\\n  webgrip/act-runner:latest \\\n  -P ubuntu-latest=ubuntu:20.04\n</code></pre></p> <p>Workflow file not found <pre><code># Check workflow file paths\nls -la .github/workflows/\n\n# Specify exact workflow file\ndocker run --rm \\\n  -v $(pwd):/workspace \\\n  -v /var/run/docker.sock:/var/run/docker.sock \\\n  -w /workspace \\\n  webgrip/act-runner:latest \\\n  -W .github/workflows/ci.yml\n</code></pre></p> <p>Action execution failures <pre><code># Debug with verbose output\ndocker run --rm \\\n  -v $(pwd):/workspace \\\n  -v /var/run/docker.sock:/var/run/docker.sock \\\n  -w /workspace \\\n  webgrip/act-runner:latest \\\n  --verbose --dryrun\n\n# Check action logs\ndocker logs &lt;action-container-id&gt;\n</code></pre></p>"},{"location":"docker-images/act-runner/#performance-issues","title":"Performance Issues","text":"<p>Slow container startup <pre><code># Reuse containers between runs\ndocker run --rm \\\n  -v $(pwd):/workspace \\\n  -v /var/run/docker.sock:/var/run/docker.sock \\\n  -w /workspace \\\n  webgrip/act-runner:latest \\\n  --reuse\n\n# Use smaller base images\n-P ubuntu-latest=alpine:latest\n</code></pre></p> <p>Network timeouts <pre><code># Increase timeouts\ndocker run --rm \\\n  -v $(pwd):/workspace \\\n  -v /var/run/docker.sock:/var/run/docker.sock \\\n  -w /workspace \\\n  webgrip/act-runner:latest \\\n  --container-timeout 10m\n</code></pre></p>"},{"location":"docker-images/act-runner/#security-considerations","title":"Security Considerations","text":""},{"location":"docker-images/act-runner/#docker-socket-security","title":"Docker Socket Security","text":"<p>Risk: Mounting Docker socket provides root access to host system.</p> <p>Mitigations: 1. Rootless Docker: Use rootless Docker daemon when possible 2. User namespaces: Configure user namespace remapping 3. Restricted environments: Only run on development machines, not production 4. Network isolation: Use isolated networks for ACT execution</p> <pre><code># Safer execution with network isolation\ndocker network create act-network\n\ndocker run --rm \\\n  --network act-network \\\n  -v $(pwd):/workspace \\\n  -v /var/run/docker.sock:/var/run/docker.sock \\\n  -w /workspace \\\n  webgrip/act-runner:latest\n</code></pre>"},{"location":"docker-images/act-runner/#secrets-management","title":"Secrets Management","text":"<pre><code># Use environment-specific secrets\necho \"DEV_API_KEY=dev_key_value\" &gt; .secrets.dev\necho \"STAGING_API_KEY=staging_key_value\" &gt; .secrets.staging\n\n# Never commit secrets files\necho \".secrets*\" &gt;&gt; .gitignore\n\n# Use secrets file\ndocker run --rm \\\n  -v $(pwd):/workspace \\\n  -v /var/run/docker.sock:/var/run/docker.sock \\\n  -w /workspace \\\n  webgrip/act-runner:latest \\\n  --secret-file .secrets.dev\n</code></pre>"},{"location":"docker-images/act-runner/#customization","title":"Customization","text":""},{"location":"docker-images/act-runner/#extended-act-runner","title":"Extended ACT Runner","text":"<pre><code># Dockerfile.custom\nFROM webgrip/act-runner:latest\n\n# Add additional tools\nRUN apk add --no-cache \\\n    jq \\\n    yq \\\n    python3 \\\n    py3-pip\n\n# Add GitHub CLI\nRUN apk add --no-cache --repository=https://dl-cdn.alpinelinux.org/alpine/edge/community \\\n    github-cli\n\n# Custom ACT configuration\nCOPY .actrc /root/.actrc\n</code></pre>"},{"location":"docker-images/act-runner/#project-specific-runner","title":"Project-specific Runner","text":"<pre><code>FROM webgrip/act-runner:latest\n\n# Add project-specific tools\nRUN apk add --no-cache nodejs npm\n\n# Pre-configure for project\nCOPY package.json package-lock.json ./\nRUN npm ci\n\n# Custom entry point\nCOPY act-entrypoint.sh /usr/local/bin/\nENTRYPOINT [\"/usr/local/bin/act-entrypoint.sh\"]\n</code></pre>"},{"location":"docker-images/act-runner/#related-documentation","title":"Related Documentation","text":"<ul> <li>Architecture Overview - Local development in our infrastructure</li> <li>GitHub Runner - Production GitHub Actions runner</li> <li>CI/CD Pipeline - Our GitHub Actions workflows</li> <li>Quick Start Guide - Getting started with local testing</li> </ul>"},{"location":"docker-images/act-runner/#maintenance","title":"Maintenance","text":""},{"location":"docker-images/act-runner/#update-schedule","title":"Update Schedule","text":"<ul> <li>ACT version: Updated quarterly or when new features needed</li> <li>Alpine version: Updated when new Alpine releases available</li> <li>Docker CLI: Updated with Alpine package updates</li> </ul>"},{"location":"docker-images/act-runner/#version-compatibility","title":"Version Compatibility","text":"Image Version ACT Alpine Docker CLI Status <code>latest</code> Latest 3.22.1 Latest Active <code>v0.2</code> v0.2.x 3.22.x 24.x Supported <code>v0.1</code> v0.1.x 3.21.x 23.x Deprecated <p>Assumption: Developers have Docker installed locally and are comfortable with command-line tools. ACT runner is primarily for development/testing, not production CI/CD. Validation needed: Confirm developer tooling standards and local development practices.</p> <p>Maintainer: WebGrip Ops Team Source: <code>ops/docker/act-runner/Dockerfile</code> Registry: webgrip/act-runner</p>"},{"location":"docker-images/github-runner/","title":"GitHub Actions Runner","text":"<p>A self-hosted GitHub Actions runner with enhanced tooling for PHP development and general CI/CD workflows.</p>"},{"location":"docker-images/github-runner/#purpose","title":"Purpose","text":"<p>This image provides a self-hosted GitHub Actions runner that extends the official Actions runner with additional tools commonly needed in WebGrip's development workflows:</p> <ul> <li>\u2705 Self-hosted execution for faster builds and custom environments</li> <li>\u2705 PHP 8.3 ecosystem with Composer for PHP projects</li> <li>\u2705 Standard CI tools (git, curl, jq) for automation workflows</li> <li>\u2705 Custom runner configuration tailored to WebGrip's needs</li> </ul>"},{"location":"docker-images/github-runner/#image-details","title":"Image Details","text":"Property Value Base Image <code>ghcr.io/actions/actions-runner:2.328.0</code> PHP Version 8.3 with common extensions Architecture AMD64 Registry <code>webgrip/github-runner</code> Dockerfile <code>ops/docker/github-runner/Dockerfile</code>"},{"location":"docker-images/github-runner/#installed-tools-software","title":"Installed Tools &amp; Software","text":""},{"location":"docker-images/github-runner/#core-runner-components","title":"Core Runner Components","text":"<ul> <li>GitHub Actions Runner: Version 2.328.0 from official Microsoft image</li> <li>Runner User: Non-root <code>runner</code> user for security</li> </ul>"},{"location":"docker-images/github-runner/#development-tools","title":"Development Tools","text":"Tool Version Purpose PHP 8.3 PHP development and application runtime Composer Latest PHP dependency management Git System default Version control curl System default HTTP client for API calls jq System default JSON processing bash System default Shell scripting rsync System default File synchronization unzip System default Archive extraction"},{"location":"docker-images/github-runner/#php-extensions","title":"PHP Extensions","text":"<p>Complete PHP 8.3 setup with commonly used extensions:</p> <ul> <li><code>php8.3-cli</code> - Command line interface</li> <li><code>php8.3-common</code> - Common functionality</li> <li><code>php8.3-bcmath</code> - Arbitrary precision mathematics</li> <li><code>php8.3-curl</code> - cURL support</li> <li><code>php8.3-gd</code> - Image processing</li> <li><code>php8.3-intl</code> - Internationalization</li> <li><code>php8.3-mbstring</code> - Multibyte string handling</li> <li><code>php8.3-mysql</code> - MySQL database support</li> <li><code>php8.3-soap</code> - SOAP protocol support</li> <li><code>php8.3-sockets</code> - Socket communication</li> <li><code>php8.3-xml</code> - XML processing</li> <li><code>php8.3-zip</code> - ZIP archive handling</li> </ul>"},{"location":"docker-images/github-runner/#architecture","title":"Architecture","text":""},{"location":"docker-images/github-runner/#runner-lifecycle","title":"Runner Lifecycle","text":"<pre><code>sequenceDiagram\n    participant GH as GitHub Repository\n    participant Runner as Self-hosted Runner\n    participant Container as Runner Container\n    participant Tools as PHP/Composer Tools\n\n    GH-&gt;&gt;Runner: Workflow triggered\n    Runner-&gt;&gt;Container: Start job container\n    Container-&gt;&gt;Tools: Execute PHP commands\n    Tools-&gt;&gt;Container: Process results\n    Container-&gt;&gt;Runner: Job completion\n    Runner-&gt;&gt;GH: Report results</code></pre>"},{"location":"docker-images/github-runner/#integration-points","title":"Integration Points","text":"<pre><code>flowchart TB\n    subgraph \"GitHub\"\n        REPO[Repository]\n        ACTIONS[GitHub Actions]\n    end\n\n    subgraph \"Self-hosted Infrastructure\"\n        RUNNER[GitHub Runner Container]\n        PHP[PHP 8.3 Runtime]\n        COMPOSER[Composer]\n        TOOLS[CI Tools]\n    end\n\n    subgraph \"External Services\"\n        PACKAGIST[Packagist.org]\n        DOCKER_HUB[Docker Hub]\n    end\n\n    REPO --&gt; ACTIONS\n    ACTIONS --&gt; RUNNER\n    RUNNER --&gt; PHP\n    RUNNER --&gt; COMPOSER\n    RUNNER --&gt; TOOLS\n    COMPOSER --&gt; PACKAGIST\n    RUNNER --&gt; DOCKER_HUB</code></pre>"},{"location":"docker-images/github-runner/#usage-examples","title":"Usage Examples","text":""},{"location":"docker-images/github-runner/#self-hosted-runner-setup","title":"Self-hosted Runner Setup","text":"<p>Note: This image requires proper runner registration with GitHub. It cannot be run directly without GitHub Actions runner token.</p> <pre><code># Example runner registration (requires GitHub token)\ndocker run -d --name github-runner \\\n  -e GITHUB_URL=https://github.com/webgrip/your-repo \\\n  -e GITHUB_TOKEN=your_runner_token \\\n  -v /var/run/docker.sock:/var/run/docker.sock \\\n  webgrip/github-runner:latest\n</code></pre>"},{"location":"docker-images/github-runner/#workflow-configuration","title":"Workflow Configuration","text":"<pre><code># .github/workflows/php-ci.yml\nname: PHP CI\non: [push, pull_request]\n\njobs:\n  test:\n    runs-on: [self-hosted, webgrip-runner]\n    steps:\n      - uses: actions/checkout@v4\n\n      - name: Validate Composer\n        run: composer validate --strict\n\n      - name: Install dependencies\n        run: composer install --prefer-dist --no-progress\n\n      - name: Run tests\n        run: |\n          vendor/bin/phpunit\n          vendor/bin/phpstan analyse\n\n      - name: Check code style\n        run: vendor/bin/php-cs-fixer fix --dry-run --diff\n</code></pre>"},{"location":"docker-images/github-runner/#php-project-examples","title":"PHP Project Examples","text":"<pre><code># Inside the runner container - PHP development workflow\ncomposer create-project laravel/laravel my-app\ncd my-app\n\n# Install dependencies\ncomposer install\n\n# Run PHP-specific tools\nphp artisan migrate\nphp artisan test\n\n# Quality assurance\ncomposer run-script phpstan\ncomposer run-script php-cs-fixer\n</code></pre>"},{"location":"docker-images/github-runner/#configuration","title":"Configuration","text":""},{"location":"docker-images/github-runner/#environment-variables","title":"Environment Variables","text":"<p>During runner registration:</p> Variable Required Purpose <code>GITHUB_URL</code> Yes Repository or organization URL <code>GITHUB_TOKEN</code> Yes Runner registration token <code>RUNNER_NAME</code> No Custom runner name (default: hostname) <code>RUNNER_LABELS</code> No Additional runner labels"},{"location":"docker-images/github-runner/#php-configuration","title":"PHP Configuration","text":"<p>The image uses system default PHP configuration. For custom settings:</p> <pre><code># Custom php.ini settings via environment\ndocker run -e \"PHP_INI_SCAN_DIR=/usr/local/etc/php/conf.d\" \\\n  -v $(pwd)/php.ini:/usr/local/etc/php/conf.d/custom.ini \\\n  webgrip/github-runner:latest\n</code></pre>"},{"location":"docker-images/github-runner/#security-considerations","title":"Security Considerations","text":""},{"location":"docker-images/github-runner/#runner-security","title":"Runner Security","text":"<ol> <li>Non-root execution: Runner operates as <code>runner</code> user</li> <li>Isolated environments: Each job runs in isolated containers</li> <li>Token management: Registration tokens should be short-lived</li> <li>Network isolation: Consider firewall rules for runner hosts</li> </ol>"},{"location":"docker-images/github-runner/#php-security","title":"PHP Security","text":"<ol> <li>Updated packages: PHP 8.3 with latest security patches</li> <li>Minimal extensions: Only necessary PHP extensions installed</li> <li>Composer security: Always use <code>composer audit</code> in workflows</li> </ol>"},{"location":"docker-images/github-runner/#best-practices","title":"Best Practices","text":"<pre><code># Secure workflow example\njobs:\n  secure-php:\n    runs-on: [self-hosted, webgrip-runner]\n    steps:\n      - uses: actions/checkout@v4\n\n      # Security checks first\n      - name: Audit dependencies\n        run: composer audit\n\n      - name: Check for vulnerabilities\n        run: |\n          composer require --dev roave/security-advisories\n          composer install\n\n      # Then proceed with normal workflow\n      - name: Run tests\n        run: vendor/bin/phpunit\n</code></pre>"},{"location":"docker-images/github-runner/#performance-optimization","title":"Performance Optimization","text":""},{"location":"docker-images/github-runner/#runner-performance","title":"Runner Performance","text":"<ol> <li> <p>Persistent cache: Use runner-local caches for Composer    <pre><code>- name: Cache Composer dependencies\n  uses: actions/cache@v3\n  with:\n    path: ~/.composer/cache\n    key: composer-${{ hashFiles('**/composer.lock') }}\n</code></pre></p> </li> <li> <p>Parallel execution: Configure multiple runner instances    <pre><code># Run multiple runner containers\nfor i in {1..3}; do\n  docker run -d --name \"github-runner-$i\" \\\n    -e RUNNER_NAME=\"webgrip-runner-$i\" \\\n    webgrip/github-runner:latest\ndone\n</code></pre></p> </li> </ol>"},{"location":"docker-images/github-runner/#php-performance","title":"PHP Performance","text":"<ol> <li>OPcache configuration: Enable OPcache for production-like testing</li> <li>Memory limits: Adjust PHP memory limits for large applications</li> <li>Composer optimization: Use <code>--optimize-autoloader</code> flag</li> </ol>"},{"location":"docker-images/github-runner/#troubleshooting","title":"Troubleshooting","text":""},{"location":"docker-images/github-runner/#common-issues","title":"Common Issues","text":"<p>Runner registration fails <pre><code># Check runner logs\ndocker logs github-runner\n\n# Verify token and URL\necho \"URL: $GITHUB_URL\"\necho \"Token: ${GITHUB_TOKEN:0:4}...\" # Only show first 4 chars\n</code></pre></p> <p>PHP memory errors <pre><code># Increase PHP memory limit\necho \"memory_limit = 512M\" &gt; custom-php.ini\ndocker run -v $(pwd)/custom-php.ini:/etc/php/8.3/cli/conf.d/99-custom.ini \\\n  webgrip/github-runner:latest php -m\n</code></pre></p> <p>Composer timeouts <pre><code># Configure Composer timeout\ncomposer config --global process-timeout 2000\n</code></pre></p> <p>Permission issues <pre><code># Check runner user permissions\ndocker exec github-runner id runner\ndocker exec github-runner ls -la /home/runner\n</code></pre></p>"},{"location":"docker-images/github-runner/#debugging","title":"Debugging","text":"<pre><code># Interactive debugging session\ndocker run -it --entrypoint=/bin/bash webgrip/github-runner:latest\n\n# Inside container - verify tools\nphp --version\ncomposer --version\nwhich git curl jq\n</code></pre>"},{"location":"docker-images/github-runner/#customization","title":"Customization","text":""},{"location":"docker-images/github-runner/#adding-additional-tools","title":"Adding Additional Tools","text":"<pre><code># Dockerfile.custom\nFROM webgrip/github-runner:latest\n\nUSER root\n\n# Add Node.js for frontend builds\nRUN curl -fsSL https://deb.nodesource.com/setup_20.x | bash - &amp;&amp; \\\n    apt-get install -y nodejs\n\n# Add database clients\nRUN apt-get install -y postgresql-client mysql-client\n\nUSER runner\n</code></pre>"},{"location":"docker-images/github-runner/#custom-runner-configuration","title":"Custom Runner Configuration","text":"<pre><code># Environment file for runner configuration\ncat &gt; runner.env &lt;&lt; EOF\nGITHUB_URL=https://github.com/webgrip/infrastructure\nRUNNER_NAME=webgrip-infra-runner\nRUNNER_LABELS=php,infra,webgrip\nRUNNER_WORKDIR=/tmp/runner-work\nEOF\n\ndocker run --env-file runner.env webgrip/github-runner:latest\n</code></pre>"},{"location":"docker-images/github-runner/#maintenance","title":"Maintenance","text":""},{"location":"docker-images/github-runner/#update-schedule","title":"Update Schedule","text":"<ul> <li>Runner version: Updated monthly following GitHub Actions runner releases  </li> <li>PHP version: Updated when new PHP 8.3.x releases available</li> <li>Security patches: Applied immediately when available</li> </ul>"},{"location":"docker-images/github-runner/#monitoring","title":"Monitoring","text":"<pre><code># Check runner health\ndocker exec github-runner ps aux | grep Runner.Listener\ndocker exec github-runner systemctl status actions.runner.service\n</code></pre>"},{"location":"docker-images/github-runner/#backup-recovery","title":"Backup &amp; Recovery","text":"<ul> <li>Runner configuration: Stored in GitHub organization settings</li> <li>Custom configurations: Version controlled in this repository</li> <li>Data persistence: Use volumes for persistent runner data</li> </ul>"},{"location":"docker-images/github-runner/#integration-with-webgrip-infrastructure","title":"Integration with WebGrip Infrastructure","text":""},{"location":"docker-images/github-runner/#related-services","title":"Related Services","text":"<ul> <li>Rust CI Runner: For Rust projects that also need PHP components</li> <li>Playwright Runner: Shares PHP tooling for full-stack testing</li> <li>Helm Deploy: Used by this runner for Kubernetes deployments</li> </ul>"},{"location":"docker-images/github-runner/#workflow-integration","title":"Workflow Integration","text":"<pre><code># Multi-stage workflow using multiple WebGrip images\njobs:\n  php-build:\n    runs-on: [self-hosted, webgrip-runner]\n    steps:\n      - name: Build PHP application\n        run: composer install --no-dev --optimize-autoloader\n\n  rust-build:\n    runs-on: ubuntu-latest\n    container: webgrip/rust-ci-runner:latest\n    steps:\n      - name: Build Rust components\n        run: cargo build --release\n\n  deploy:\n    needs: [php-build, rust-build]\n    runs-on: ubuntu-latest\n    container: webgrip/helm-deploy:latest\n    steps:\n      - name: Deploy to Kubernetes\n        run: helm upgrade --install myapp ./charts/myapp\n</code></pre>"},{"location":"docker-images/github-runner/#related-documentation","title":"Related Documentation","text":"<ul> <li>Architecture Overview - How runners fit into our CI/CD</li> <li>CI/CD Pipeline - Automated runner image building</li> <li>Playwright Runner - Complementary testing image with PHP</li> <li>Operations Guide - Contributing to runner improvements</li> </ul> <p>Assumption: Self-hosted runners are deployed in secure, managed environments with proper network isolation and monitoring. Validation needed: Confirm runner deployment strategy and security requirements with ops team.</p> <p>Maintainer: WebGrip Ops Team Source: <code>ops/docker/github-runner/Dockerfile</code> Registry: webgrip/github-runner</p>"},{"location":"docker-images/helm-deploy/","title":"Helm Deploy","text":"<p>A lightweight, Alpine-based container optimized for Kubernetes deployments using Helm, kubectl, and additional DevOps tooling.</p>"},{"location":"docker-images/helm-deploy/#purpose","title":"Purpose","text":"<p>The Helm Deploy image serves as a specialized deployment environment for Kubernetes infrastructure, providing:</p> <ul> <li>\u2705 Kubernetes deployment via Helm charts and kubectl</li> <li>\u2705 Multi-cloud support with DigitalOcean CLI integration</li> <li>\u2705 Secrets management using SOPS for encrypted configurations</li> <li>\u2705 YAML processing capabilities for configuration manipulation</li> <li>\u2705 Minimal footprint based on Alpine Linux for fast execution</li> </ul>"},{"location":"docker-images/helm-deploy/#image-details","title":"Image Details","text":"Property Value Base Image <code>alpine:3.21.3</code> Size ~150MB (minimal Alpine + tools) Architecture AMD64 Registry <code>webgrip/helm-deploy</code> Dockerfile <code>ops/docker/helm-deploy/Dockerfile</code>"},{"location":"docker-images/helm-deploy/#installed-tools-versions","title":"Installed Tools &amp; Versions","text":""},{"location":"docker-images/helm-deploy/#core-deployment-tools","title":"Core Deployment Tools","text":"Tool Version Purpose kubectl v1.32.2 Kubernetes command-line tool Helm 3.17.1 Kubernetes package manager doctl 1.123.0 DigitalOcean CLI SOPS 3.7.3 Secrets encryption/decryption yq 4.45.1 YAML processing tool"},{"location":"docker-images/helm-deploy/#system-utilities","title":"System Utilities","text":"<ul> <li>git - Version control for chart repositories</li> <li>curl/wget - HTTP clients for API interactions</li> <li>bash - Shell scripting environment</li> <li>tar - Archive handling</li> <li>gnupg - GPG encryption for SOPS</li> <li>openssl - SSL/TLS utilities</li> <li>ca-certificates - Certificate authority bundle</li> </ul>"},{"location":"docker-images/helm-deploy/#architecture","title":"Architecture","text":""},{"location":"docker-images/helm-deploy/#deployment-workflow","title":"Deployment Workflow","text":"<pre><code>flowchart TD\n    START[Deployment Start] --&gt; FETCH[Fetch Helm Charts]\n    FETCH --&gt; DECRYPT[Decrypt Secrets with SOPS]\n    DECRYPT --&gt; TEMPLATE[Template with yq/Helm]\n    TEMPLATE --&gt; VALIDATE[Validate with kubectl]\n    VALIDATE --&gt; DEPLOY[Deploy with Helm]\n    DEPLOY --&gt; VERIFY[Verify Deployment]\n    VERIFY --&gt; END[Deployment Complete]\n\n    subgraph \"Tools Used\"\n        GIT[git] --&gt; FETCH\n        SOPS[sops] --&gt; DECRYPT\n        YQ[yq] --&gt; TEMPLATE\n        HELM[helm] --&gt; TEMPLATE\n        KUBECTL[kubectl] --&gt; VALIDATE\n        HELM --&gt; DEPLOY\n        KUBECTL --&gt; VERIFY\n    end</code></pre>"},{"location":"docker-images/helm-deploy/#multi-cloud-architecture","title":"Multi-Cloud Architecture","text":"<pre><code>flowchart LR\n    subgraph \"Deployment Container\"\n        HELM_DEPLOY[Helm Deploy Image]\n        KUBECTL[kubectl]\n        HELM[helm]\n        DOCTL[doctl]\n        SOPS[sops]\n    end\n\n    subgraph \"Target Environments\"\n        DO_K8S[DigitalOcean Kubernetes]\n        OTHER_K8S[Other K8s Clusters]\n    end\n\n    subgraph \"Configuration Sources\"\n        CHARTS[Helm Charts Repository]\n        SECRETS[Encrypted Secrets]\n        CONFIGS[Configuration Files]\n    end\n\n    HELM_DEPLOY --&gt; DO_K8S\n    HELM_DEPLOY --&gt; OTHER_K8S\n    CHARTS --&gt; HELM_DEPLOY\n    SECRETS --&gt; HELM_DEPLOY\n    CONFIGS --&gt; HELM_DEPLOY</code></pre>"},{"location":"docker-images/helm-deploy/#usage-examples","title":"Usage Examples","text":""},{"location":"docker-images/helm-deploy/#basic-helm-deployment","title":"Basic Helm Deployment","text":"<pre><code># Deploy a Helm chart to Kubernetes\ndocker run --rm \\\n  -v $(pwd):/workspace \\\n  -v ~/.kube:/root/.kube \\\n  -w /workspace \\\n  webgrip/helm-deploy:latest \\\n  helm upgrade --install myapp ./charts/myapp\n</code></pre>"},{"location":"docker-images/helm-deploy/#digitalocean-kubernetes-deployment","title":"DigitalOcean Kubernetes Deployment","text":"<pre><code># Deploy to DigitalOcean managed Kubernetes\ndocker run --rm \\\n  -v $(pwd):/workspace \\\n  -e DIGITALOCEAN_ACCESS_TOKEN=$DO_TOKEN \\\n  -w /workspace \\\n  webgrip/helm-deploy:latest \\\n  bash -c \"\n    doctl kubernetes cluster kubeconfig save my-cluster\n    helm upgrade --install myapp ./charts/myapp --namespace production\n  \"\n</code></pre>"},{"location":"docker-images/helm-deploy/#secrets-management-with-sops","title":"Secrets Management with SOPS","text":"<pre><code># Decrypt secrets and deploy\ndocker run --rm \\\n  -v $(pwd):/workspace \\\n  -v ~/.kube:/root/.kube \\\n  -v ~/.gnupg:/root/.gnupg \\\n  -w /workspace \\\n  webgrip/helm-deploy:latest \\\n  bash -c \"\n    # Decrypt secrets\n    sops -d secrets/production.enc.yaml &gt; secrets/production.yaml\n\n    # Deploy with decrypted secrets\n    helm upgrade --install myapp ./charts/myapp \\\n      --values secrets/production.yaml \\\n      --namespace production\n  \"\n</code></pre>"},{"location":"docker-images/helm-deploy/#configuration-processing-with-yq","title":"Configuration Processing with yq","text":"<pre><code># Process YAML configurations before deployment\ndocker run --rm \\\n  -v $(pwd):/workspace \\\n  -w /workspace \\\n  webgrip/helm-deploy:latest \\\n  bash -c \"\n    # Modify configuration using yq\n    yq eval '.image.tag = \\\"v1.2.3\\\"' values.yaml &gt; values-updated.yaml\n\n    # Deploy with updated values\n    helm upgrade --install myapp ./charts/myapp \\\n      --values values-updated.yaml\n  \"\n</code></pre>"},{"location":"docker-images/helm-deploy/#cicd-integration","title":"CI/CD Integration","text":""},{"location":"docker-images/helm-deploy/#github-actions-workflow","title":"GitHub Actions Workflow","text":"<pre><code># .github/workflows/deploy.yml\nname: Deploy to Kubernetes\non:\n  push:\n    branches: [main]\n\njobs:\n  deploy:\n    runs-on: ubuntu-latest\n    container: webgrip/helm-deploy:latest\n    steps:\n      - uses: actions/checkout@v4\n\n      - name: Setup DigitalOcean CLI\n        env:\n          DIGITALOCEAN_ACCESS_TOKEN: ${{ secrets.DO_TOKEN }}\n        run: |\n          doctl kubernetes cluster kubeconfig save ${{ vars.CLUSTER_NAME }}\n\n      - name: Decrypt secrets\n        env:\n          SOPS_AGE_KEY: ${{ secrets.SOPS_AGE_KEY }}\n        run: |\n          echo \"$SOPS_AGE_KEY\" &gt; /tmp/age-key\n          export SOPS_AGE_KEY_FILE=/tmp/age-key\n          sops -d secrets/production.enc.yaml &gt; secrets/production.yaml\n\n      - name: Deploy application\n        run: |\n          helm dependency update ./charts/myapp\n          helm upgrade --install myapp ./charts/myapp \\\n            --namespace production \\\n            --create-namespace \\\n            --values secrets/production.yaml \\\n            --set image.tag=${{ github.sha }}\n\n      - name: Verify deployment\n        run: |\n          kubectl rollout status deployment/myapp -n production\n          kubectl get pods -n production\n</code></pre>"},{"location":"docker-images/helm-deploy/#multi-environment-deployment","title":"Multi-Environment Deployment","text":"<pre><code># Deploy to multiple environments\nstrategy:\n  matrix:\n    environment: [staging, production]\n\nsteps:\n  - name: Deploy to ${{ matrix.environment }}\n    run: |\n      # Setup environment-specific configuration\n      export NAMESPACE=${{ matrix.environment }}\n      export VALUES_FILE=values-${{ matrix.environment }}.yaml\n\n      # Decrypt environment-specific secrets\n      sops -d secrets/${{ matrix.environment }}.enc.yaml &gt; secrets/${{ matrix.environment }}.yaml\n\n      # Deploy with environment-specific settings\n      helm upgrade --install myapp-${{ matrix.environment }} ./charts/myapp \\\n        --namespace $NAMESPACE \\\n        --create-namespace \\\n        --values $VALUES_FILE \\\n        --values secrets/${{ matrix.environment }}.yaml\n</code></pre>"},{"location":"docker-images/helm-deploy/#configuration","title":"Configuration","text":""},{"location":"docker-images/helm-deploy/#environment-variables","title":"Environment Variables","text":"Variable Purpose Example <code>DIGITALOCEAN_ACCESS_TOKEN</code> DigitalOcean API authentication <code>dop_v1_xxx...</code> <code>KUBECONFIG</code> Kubernetes configuration file path <code>/root/.kube/config</code> <code>SOPS_AGE_KEY_FILE</code> Age key file for SOPS decryption <code>/tmp/age-key</code> <code>SOPS_AGE_KEY</code> Age key content for SOPS <code>AGE-SECRET-KEY-1XXX...</code> <code>HELM_CACHE_HOME</code> Helm cache directory <code>/tmp/.helm</code>"},{"location":"docker-images/helm-deploy/#volume-mounts","title":"Volume Mounts","text":"<pre><code># Essential volume mounts for deployment\ndocker run --rm \\\n  -v $(pwd):/workspace \\                    # Project files\n  -v ~/.kube:/root/.kube \\                  # Kubernetes config\n  -v ~/.gnupg:/root/.gnupg \\                # GPG keys for SOPS\n  -v helm-cache:/tmp/.helm \\                # Helm cache\n  webgrip/helm-deploy:latest\n</code></pre>"},{"location":"docker-images/helm-deploy/#advanced-usage","title":"Advanced Usage","text":""},{"location":"docker-images/helm-deploy/#custom-helm-chart-development","title":"Custom Helm Chart Development","text":"<pre><code># Create and test new Helm charts\ndocker run -it --rm \\\n  -v $(pwd):/workspace \\\n  -w /workspace \\\n  webgrip/helm-deploy:latest \\\n  bash -c \"\n    # Create new chart\n    helm create myapp\n\n    # Validate chart\n    helm lint myapp/\n\n    # Test template rendering\n    helm template myapp myapp/ --values myapp/values.yaml\n\n    # Package chart\n    helm package myapp/\n  \"\n</code></pre>"},{"location":"docker-images/helm-deploy/#blue-green-deployments","title":"Blue-Green Deployments","text":"<pre><code># Blue-green deployment strategy\ndocker run --rm \\\n  -v $(pwd):/workspace \\\n  -v ~/.kube:/root/.kube \\\n  -w /workspace \\\n  webgrip/helm-deploy:latest \\\n  bash -c \"\n    # Deploy green version\n    helm upgrade --install myapp-green ./charts/myapp \\\n      --set color=green \\\n      --set image.tag=$NEW_VERSION \\\n      --namespace production\n\n    # Wait for green to be ready\n    kubectl rollout status deployment/myapp-green -n production\n\n    # Switch traffic (update service selector)\n    yq eval '.spec.selector.color = \\\"green\\\"' service.yaml | kubectl apply -f -\n\n    # Remove blue version after verification\n    helm uninstall myapp-blue --namespace production\n  \"\n</code></pre>"},{"location":"docker-images/helm-deploy/#disaster-recovery","title":"Disaster Recovery","text":"<pre><code># Backup current deployment\ndocker run --rm \\\n  -v $(pwd):/workspace \\\n  -v ~/.kube:/root/.kube \\\n  -w /workspace \\\n  webgrip/helm-deploy:latest \\\n  bash -c \"\n    # Get current values\n    helm get values myapp -n production &gt; backup/current-values.yaml\n\n    # Get current manifests  \n    helm get manifest myapp -n production &gt; backup/current-manifest.yaml\n\n    # Backup persistent volumes\n    kubectl get pv -o yaml &gt; backup/persistent-volumes.yaml\n  \"\n</code></pre>"},{"location":"docker-images/helm-deploy/#security-best-practices","title":"Security Best Practices","text":""},{"location":"docker-images/helm-deploy/#secrets-management","title":"Secrets Management","text":"<ol> <li> <p>Use SOPS for encryption:    <pre><code># Encrypt secrets file\nsops -e secrets/production.yaml &gt; secrets/production.enc.yaml\n\n# Never commit unencrypted secrets\necho \"secrets/*.yaml\" &gt;&gt; .gitignore\n</code></pre></p> </li> <li> <p>Age keys for SOPS:    <pre><code># Generate age key pair\nage-keygen -o age-key.txt\n\n# Use in CI/CD\nexport SOPS_AGE_KEY_FILE=/tmp/age-key\n</code></pre></p> </li> <li> <p>Kubernetes RBAC:    <pre><code># Limit deployment permissions\napiVersion: rbac.authorization.k8s.io/v1\nkind: Role\nmetadata:\n  name: helm-deployer\nrules:\n- apiGroups: [\"apps\", \"\"]\n  resources: [\"deployments\", \"services\", \"configmaps\"]\n  verbs: [\"get\", \"list\", \"create\", \"update\", \"patch\"]\n</code></pre></p> </li> </ol>"},{"location":"docker-images/helm-deploy/#network-security","title":"Network Security","text":"<pre><code># Use private registries\ndocker run --rm \\\n  -v ~/.docker:/root/.docker \\\n  webgrip/helm-deploy:latest \\\n  helm upgrade --install myapp ./charts/myapp \\\n    --set image.repository=private-registry.com/myapp\n</code></pre>"},{"location":"docker-images/helm-deploy/#troubleshooting","title":"Troubleshooting","text":""},{"location":"docker-images/helm-deploy/#common-issues","title":"Common Issues","text":"<p>\"Unable to connect to the server\" <pre><code># Verify Kubernetes configuration\ndocker run --rm -v ~/.kube:/root/.kube webgrip/helm-deploy:latest kubectl cluster-info\n\n# Check kubeconfig\nkubectl config view\nkubectl config current-context\n</code></pre></p> <p>\"Helm chart not found\" <pre><code># Update Helm repositories\nhelm repo update\n\n# Search for charts\nhelm search repo myapp\n\n# Verify chart path\nls -la charts/myapp/Chart.yaml\n</code></pre></p> <p>SOPS decryption failures <pre><code># Verify age key\necho \"$SOPS_AGE_KEY\" | age-keygen -y\n\n# Test decryption\nsops -d secrets/production.enc.yaml\n</code></pre></p> <p>DigitalOcean authentication issues <pre><code># Verify token\ndoctl auth list\ndoctl account get\n\n# Test cluster access\ndoctl kubernetes cluster list\n</code></pre></p>"},{"location":"docker-images/helm-deploy/#performance-issues","title":"Performance Issues","text":"<p>Slow Helm operations <pre><code># Use Helm cache\nexport HELM_CACHE_HOME=/tmp/.helm\nhelm repo update\n\n# Parallel operations\nhelm upgrade --install app1 ./charts/app1 &amp;\nhelm upgrade --install app2 ./charts/app2 &amp;\nwait\n</code></pre></p> <p>Large chart deployments <pre><code># Increase timeout\nhelm upgrade --install myapp ./charts/myapp --timeout 10m\n\n# Use atomic deployments\nhelm upgrade --install myapp ./charts/myapp --atomic\n</code></pre></p>"},{"location":"docker-images/helm-deploy/#customization","title":"Customization","text":""},{"location":"docker-images/helm-deploy/#adding-cloud-providers","title":"Adding Cloud Providers","text":"<pre><code># Dockerfile.custom\nFROM webgrip/helm-deploy:latest\n\n# Add AWS CLI\nRUN apk add --no-cache python3 py3-pip &amp;&amp; \\\n    pip3 install awscli\n\n# Add Azure CLI\nRUN apk add --no-cache py3-pip &amp;&amp; \\\n    pip3 install azure-cli\n\n# Add Google Cloud SDK\nRUN wget https://dl.google.com/dl/cloudsdk/channels/rapid/google-cloud-sdk.tar.gz &amp;&amp; \\\n    tar -xzf google-cloud-sdk.tar.gz &amp;&amp; \\\n    ./google-cloud-sdk/install.sh --quiet\n</code></pre>"},{"location":"docker-images/helm-deploy/#custom-helm-plugins","title":"Custom Helm Plugins","text":"<pre><code># Install Helm plugins in derived image\nFROM webgrip/helm-deploy:latest\n\nRUN helm plugin install https://github.com/databus23/helm-diff\nRUN helm plugin install https://github.com/jkroepke/helm-secrets\n</code></pre>"},{"location":"docker-images/helm-deploy/#related-documentation","title":"Related Documentation","text":"<ul> <li>Architecture Overview - Kubernetes deployment architecture</li> <li>CI/CD Pipeline - Automated image building</li> <li>GitHub Runner - Self-hosted runner that uses this image</li> <li>Operations Guide - Contributing improvements</li> </ul>"},{"location":"docker-images/helm-deploy/#maintenance","title":"Maintenance","text":""},{"location":"docker-images/helm-deploy/#update-schedule","title":"Update Schedule","text":"<ul> <li>Tool versions: Updated quarterly or when security issues discovered</li> <li>Alpine base: Updated when new Alpine releases available</li> <li>Kubernetes compatibility: Tested against latest K8s versions</li> </ul>"},{"location":"docker-images/helm-deploy/#version-matrix","title":"Version Matrix","text":"Image Version kubectl Helm Alpine Status <code>latest</code> v1.32.2 3.17.1 3.21.3 Active <code>v1.32</code> v1.32.x 3.17.x 3.21.x Supported <code>v1.31</code> v1.31.x 3.16.x 3.20.x Deprecated <p>Assumption: Deployments primarily target DigitalOcean Kubernetes clusters. Support for other cloud providers (AWS EKS, GCP GKE, Azure AKS) may require additional CLI tools. Validation needed: Confirm cloud provider requirements with infrastructure team.</p> <p>Maintainer: WebGrip Ops Team Source: <code>ops/docker/helm-deploy/Dockerfile</code> Registry: webgrip/helm-deploy</p>"},{"location":"docker-images/playwright-runner/","title":"Playwright Runner","text":"<p>A comprehensive end-to-end testing environment built on Microsoft's official Playwright image, enhanced with PHP tooling for full-stack web application testing.</p>"},{"location":"docker-images/playwright-runner/#purpose","title":"Purpose","text":"<p>The Playwright Runner provides a complete browser testing environment that supports:</p> <ul> <li>\u2705 Multi-browser testing with Chromium, Firefox, and WebKit</li> <li>\u2705 PHP application testing with full PHP 8.3 ecosystem</li> <li>\u2705 Modern web testing with Playwright's powerful automation capabilities</li> <li>\u2705 CI/CD integration optimized for automated testing workflows</li> <li>\u2705 Security hardening with custom seccomp profile</li> </ul>"},{"location":"docker-images/playwright-runner/#image-details","title":"Image Details","text":"Property Value Base Image <code>mcr.microsoft.com/playwright:v1.51.0-noble</code> Node.js Version Latest LTS (from base image) PHP Version 8.3 with common extensions Browsers Chromium, Firefox, WebKit (pre-installed) Registry <code>webgrip/playwright-runner</code> Dockerfile <code>ops/docker/playwright-runner/Dockerfile</code>"},{"location":"docker-images/playwright-runner/#installed-tools-software","title":"Installed Tools &amp; Software","text":""},{"location":"docker-images/playwright-runner/#browser-testing-stack","title":"Browser Testing Stack","text":"Tool Version Purpose Playwright v1.51.0 Browser automation framework Chromium Latest stable Chrome-based testing Firefox Latest stable Firefox-based testing WebKit Latest stable Safari-based testing Node.js LTS JavaScript runtime for Playwright"},{"location":"docker-images/playwright-runner/#php-development-stack","title":"PHP Development Stack","text":"<p>Complete PHP 8.3 setup matching the GitHub Runner:</p> Tool Version Purpose PHP 8.3 Server-side application runtime Composer Latest PHP dependency management Common Extensions 8.3.x bcmath, curl, gd, mysql, xml, zip, etc."},{"location":"docker-images/playwright-runner/#system-utilities","title":"System Utilities","text":"<ul> <li>curl - HTTP client for API testing</li> <li>bash - Shell scripting environment  </li> <li>jq - JSON processing for test data</li> <li>git - Version control integration</li> <li>yq - YAML processing for configuration</li> <li>rsync - File synchronization</li> <li>unzip - Archive handling</li> </ul>"},{"location":"docker-images/playwright-runner/#architecture","title":"Architecture","text":""},{"location":"docker-images/playwright-runner/#testing-workflow","title":"Testing Workflow","text":"<pre><code>flowchart TD\n    START[Test Execution Start] --&gt; SETUP[Environment Setup]\n    SETUP --&gt; PHP_SETUP[PHP Application Setup]\n    PHP_SETUP --&gt; BROWSER_LAUNCH[Launch Browsers]\n    BROWSER_LAUNCH --&gt; TEST_RUN[Execute Playwright Tests]\n    TEST_RUN --&gt; PHP_API[Test PHP API Endpoints]\n    PHP_API --&gt; E2E[End-to-End Scenarios]\n    E2E --&gt; REPORT[Generate Test Reports]\n    REPORT --&gt; CLEANUP[Cleanup &amp; Teardown]\n    CLEANUP --&gt; END[Test Completion]\n\n    subgraph \"Runtime Environment\"\n        PHP[PHP 8.3 Runtime]\n        BROWSERS[Chromium + Firefox + WebKit]\n        PLAYWRIGHT[Playwright Framework]\n        COMPOSER[Composer Dependencies]\n    end\n\n    PHP_SETUP --&gt; PHP\n    BROWSER_LAUNCH --&gt; BROWSERS\n    TEST_RUN --&gt; PLAYWRIGHT\n    PHP_SETUP --&gt; COMPOSER</code></pre>"},{"location":"docker-images/playwright-runner/#security-architecture","title":"Security Architecture","text":"<pre><code>flowchart TB\n    subgraph \"Container Security\"\n        SECCOMP[Custom Seccomp Profile]\n        ENTRYPOINT[Custom Entry Point]\n        USER_NS[User Namespaces]\n    end\n\n    subgraph \"Browser Security\"\n        SANDBOX[Browser Sandboxing]\n        ISOLATION[Process Isolation]\n        HEADLESS[Headless Mode]\n    end\n\n    subgraph \"Application Security\"\n        PHP_SECURITY[PHP Security Settings]\n        COMPOSER_AUDIT[Composer Audit]\n        TEST_ISOLATION[Test Data Isolation]\n    end\n\n    SECCOMP --&gt; SANDBOX\n    USER_NS --&gt; ISOLATION\n    ENTRYPOINT --&gt; PHP_SECURITY</code></pre>"},{"location":"docker-images/playwright-runner/#usage-examples","title":"Usage Examples","text":""},{"location":"docker-images/playwright-runner/#basic-playwright-testing","title":"Basic Playwright Testing","text":"<pre><code># Run Playwright tests in your project\ndocker run --rm \\\n  -v $(pwd):/app \\\n  -w /app \\\n  webgrip/playwright-runner:latest \\\n  npx playwright test\n</code></pre>"},{"location":"docker-images/playwright-runner/#php-playwright-integration","title":"PHP + Playwright Integration","text":"<pre><code># Full-stack testing with PHP backend\ndocker run --rm \\\n  -v $(pwd):/app \\\n  -w /app \\\n  webgrip/playwright-runner:latest \\\n  bash -c \"\n    # Setup PHP application\n    composer install\n    php artisan migrate --env=testing\n    php artisan serve --port=8000 &amp;\n\n    # Wait for PHP server to start\n    sleep 5\n\n    # Run end-to-end tests\n    npx playwright test --config=playwright-e2e.config.js\n  \"\n</code></pre>"},{"location":"docker-images/playwright-runner/#headless-vs-headed-testing","title":"Headless vs. Headed Testing","text":"<pre><code># Headless testing (default)\ndocker run --rm -v $(pwd):/app -w /app \\\n  webgrip/playwright-runner:latest \\\n  npx playwright test --headed=false\n\n# Headed testing with X11 forwarding (Linux)\ndocker run --rm \\\n  -v $(pwd):/app \\\n  -v /tmp/.X11-unix:/tmp/.X11-unix \\\n  -e DISPLAY=$DISPLAY \\\n  -w /app \\\n  webgrip/playwright-runner:latest \\\n  npx playwright test --headed=true\n</code></pre>"},{"location":"docker-images/playwright-runner/#test-report-generation","title":"Test Report Generation","text":"<pre><code># Generate HTML reports\ndocker run --rm \\\n  -v $(pwd):/app \\\n  -w /app \\\n  webgrip/playwright-runner:latest \\\n  bash -c \"\n    npx playwright test --reporter=html\n\n    # Copy reports to host\n    cp -r playwright-report/ /app/reports/\n  \"\n</code></pre>"},{"location":"docker-images/playwright-runner/#cicd-integration","title":"CI/CD Integration","text":""},{"location":"docker-images/playwright-runner/#github-actions-workflow","title":"GitHub Actions Workflow","text":"<pre><code># .github/workflows/e2e-tests.yml\nname: End-to-End Tests\non: [push, pull_request]\n\njobs:\n  e2e-tests:\n    runs-on: ubuntu-latest\n    container: webgrip/playwright-runner:latest\n\n    services:\n      postgres:\n        image: postgres:15\n        env:\n          POSTGRES_PASSWORD: postgres\n          POSTGRES_DB: testing\n        options: &gt;-\n          --health-cmd pg_isready\n          --health-interval 10s\n          --health-timeout 5s\n          --health-retries 5\n\n    steps:\n      - uses: actions/checkout@v4\n\n      - name: Install PHP dependencies\n        run: composer install --prefer-dist --no-progress\n\n      - name: Setup application\n        env:\n          DB_CONNECTION: pgsql\n          DB_HOST: postgres\n          DB_DATABASE: testing\n          DB_USERNAME: postgres\n          DB_PASSWORD: postgres\n        run: |\n          php artisan key:generate\n          php artisan migrate --force\n          php artisan db:seed --force\n\n      - name: Start PHP server\n        run: php artisan serve --port=8000 &amp;\n\n      - name: Wait for server\n        run: |\n          timeout 30 bash -c 'until curl -f http://localhost:8000/health; do sleep 1; done'\n\n      - name: Run Playwright tests\n        run: |\n          npx playwright test --config=playwright.config.js\n\n      - name: Upload test reports\n        uses: actions/upload-artifact@v3\n        if: always()\n        with:\n          name: playwright-report\n          path: playwright-report/\n</code></pre>"},{"location":"docker-images/playwright-runner/#multi-browser-testing","title":"Multi-Browser Testing","text":"<pre><code># Test matrix for different browsers\nstrategy:\n  matrix:\n    browser: [chromium, firefox, webkit]\n\nsteps:\n  - name: Run ${{ matrix.browser }} tests\n    run: |\n      npx playwright test --project=${{ matrix.browser }} \\\n        --reporter=json --output-dir=results-${{ matrix.browser }}\n</code></pre>"},{"location":"docker-images/playwright-runner/#parallel-test-execution","title":"Parallel Test Execution","text":"<pre><code># Parallel execution with sharding\nstrategy:\n  matrix:\n    shard: [1, 2, 3, 4]\n\nsteps:\n  - name: Run tests (Shard ${{ matrix.shard }})\n    run: |\n      npx playwright test --shard=${{ matrix.shard }}/4 \\\n        --reporter=json --output-dir=results-shard-${{ matrix.shard }}\n</code></pre>"},{"location":"docker-images/playwright-runner/#configuration","title":"Configuration","text":""},{"location":"docker-images/playwright-runner/#environment-variables","title":"Environment Variables","text":"Variable Default Purpose <code>TZ</code> <code>Europe/Amsterdam</code> Container timezone <code>NODE_ENV</code> <code>test</code> Node.js environment <code>PLAYWRIGHT_BROWSERS_PATH</code> System default Browser installation path <code>PLAYWRIGHT_SKIP_BROWSER_DOWNLOAD</code> <code>1</code> Skip browser download (pre-installed)"},{"location":"docker-images/playwright-runner/#playwright-configuration","title":"Playwright Configuration","text":"<pre><code>// playwright.config.js\nmodule.exports = {\n  testDir: './tests/e2e',\n  timeout: 30000,\n  retries: process.env.CI ? 2 : 0,\n  workers: process.env.CI ? 1 : undefined,\n\n  use: {\n    baseURL: 'http://localhost:8000',\n    trace: 'on-first-retry',\n    screenshot: 'only-on-failure',\n    video: 'retain-on-failure',\n  },\n\n  projects: [\n    {\n      name: 'chromium',\n      use: { ...devices['Desktop Chrome'] },\n    },\n    {\n      name: 'firefox',\n      use: { ...devices['Desktop Firefox'] },\n    },\n    {\n      name: 'webkit',\n      use: { ...devices['Desktop Safari'] },\n    },\n  ],\n\n  webServer: {\n    command: 'php artisan serve',\n    port: 8000,\n    reuseExistingServer: !process.env.CI,\n  },\n};\n</code></pre>"},{"location":"docker-images/playwright-runner/#security-configuration","title":"Security Configuration","text":"<p>The image includes a custom seccomp profile (<code>seccomp_profile.json</code>) that allows user namespaces required for browser sandboxing:</p> <pre><code>{\n  \"comment\": \"Allow create user namespaces\",\n  \"names\": [\"clone\", \"setns\", \"unshare\"],\n  \"action\": \"SCMP_ACT_ALLOW\"\n}\n</code></pre>"},{"location":"docker-images/playwright-runner/#advanced-testing-patterns","title":"Advanced Testing Patterns","text":""},{"location":"docker-images/playwright-runner/#api-testing-integration","title":"API Testing Integration","text":"<pre><code>// tests/api-integration.spec.js\nimport { test, expect } from '@playwright/test';\n\ntest.describe('API Integration', () =&gt; {\n  test('should test PHP API endpoints', async ({ request }) =&gt; {\n    // Test PHP API directly\n    const response = await request.get('/api/users');\n    expect(response.status()).toBe(200);\n\n    const users = await response.json();\n    expect(users).toHaveLength(3);\n  });\n\n  test('should test UI with API data', async ({ page }) =&gt; {\n    // Navigate to UI that consumes API\n    await page.goto('/users');\n\n    // Verify UI displays API data correctly\n    await expect(page.locator('[data-testid=\"user-list\"]')).toContainText('John Doe');\n  });\n});\n</code></pre>"},{"location":"docker-images/playwright-runner/#database-testing","title":"Database Testing","text":"<pre><code>// tests/database-e2e.spec.js\nimport { test, expect } from '@playwright/test';\nimport { execSync } from 'child_process';\n\ntest.describe('Database E2E', () =&gt; {\n  test.beforeEach(async () =&gt; {\n    // Reset database state\n    execSync('php artisan migrate:fresh --seed', { stdio: 'inherit' });\n  });\n\n  test('should create user through UI and verify in database', async ({ page }) =&gt; {\n    await page.goto('/users/create');\n    await page.fill('[name=\"name\"]', 'Test User');\n    await page.fill('[name=\"email\"]', 'test@example.com');\n    await page.click('button[type=\"submit\"]');\n\n    // Verify user was created\n    const result = execSync('php artisan tinker --execute=\"User::where(\\'email\\', \\'test@example.com\\')-&gt;count()\"').toString();\n    expect(parseInt(result.trim())).toBe(1);\n  });\n});\n</code></pre>"},{"location":"docker-images/playwright-runner/#visual-regression-testing","title":"Visual Regression Testing","text":"<pre><code>// tests/visual-regression.spec.js\nimport { test, expect } from '@playwright/test';\n\ntest.describe('Visual Regression', () =&gt; {\n  test('should match homepage screenshot', async ({ page }) =&gt; {\n    await page.goto('/');\n\n    // Take screenshot and compare with baseline\n    await expect(page).toHaveScreenshot('homepage.png');\n  });\n\n  test('should match mobile view', async ({ page }) =&gt; {\n    await page.setViewportSize({ width: 375, height: 667 });\n    await page.goto('/');\n\n    await expect(page).toHaveScreenshot('homepage-mobile.png');\n  });\n});\n</code></pre>"},{"location":"docker-images/playwright-runner/#performance-testing","title":"Performance Testing","text":""},{"location":"docker-images/playwright-runner/#load-testing-integration","title":"Load Testing Integration","text":"<pre><code>// tests/performance.spec.js\nimport { test, expect } from '@playwright/test';\n\ntest.describe('Performance', () =&gt; {\n  test('should load homepage within performance budget', async ({ page }) =&gt; {\n    await page.goto('/');\n\n    // Wait for network idle\n    await page.waitForLoadState('networkidle');\n\n    // Check performance metrics\n    const performanceEntries = await page.evaluate(() =&gt; {\n      return JSON.stringify(performance.getEntriesByType('navigation'));\n    });\n\n    const navigation = JSON.parse(performanceEntries)[0];\n    expect(navigation.loadEventEnd - navigation.fetchStart).toBeLessThan(3000);\n  });\n});\n</code></pre>"},{"location":"docker-images/playwright-runner/#troubleshooting","title":"Troubleshooting","text":""},{"location":"docker-images/playwright-runner/#common-issues","title":"Common Issues","text":"<p>Browser launch failures <pre><code># Check browser installation\ndocker run --rm webgrip/playwright-runner:latest \\\n  npx playwright --version\n\n# Verify browser binaries\nls -la /ms-playwright/\n</code></pre></p> <p>Permission errors with seccomp <pre><code># Run with custom seccomp profile\ndocker run --rm \\\n  --security-opt seccomp=/etc/seccomp_profile.json \\\n  -v $(pwd):/app -w /app \\\n  webgrip/playwright-runner:latest \\\n  npx playwright test\n</code></pre></p> <p>PHP server connection issues <pre><code># Debug PHP server\ndocker run -it --rm -v $(pwd):/app -w /app \\\n  webgrip/playwright-runner:latest bash\n\n# Inside container\nphp artisan serve --host=0.0.0.0 --port=8000 &amp;\ncurl http://localhost:8000/health\n</code></pre></p> <p>Test timeout issues <pre><code># Increase timeouts\nnpx playwright test --timeout=60000 --global-timeout=300000\n</code></pre></p>"},{"location":"docker-images/playwright-runner/#debug-mode","title":"Debug Mode","text":"<pre><code># Run with debug output\ndocker run --rm \\\n  -e DEBUG=pw:* \\\n  -v $(pwd):/app -w /app \\\n  webgrip/playwright-runner:latest \\\n  npx playwright test --debug\n</code></pre>"},{"location":"docker-images/playwright-runner/#performance-issues","title":"Performance Issues","text":"<pre><code># Run with reduced parallelism\ndocker run --rm \\\n  -v $(pwd):/app -w /app \\\n  webgrip/playwright-runner:latest \\\n  npx playwright test --workers=1\n\n# Use faster test runner\nnpx playwright test --reporter=dot\n</code></pre>"},{"location":"docker-images/playwright-runner/#customization","title":"Customization","text":""},{"location":"docker-images/playwright-runner/#adding-custom-browsers","title":"Adding Custom Browsers","text":"<pre><code># Dockerfile.custom\nFROM webgrip/playwright-runner:latest\n\n# Install additional browsers or versions\nRUN npx playwright install chrome@beta\nRUN npx playwright install firefox@beta\n</code></pre>"},{"location":"docker-images/playwright-runner/#custom-php-extensions","title":"Custom PHP Extensions","text":"<pre><code>FROM webgrip/playwright-runner:latest\n\nUSER root\n\n# Add additional PHP extensions\nRUN apt-get update &amp;&amp; apt-get install -y \\\n    php8.3-redis \\\n    php8.3-mongodb \\\n    &amp;&amp; apt-get clean\n\nUSER playwright\n</code></pre>"},{"location":"docker-images/playwright-runner/#related-documentation","title":"Related Documentation","text":"<ul> <li>Architecture Overview - E2E testing in our infrastructure</li> <li>GitHub Runner - Complementary CI runner with PHP support  </li> <li>Testing Guide - Detailed Playwright configuration</li> <li>CI/CD Pipeline - Automated image building</li> </ul>"},{"location":"docker-images/playwright-runner/#maintenance","title":"Maintenance","text":""},{"location":"docker-images/playwright-runner/#update-schedule","title":"Update Schedule","text":"<ul> <li>Playwright version: Updated monthly following Playwright releases</li> <li>Browser versions: Updated automatically with Playwright updates</li> <li>PHP version: Synchronized with GitHub Runner updates</li> <li>Security patches: Applied immediately when available</li> </ul>"},{"location":"docker-images/playwright-runner/#version-compatibility","title":"Version Compatibility","text":"Image Version Playwright Node.js PHP Status <code>latest</code> v1.51.0 20 LTS 8.3 Active <code>v1.51</code> v1.51.x 20 LTS 8.3 Supported <code>v1.50</code> v1.50.x 18 LTS 8.3 Deprecated <p>Assumption: Tests primarily target web applications with PHP backends. Support for other backend technologies (Python, Ruby, etc.) may require additional runtime dependencies. Validation needed: Confirm backend technology requirements with development teams.</p> <p>Maintainer: WebGrip Ops Team Source: <code>ops/docker/playwright-runner/Dockerfile</code> Registry: webgrip/playwright-runner</p>"},{"location":"docker-images/rust-ci-runner/","title":"Rust CI Runner","text":"<p>The Rust CI Runner provides a complete, optimized environment for Rust development, testing, and continuous integration workflows.</p>"},{"location":"docker-images/rust-ci-runner/#purpose","title":"Purpose","text":"<p>This image serves as the primary development and CI environment for Rust projects at WebGrip, providing:</p> <ul> <li>\u2705 Complete Rust toolchain with stable and nightly versions</li> <li>\u2705 Essential Rust CLI tools for quality assurance and testing</li> <li>\u2705 Optimized build environment with caching and minimal overhead</li> <li>\u2705 Security-focused tooling for dependency auditing</li> </ul>"},{"location":"docker-images/rust-ci-runner/#image-details","title":"Image Details","text":"Property Value Base Image <code>rust:1.87.0-slim-bookworm</code> \u2192 <code>debian:bookworm-slim</code> Architecture Multi-platform (AMD64, ARM64) Size ~800MB (optimized via multi-stage build) Registry <code>webgrip/rust-ci-runner</code> Dockerfile <code>ops/docker/rust-ci-runner/Dockerfile</code>"},{"location":"docker-images/rust-ci-runner/#installed-tools","title":"Installed Tools","text":""},{"location":"docker-images/rust-ci-runner/#core-rust-toolchain","title":"Core Rust Toolchain","text":"<ul> <li>Rust Stable: Version 1.87.0 (configurable via build arg)</li> <li>Rust Nightly: Latest nightly toolchain</li> <li>Cargo: Package manager and build tool</li> <li>Rustfmt: Code formatting tool</li> <li>Clippy: Linting and static analysis</li> </ul>"},{"location":"docker-images/rust-ci-runner/#quality-assurance-tools","title":"Quality Assurance Tools","text":"Tool Purpose Installation Method <code>cargo-audit</code> Security vulnerability scanning cargo-binstall <code>cargo-deny</code> Dependency validation and licensing cargo-binstall <code>cargo-outdated</code> Dependency update checking cargo-binstall <code>cargo-udeps</code> Unused dependency detection cargo-binstall <code>cargo-msrv</code> Minimum Supported Rust Version checking cargo-binstall <code>cargo-nextest</code> Next-generation test runner cargo-binstall <code>cargo-tarpaulin</code> Code coverage analysis cargo-binstall <code>cargo-sort</code> Cargo.toml dependency sorting Source build"},{"location":"docker-images/rust-ci-runner/#system-dependencies","title":"System Dependencies","text":"<ul> <li>Build tools: <code>gcc</code>, <code>make</code>, <code>pkg-config</code></li> <li>SSL/TLS: <code>libssl-dev</code>, <code>libssl3</code></li> <li>Networking: <code>ca-certificates</code>, <code>curl</code></li> </ul>"},{"location":"docker-images/rust-ci-runner/#architecture","title":"Architecture","text":""},{"location":"docker-images/rust-ci-runner/#multi-stage-build-process","title":"Multi-Stage Build Process","text":"<pre><code>flowchart TD\n    subgraph \"Build Stage\"\n        BUILD[rust:1.87.0-slim-bookworm]\n        BUILD --&gt; INSTALL[Install cargo-binstall]\n        INSTALL --&gt; TOOLS[Install Rust CLI tools]\n        TOOLS --&gt; SORT[Build cargo-sort from source]\n        SORT --&gt; NIGHTLY[Install nightly toolchain]\n        NIGHTLY --&gt; COMPONENTS[Add rustfmt + clippy]\n    end\n\n    subgraph \"Runtime Stage\"\n        RUNTIME[debian:bookworm-slim]\n        RUNTIME --&gt; DEPS[Install runtime dependencies]\n        DEPS --&gt; COPY[Copy toolchains from build stage]\n        COPY --&gt; ENV[Set environment variables]\n    end\n\n    BUILD -.-&gt;|Multi-stage copy| RUNTIME</code></pre> <p>Benefits of this approach: - Smaller final image: Build dependencies not included in runtime - Layer caching: Rust tools cached independently of project code - Security: Minimal attack surface with only runtime dependencies</p>"},{"location":"docker-images/rust-ci-runner/#usage-examples","title":"Usage Examples","text":""},{"location":"docker-images/rust-ci-runner/#basic-development","title":"Basic Development","text":"<pre><code># Start interactive development environment\ndocker run -it --rm \\\n  -v $(pwd):/workspace \\\n  -w /workspace \\\n  webgrip/rust-ci-runner:latest \\\n  bash\n\n# Inside container - full Rust development workflow\ncargo new my-project\ncd my-project\ncargo build\ncargo test\ncargo clippy\ncargo fmt --check\n</code></pre>"},{"location":"docker-images/rust-ci-runner/#cicd-integration","title":"CI/CD Integration","text":"<pre><code># .github/workflows/rust-ci.yml\nname: Rust CI\non: [push, pull_request]\n\njobs:\n  test:\n    runs-on: ubuntu-latest\n    container: webgrip/rust-ci-runner:latest\n    steps:\n      - uses: actions/checkout@v4\n\n      - name: Run tests\n        run: |\n          cargo test --all-features\n          cargo nextest run --all-features\n\n      - name: Check code quality\n        run: |\n          cargo clippy -- -D warnings\n          cargo fmt --check\n          cargo audit\n          cargo deny check\n\n      - name: Generate coverage\n        run: cargo tarpaulin --out xml\n</code></pre>"},{"location":"docker-images/rust-ci-runner/#quality-assurance-workflow","title":"Quality Assurance Workflow","text":"<pre><code># Complete quality check pipeline\ndocker run --rm -v $(pwd):/workspace -w /workspace \\\n  webgrip/rust-ci-runner:latest \\\n  bash -c \"\n    echo '\ud83d\udd0d Checking code format...'\n    cargo fmt --check\n\n    echo '\ud83d\udcce Running clippy...'  \n    cargo clippy -- -D warnings\n\n    echo '\ud83d\udd12 Auditing dependencies...'\n    cargo audit\n\n    echo '\ud83d\udce6 Checking for unused deps...'\n    cargo +nightly udeps\n\n    echo '\ud83d\udcca Generating coverage...'\n    cargo tarpaulin --out html\n  \"\n</code></pre>"},{"location":"docker-images/rust-ci-runner/#configuration","title":"Configuration","text":""},{"location":"docker-images/rust-ci-runner/#environment-variables","title":"Environment Variables","text":"Variable Default Purpose <code>CARGO_HOME</code> <code>/usr/local/cargo</code> Cargo installation directory <code>RUSTUP_HOME</code> <code>/usr/local/rustup</code> Rustup installation directory <code>PATH</code> Includes cargo bin Tool discovery"},{"location":"docker-images/rust-ci-runner/#build-arguments","title":"Build Arguments","text":"<pre><code># Customize Rust version during build\nARG RUST_VERSION=1.87.0\n</code></pre> <p>Build with custom Rust version: <pre><code>docker build --build-arg RUST_VERSION=1.86.0 \\\n  -t my-rust-ci ops/docker/rust-ci-runner/\n</code></pre></p>"},{"location":"docker-images/rust-ci-runner/#best-practices","title":"Best Practices","text":""},{"location":"docker-images/rust-ci-runner/#performance-optimization","title":"Performance Optimization","text":"<ol> <li> <p>Use cargo workspaces for monorepos:    <pre><code># Mount workspace root\ndocker run -v $(pwd):/workspace -w /workspace \\\n  webgrip/rust-ci-runner cargo build --workspace\n</code></pre></p> </li> <li> <p>Cache dependencies between runs:    <pre><code># Create named volume for cargo cache\ndocker volume create cargo-cache\ndocker run -v cargo-cache:/usr/local/cargo/registry \\\n  -v $(pwd):/workspace -w /workspace \\\n  webgrip/rust-ci-runner cargo build\n</code></pre></p> </li> <li> <p>Parallel testing with nextest:    <pre><code>docker run --rm -v $(pwd):/workspace -w /workspace \\\n  webgrip/rust-ci-runner \\\n  cargo nextest run --jobs $(nproc)\n</code></pre></p> </li> </ol>"},{"location":"docker-images/rust-ci-runner/#security-considerations","title":"Security Considerations","text":"<ol> <li> <p>Regular dependency audits:    <pre><code># Include in CI pipeline\ncargo audit --deny warnings\ncargo deny check\n</code></pre></p> </li> <li> <p>MSRV compliance:    <pre><code># Verify minimum supported Rust version\ncargo msrv\n</code></pre></p> </li> <li> <p>Dependency management:    <pre><code># Check for outdated dependencies\ncargo outdated\n# Remove unused dependencies  \ncargo +nightly udeps\n</code></pre></p> </li> </ol>"},{"location":"docker-images/rust-ci-runner/#troubleshooting","title":"Troubleshooting","text":""},{"location":"docker-images/rust-ci-runner/#common-issues","title":"Common Issues","text":"<p>Build failures due to missing system dependencies <pre><code># Check if additional system packages needed\napt list --installed | grep -E 'ssl|pkg-config|build'\n</code></pre></p> <p>Permission errors with mounted volumes <pre><code># Fix ownership after container operations\ndocker run --rm -v $(pwd):/workspace -w /workspace \\\n  webgrip/rust-ci-runner:latest \\\n  chown -R $(id -u):$(id -g) target/\n</code></pre></p> <p>Tool not found errors <pre><code># Verify tools are in PATH\ndocker run --rm webgrip/rust-ci-runner:latest which cargo-audit\ndocker run --rm webgrip/rust-ci-runner:latest cargo --list\n</code></pre></p>"},{"location":"docker-images/rust-ci-runner/#performance-issues","title":"Performance Issues","text":"<p>Slow builds - Use cargo cache volumes - Enable incremental compilation: <code>CARGO_INCREMENTAL=1</code> - Use faster linker: Install <code>lld</code> in derived images</p> <p>Large image size - Image is already optimized via multi-stage build - For smaller images, consider cargo-chef pattern for layer caching</p>"},{"location":"docker-images/rust-ci-runner/#customization","title":"Customization","text":""},{"location":"docker-images/rust-ci-runner/#extending-the-image","title":"Extending the Image","text":"<pre><code># Dockerfile.custom\nFROM webgrip/rust-ci-runner:latest\n\n# Add project-specific tools\nRUN cargo binstall --no-confirm cargo-watch cargo-expand\n\n# Add system dependencies\nUSER root\nRUN apt-get update &amp;&amp; apt-get install -y postgresql-client\nUSER rust\n\n# Set project-specific environment\nENV DATABASE_URL=postgresql://test:test@localhost/test\n</code></pre>"},{"location":"docker-images/rust-ci-runner/#adding-custom-tools","title":"Adding Custom Tools","text":"<pre><code># Run container and install additional tools\ndocker run -it --name rust-dev webgrip/rust-ci-runner:latest bash\n\n# Inside container\ncargo install cargo-watch\ncargo binstall --no-confirm cargo-expand\n\n# Commit changes to new image\ndocker commit rust-dev my-custom-rust-ci\ndocker rm rust-dev\n</code></pre>"},{"location":"docker-images/rust-ci-runner/#related-documentation","title":"Related Documentation","text":"<ul> <li>Architecture Overview - How this fits into our infrastructure</li> <li>CI/CD Pipeline - Automated building of this image</li> <li>Contributing Images - How to improve this image</li> <li>Quick Start Guide - Get started quickly</li> </ul>"},{"location":"docker-images/rust-ci-runner/#maintenance","title":"Maintenance","text":""},{"location":"docker-images/rust-ci-runner/#update-schedule","title":"Update Schedule","text":"<ul> <li>Rust versions: Updated monthly following Rust release schedule</li> <li>CLI tools: Updated quarterly or when security issues discovered</li> <li>Base image: Updated when new Debian security releases available</li> </ul>"},{"location":"docker-images/rust-ci-runner/#version-policy","title":"Version Policy","text":"<ul> <li><code>latest</code>: Latest stable Rust version</li> <li><code>&lt;rust-version&gt;</code>: Specific Rust version (e.g., <code>1.87.0</code>)</li> <li><code>&lt;git-sha&gt;</code>: Specific build commit for reproducibility</li> </ul> <p>Assumption: Teams primarily use stable Rust toolchain. Nightly toolchain available but not default. Validation needed: Confirm if any projects require nightly-specific features.</p> <p>Maintainer: WebGrip Ops Team Source: <code>ops/docker/rust-ci-runner/Dockerfile</code> Registry: webgrip/rust-ci-runner</p>"},{"location":"docker-images/rust-releaser/","title":"Rust Releaser","text":"<p>A comprehensive release automation environment combining Node.js semantic-release tooling with Rust cross-compilation capabilities for automated software releases.</p>"},{"location":"docker-images/rust-releaser/#purpose","title":"Purpose","text":"<p>The Rust Releaser provides automated release management for Rust projects by combining:</p> <ul> <li>\u2705 Semantic Release automation with conventional commits</li> <li>\u2705 Rust cross-compilation for multiple target platforms</li> <li>\u2705 Multi-format releases supporting crates, binaries, and container images</li> <li>\u2705 WASM support for WebAssembly compilation targets</li> <li>\u2705 Changelog generation with automated versioning</li> <li>\u2705 GitHub integration for releases and asset publishing</li> </ul>"},{"location":"docker-images/rust-releaser/#image-details","title":"Image Details","text":"Property Value Base Image <code>node:22-bookworm-slim</code> Size ~2GB (includes Rust toolchains + cross-compilation targets) Architecture AMD64 (with cross-compilation support) Registry <code>webgrip/rust-releaser</code> Dockerfile <code>ops/docker/rust-releaser/Dockerfile</code>"},{"location":"docker-images/rust-releaser/#installed-tools-software","title":"Installed Tools &amp; Software","text":""},{"location":"docker-images/rust-releaser/#release-automation-stack","title":"Release Automation Stack","text":"Tool Version Purpose Node.js 22 LTS Runtime for semantic-release semantic-release Latest Automated release management git-cliff Latest Changelog generation cargo-release Latest Rust-specific release tooling"},{"location":"docker-images/rust-releaser/#rust-compilation-environment","title":"Rust Compilation Environment","text":"Component Purpose Rust Stable Primary compilation toolchain cross Cross-compilation tool cargo-binstall Fast binary installation wasm-bindgen-cli WebAssembly binding generation wasm32-unknown-unknown WebAssembly compilation target"},{"location":"docker-images/rust-releaser/#system-build-tools","title":"System Build Tools","text":"<ul> <li>build-essential - GCC, make, and related build tools</li> <li>pkg-config - Library configuration</li> <li>libssl-dev - SSL/TLS development headers</li> <li>Docker CLI - Container image building</li> <li>QEMU - Cross-platform emulation for builds</li> </ul>"},{"location":"docker-images/rust-releaser/#semantic-release-plugins","title":"Semantic Release Plugins","text":"Plugin Purpose <code>@semantic-release/changelog</code> Generate changelog files <code>@semantic-release/commit-analyzer</code> Analyze commits for release type <code>@semantic-release/exec</code> Execute custom release commands <code>@semantic-release/git</code> Commit and tag releases <code>@semantic-release/github</code> GitHub release integration <code>@semantic-release/release-notes-generator</code> Generate release notes <code>semantic-release-cargo</code> Rust/Cargo integration <code>semantic-release-github-actions-tags</code> GitHub Actions tag management <code>semantic-release-helm3</code> Helm chart releases"},{"location":"docker-images/rust-releaser/#architecture","title":"Architecture","text":""},{"location":"docker-images/rust-releaser/#release-pipeline-architecture","title":"Release Pipeline Architecture","text":"<pre><code>flowchart TD\n    COMMIT[Conventional Commits] --&gt; ANALYZE[Commit Analysis]\n    ANALYZE --&gt; VERSION[Version Calculation]\n    VERSION --&gt; CHANGELOG[Changelog Generation]\n    CHANGELOG --&gt; RUST_BUILD[Rust Compilation]\n    RUST_BUILD --&gt; CROSS_COMPILE[Cross Compilation]\n    CROSS_COMPILE --&gt; WASM_BUILD[WASM Compilation]\n    WASM_BUILD --&gt; PACKAGE[Package Assets]\n    PACKAGE --&gt; GITHUB_RELEASE[GitHub Release]\n    GITHUB_RELEASE --&gt; CRATES_IO[Crates.io Publish]\n    CRATES_IO --&gt; DOCKER_BUILD[Docker Image Build]\n    DOCKER_BUILD --&gt; NOTIFY[Notifications]\n\n    subgraph \"Tools Used\"\n        SEMANTIC[semantic-release]\n        CARGO[cargo-release]\n        CROSS[cross]\n        WASM[wasm-bindgen]\n        CLIFF[git-cliff]\n    end\n\n    ANALYZE --&gt; SEMANTIC\n    RUST_BUILD --&gt; CARGO\n    CROSS_COMPILE --&gt; CROSS\n    WASM_BUILD --&gt; WASM\n    CHANGELOG --&gt; CLIFF</code></pre>"},{"location":"docker-images/rust-releaser/#cross-compilation-targets","title":"Cross-Compilation Targets","text":"<pre><code>flowchart LR\n    subgraph \"Source\"\n        RUST_CODE[Rust Source Code]\n    end\n\n    subgraph \"Compilation Targets\"\n        X86_64_LINUX[x86_64-unknown-linux-gnu]\n        X86_64_WINDOWS[x86_64-pc-windows-gnu]\n        X86_64_MACOS[x86_64-apple-darwin]\n        ARM64_LINUX[aarch64-unknown-linux-gnu]\n        WASM[wasm32-unknown-unknown]\n    end\n\n    subgraph \"Output Artifacts\"\n        LINUX_BIN[Linux Binary]\n        WINDOWS_EXE[Windows Executable]\n        MACOS_BIN[macOS Binary]\n        ARM_BIN[ARM64 Binary]\n        WASM_PKG[WASM Package]\n    end\n\n    RUST_CODE --&gt; X86_64_LINUX --&gt; LINUX_BIN\n    RUST_CODE --&gt; X86_64_WINDOWS --&gt; WINDOWS_EXE\n    RUST_CODE --&gt; X86_64_MACOS --&gt; MACOS_BIN\n    RUST_CODE --&gt; ARM64_LINUX --&gt; ARM_BIN\n    RUST_CODE --&gt; WASM --&gt; WASM_PKG</code></pre>"},{"location":"docker-images/rust-releaser/#usage-examples","title":"Usage Examples","text":""},{"location":"docker-images/rust-releaser/#basic-semantic-release","title":"Basic Semantic Release","text":"<pre><code># Run semantic release for Rust project\ndocker run --rm \\\n  -v $(pwd):/workspace \\\n  -w /workspace \\\n  -e GITHUB_TOKEN=$GITHUB_TOKEN \\\n  -e CARGO_REGISTRY_TOKEN=$CARGO_TOKEN \\\n  webgrip/rust-releaser:latest \\\n  npx semantic-release\n</code></pre>"},{"location":"docker-images/rust-releaser/#cross-platform-binary-release","title":"Cross-Platform Binary Release","text":"<pre><code># Build and release for multiple platforms\ndocker run --rm \\\n  -v $(pwd):/workspace \\\n  -w /workspace \\\n  -e GITHUB_TOKEN=$GITHUB_TOKEN \\\n  webgrip/rust-releaser:latest \\\n  bash -c \"\n    # Build for multiple targets\n    cross build --release --target x86_64-unknown-linux-gnu\n    cross build --release --target x86_64-pc-windows-gnu\n    cross build --release --target aarch64-unknown-linux-gnu\n\n    # Create release with binaries\n    npx semantic-release\n  \"\n</code></pre>"},{"location":"docker-images/rust-releaser/#wasm-package-release","title":"WASM Package Release","text":"<pre><code># Build and release WebAssembly package\ndocker run --rm \\\n  -v $(pwd):/workspace \\\n  -w /workspace \\\n  -e GITHUB_TOKEN=$GITHUB_TOKEN \\\n  -e NPM_TOKEN=$NPM_TOKEN \\\n  webgrip/rust-releaser:latest \\\n  bash -c \"\n    # Build WASM package\n    wasm-pack build --target web --out-dir pkg\n\n    # Run semantic release\n    npx semantic-release\n  \"\n</code></pre>"},{"location":"docker-images/rust-releaser/#docker-image-release","title":"Docker Image Release","text":"<pre><code># Build and release Docker images\ndocker run --rm \\\n  -v $(pwd):/workspace \\\n  -v /var/run/docker.sock:/var/run/docker.sock \\\n  -w /workspace \\\n  -e GITHUB_TOKEN=$GITHUB_TOKEN \\\n  -e DOCKER_TOKEN=$DOCKER_TOKEN \\\n  webgrip/rust-releaser:latest \\\n  bash -c \"\n    # Build Docker image\n    docker build -t myapp:latest .\n\n    # Run semantic release with Docker publishing\n    npx semantic-release\n  \"\n</code></pre>"},{"location":"docker-images/rust-releaser/#configuration","title":"Configuration","text":""},{"location":"docker-images/rust-releaser/#semantic-release-configuration","title":"Semantic Release Configuration","text":"<pre><code>// .releaserc.json\n{\n  \"branches\": [\"main\"],\n  \"plugins\": [\n    \"@semantic-release/commit-analyzer\",\n    \"@semantic-release/release-notes-generator\",\n    \"@semantic-release/changelog\",\n    [\n      \"semantic-release-cargo\",\n      {\n        \"cargoWorkspace\": true,\n        \"publishToCargoRegistry\": true\n      }\n    ],\n    [\n      \"@semantic-release/exec\",\n      {\n        \"prepareCmd\": \"cross build --release --target x86_64-unknown-linux-gnu &amp;&amp; cross build --release --target x86_64-pc-windows-gnu\",\n        \"publishCmd\": \"echo 'Custom publish steps'\"\n      }\n    ],\n    [\n      \"@semantic-release/github\",\n      {\n        \"assets\": [\n          {\n            \"path\": \"target/x86_64-unknown-linux-gnu/release/myapp\",\n            \"name\": \"myapp-linux-amd64\",\n            \"label\": \"Linux AMD64 Binary\"\n          },\n          {\n            \"path\": \"target/x86_64-pc-windows-gnu/release/myapp.exe\",\n            \"name\": \"myapp-windows-amd64.exe\",\n            \"label\": \"Windows AMD64 Executable\"\n          }\n        ]\n      }\n    ],\n    [\n      \"@semantic-release/git\",\n      {\n        \"assets\": [\"CHANGELOG.md\", \"Cargo.toml\", \"Cargo.lock\"],\n        \"message\": \"chore(release): ${nextRelease.version} [skip ci]\\n\\n${nextRelease.notes}\"\n      }\n    ]\n  ]\n}\n</code></pre>"},{"location":"docker-images/rust-releaser/#cross-compilation-configuration","title":"Cross-Compilation Configuration","text":"<pre><code># Cross.toml\n[build]\npre-build = [\n    \"dpkg --add-architecture $CROSS_DEB_ARCH\",\n    \"apt-get update &amp;&amp; apt-get --assume-yes install libssl-dev:$CROSS_DEB_ARCH\"\n]\n\n[target.x86_64-pc-windows-gnu]\npre-build = [\n    \"apt-get update &amp;&amp; apt-get install -y mingw-w64\"\n]\n\n[target.aarch64-unknown-linux-gnu]\npre-build = [\n    \"dpkg --add-architecture arm64\",\n    \"apt-get update &amp;&amp; apt-get install -y libssl-dev:arm64\"\n]\n</code></pre>"},{"location":"docker-images/rust-releaser/#environment-variables","title":"Environment Variables","text":"Variable Required Purpose Example <code>GITHUB_TOKEN</code> Yes GitHub API authentication <code>ghp_xxxxxxxxxxxx</code> <code>CARGO_REGISTRY_TOKEN</code> Optional Crates.io publishing <code>cio_xxxxxxxx</code> <code>NPM_TOKEN</code> Optional npm package publishing <code>npm_xxxxxxxx</code> <code>DOCKER_TOKEN</code> Optional Docker Hub publishing <code>dckr_pat_xxxxx</code>"},{"location":"docker-images/rust-releaser/#cicd-integration","title":"CI/CD Integration","text":""},{"location":"docker-images/rust-releaser/#github-actions-workflow","title":"GitHub Actions Workflow","text":"<pre><code># .github/workflows/release.yml\nname: Release\non:\n  push:\n    branches: [main]\n\njobs:\n  release:\n    runs-on: ubuntu-latest\n    container: webgrip/rust-releaser:latest\n    steps:\n      - uses: actions/checkout@v4\n        with:\n          fetch-depth: 0\n          token: ${{ secrets.GITHUB_TOKEN }}\n\n      - name: Configure Git\n        run: |\n          git config --global user.name \"github-actions[bot]\"\n          git config --global user.email \"41898282+github-actions[bot]@users.noreply.github.com\"\n\n      - name: Cache Rust dependencies\n        uses: actions/cache@v3\n        with:\n          path: |\n            ~/.cargo/registry\n            ~/.cargo/git\n            target/\n          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}\n\n      - name: Build cross-platform binaries\n        run: |\n          cross build --release --target x86_64-unknown-linux-gnu\n          cross build --release --target x86_64-pc-windows-gnu\n          cross build --release --target aarch64-unknown-linux-gnu\n\n      - name: Build WASM package\n        run: |\n          wasm-pack build --target web --out-dir pkg\n\n      - name: Run semantic release\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}\n          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}\n        run: npx semantic-release\n</code></pre>"},{"location":"docker-images/rust-releaser/#multi-package-workspace-release","title":"Multi-Package Workspace Release","text":"<pre><code># Release multiple packages in workspace\nname: Workspace Release\non:\n  push:\n    branches: [main]\n\njobs:\n  release:\n    runs-on: ubuntu-latest\n    container: webgrip/rust-releaser:latest\n    strategy:\n      matrix:\n        package: [core, cli, web]\n    steps:\n      - uses: actions/checkout@v4\n        with:\n          fetch-depth: 0\n\n      - name: Release ${{ matrix.package }}\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}\n        run: |\n          cd packages/${{ matrix.package }}\n          npx semantic-release\n</code></pre>"},{"location":"docker-images/rust-releaser/#advanced-release-patterns","title":"Advanced Release Patterns","text":""},{"location":"docker-images/rust-releaser/#helm-chart-release","title":"Helm Chart Release","text":"<pre><code>// .releaserc.json for Helm chart\n{\n  \"plugins\": [\n    \"@semantic-release/commit-analyzer\",\n    \"@semantic-release/release-notes-generator\",\n    [\n      \"semantic-release-helm3\",\n      {\n        \"chartPath\": \"./charts/myapp\",\n        \"registry\": \"oci://registry-1.docker.io/webgrip\"\n      }\n    ],\n    \"@semantic-release/github\"\n  ]\n}\n</code></pre>"},{"location":"docker-images/rust-releaser/#container-image-with-binaries","title":"Container Image with Binaries","text":"<pre><code># Multi-stage release with container images\ndocker run --rm \\\n  -v $(pwd):/workspace \\\n  -v /var/run/docker.sock:/var/run/docker.sock \\\n  -w /workspace \\\n  -e GITHUB_TOKEN=$GITHUB_TOKEN \\\n  webgrip/rust-releaser:latest \\\n  bash -c \"\n    # Build optimized release binary\n    cross build --release --target x86_64-unknown-linux-musl\n\n    # Build minimal container image\n    docker build -f Dockerfile.release -t myapp:latest .\n\n    # Tag with semantic version\n    NEXT_VERSION=\\$(npx semantic-release --dry-run | grep 'Published release' | awk '{print \\$3}')\n    docker tag myapp:latest myapp:\\$NEXT_VERSION\n\n    # Run full release\n    npx semantic-release\n  \"\n</code></pre>"},{"location":"docker-images/rust-releaser/#betapre-release-workflow","title":"Beta/Pre-release Workflow","text":"<pre><code>// .releaserc.json with pre-release\n{\n  \"branches\": [\n    \"main\",\n    {\n      \"name\": \"beta\",\n      \"prerelease\": true\n    },\n    {\n      \"name\": \"alpha\",\n      \"prerelease\": true\n    }\n  ],\n  \"plugins\": [\n    \"@semantic-release/commit-analyzer\",\n    \"@semantic-release/release-notes-generator\",\n    [\n      \"semantic-release-cargo\",\n      {\n        \"publishToCargoRegistry\": false  // Skip publishing pre-releases\n      }\n    ],\n    \"@semantic-release/github\"\n  ]\n}\n</code></pre>"},{"location":"docker-images/rust-releaser/#performance-optimization","title":"Performance Optimization","text":""},{"location":"docker-images/rust-releaser/#build-caching","title":"Build Caching","text":"<pre><code># Use build cache for faster releases\ndocker run --rm \\\n  -v $(pwd):/workspace \\\n  -v rust-cache:/usr/local/cargo/registry \\\n  -v target-cache:/workspace/target \\\n  -w /workspace \\\n  webgrip/rust-releaser:latest \\\n  npx semantic-release\n</code></pre>"},{"location":"docker-images/rust-releaser/#parallel-compilation","title":"Parallel Compilation","text":"<pre><code># Enable parallel builds\ndocker run --rm \\\n  -v $(pwd):/workspace \\\n  -w /workspace \\\n  -e CARGO_BUILD_JOBS=4 \\\n  webgrip/rust-releaser:latest \\\n  cross build --release --target x86_64-unknown-linux-gnu\n</code></pre>"},{"location":"docker-images/rust-releaser/#troubleshooting","title":"Troubleshooting","text":""},{"location":"docker-images/rust-releaser/#common-issues","title":"Common Issues","text":"<p>Cross-compilation failures <pre><code># Debug cross-compilation\ndocker run -it --rm \\\n  -v $(pwd):/workspace \\\n  -w /workspace \\\n  webgrip/rust-releaser:latest bash\n\n# Inside container\ncross build --target x86_64-pc-windows-gnu --verbose\n</code></pre></p> <p>Semantic release authentication <pre><code># Verify tokens\necho $GITHUB_TOKEN | cut -c1-10\ncurl -H \"Authorization: token $GITHUB_TOKEN\" https://api.github.com/user\n</code></pre></p> <p>WASM build issues <pre><code># Check WASM tools\nwasm-pack --version\nrustup target list | grep wasm\n\n# Install missing targets\nrustup target add wasm32-unknown-unknown\n</code></pre></p> <p>Docker socket access <pre><code># Verify Docker access\ndocker run --rm \\\n  -v /var/run/docker.sock:/var/run/docker.sock \\\n  webgrip/rust-releaser:latest \\\n  docker version\n</code></pre></p>"},{"location":"docker-images/rust-releaser/#performance-issues","title":"Performance Issues","text":"<p>Slow builds <pre><code># Use cached layers\ndocker run --rm \\\n  -v $(pwd):/workspace \\\n  -v /usr/local/cargo/registry:/usr/local/cargo/registry \\\n  webgrip/rust-releaser:latest \\\n  cargo build --release\n</code></pre></p> <p>Large artifacts <pre><code># Strip debug symbols\ncross build --release --target x86_64-unknown-linux-gnu\nstrip target/x86_64-unknown-linux-gnu/release/myapp\n</code></pre></p>"},{"location":"docker-images/rust-releaser/#security-considerations","title":"Security Considerations","text":""},{"location":"docker-images/rust-releaser/#token-management","title":"Token Management","text":"<pre><code># Use short-lived tokens\nexport GITHUB_TOKEN=$(gh auth token --expire 1h)\n\n# Rotate registry tokens regularly\ncargo logout\ncargo login $NEW_CARGO_TOKEN\n</code></pre>"},{"location":"docker-images/rust-releaser/#binary-verification","title":"Binary Verification","text":"<pre><code># Generate checksums for releases\nsha256sum target/release/myapp &gt; myapp.sha256\n</code></pre>"},{"location":"docker-images/rust-releaser/#container-security","title":"Container Security","text":"<pre><code># Scan container images\ndocker run --rm \\\n  -v /var/run/docker.sock:/var/run/docker.sock \\\n  webgrip/rust-releaser:latest \\\n  docker scan myapp:latest\n</code></pre>"},{"location":"docker-images/rust-releaser/#customization","title":"Customization","text":""},{"location":"docker-images/rust-releaser/#project-specific-releaser","title":"Project-specific Releaser","text":"<pre><code># Dockerfile.custom\nFROM webgrip/rust-releaser:latest\n\n# Add project-specific tools\nRUN cargo install cargo-audit cargo-deny\n\n# Custom release configuration\nCOPY .releaserc.json /workspace/\nCOPY Cross.toml /workspace/\n\n# Custom entry point\nCOPY release-script.sh /usr/local/bin/\nENTRYPOINT [\"/usr/local/bin/release-script.sh\"]\n</code></pre>"},{"location":"docker-images/rust-releaser/#extended-target-support","title":"Extended Target Support","text":"<pre><code>FROM webgrip/rust-releaser:latest\n\n# Add additional cross-compilation targets\nRUN rustup target add \\\n    armv7-unknown-linux-gnueabihf \\\n    mips64-unknown-linux-gnuabi64 \\\n    powerpc64-unknown-linux-gnu\n\n# Install additional cross-compilation tools\nRUN apt-get update &amp;&amp; apt-get install -y \\\n    gcc-arm-linux-gnueabihf \\\n    gcc-mips64-linux-gnuabi64 \\\n    gcc-powerpc64-linux-gnu\n</code></pre>"},{"location":"docker-images/rust-releaser/#related-documentation","title":"Related Documentation","text":"<ul> <li>Architecture Overview - Release automation in our infrastructure</li> <li>Rust CI Runner - Development and testing environment</li> <li>CI/CD Pipeline - Automated building and releasing</li> <li>GitHub Runner - Self-hosted runner for releases</li> </ul>"},{"location":"docker-images/rust-releaser/#maintenance","title":"Maintenance","text":""},{"location":"docker-images/rust-releaser/#update-schedule","title":"Update Schedule","text":"<ul> <li>semantic-release: Updated monthly for new features and security</li> <li>Rust toolchain: Updated quarterly following Rust release schedule</li> <li>Node.js: Updated when new LTS versions available</li> <li>Cross-compilation tools: Updated as needed for platform support</li> </ul>"},{"location":"docker-images/rust-releaser/#version-compatibility","title":"Version Compatibility","text":"Image Version semantic-release Rust Node.js Status <code>latest</code> Latest Stable 22 LTS Active <code>v2.x</code> v2.x Stable 22 LTS Supported <code>v1.x</code> v1.x Stable 20 LTS Deprecated <p>Assumption: Release workflows primarily target GitHub and crates.io. Support for additional registries (private registries, alternative Git providers) may require additional configuration. Validation needed: Confirm release target requirements with development teams.</p> <p>Maintainer: WebGrip Ops Team Source: <code>ops/docker/rust-releaser/Dockerfile</code> Registry: webgrip/rust-releaser</p>"},{"location":"operations/building-locally/","title":"Building Locally","text":"<p>Guide for building and testing Docker images locally during development and maintenance.</p>"},{"location":"operations/building-locally/#overview","title":"Overview","text":"<p>Local building capabilities enable:</p> <ul> <li>\u2705 Development iteration without pushing to GitHub</li> <li>\u2705 Testing changes before committing to version control</li> <li>\u2705 Debugging build issues with full access to build context</li> <li>\u2705 Custom image variants for specific use cases</li> <li>\u2705 Offline development when internet connectivity is limited</li> </ul>"},{"location":"operations/building-locally/#prerequisites","title":"Prerequisites","text":""},{"location":"operations/building-locally/#required-tools","title":"Required Tools","text":"Tool Purpose Installation Docker Container building and runtime Install Docker Docker Compose Multi-container orchestration Included with Docker Desktop Git Source code management Install Git Make (optional) Build automation <code>sudo apt install make</code> (Linux)"},{"location":"operations/building-locally/#system-requirements","title":"System Requirements","text":"<ul> <li>CPU: 2+ cores recommended for parallel builds</li> <li>RAM: 4GB minimum, 8GB recommended</li> <li>Storage: 20GB free space for Docker images and build cache</li> <li>Network: Reliable internet for base image downloads</li> </ul>"},{"location":"operations/building-locally/#repository-setup","title":"Repository Setup","text":""},{"location":"operations/building-locally/#clone-repository","title":"Clone Repository","text":"<pre><code># Clone the infrastructure repository\ngit clone https://github.com/webgrip/infrastructure.git\ncd infrastructure\n\n# Verify directory structure\nls -la ops/docker/\n</code></pre>"},{"location":"operations/building-locally/#environment-setup","title":"Environment Setup","text":"<pre><code># Create local environment file (optional)\ncat &gt; .env.local &lt;&lt; EOF\nDOCKER_REGISTRY=localhost:5000\nBUILD_ARGS=\"--no-cache\"\nPARALLEL_BUILDS=4\nEOF\n\n# Source environment\nsource .env.local\n</code></pre>"},{"location":"operations/building-locally/#basic-building","title":"Basic Building","text":""},{"location":"operations/building-locally/#single-image-build","title":"Single Image Build","text":"<pre><code># Build specific image\ndocker build -t webgrip/rust-ci-runner:local ops/docker/rust-ci-runner/\n\n# Build with specific tag\ndocker build -t my-rust-ci:test ops/docker/rust-ci-runner/\n\n# Build with build arguments\ndocker build \\\n  --build-arg RUST_VERSION=1.86.0 \\\n  -t webgrip/rust-ci-runner:1.86 \\\n  ops/docker/rust-ci-runner/\n</code></pre>"},{"location":"operations/building-locally/#using-docker-compose","title":"Using Docker Compose","text":"<pre><code># Build all images defined in docker-compose.yml\ndocker-compose build\n\n# Build specific service\ndocker-compose build rust-ci-runner\n\n# Build with no cache\ndocker-compose build --no-cache\n\n# Build in parallel\ndocker-compose build --parallel\n</code></pre>"},{"location":"operations/building-locally/#build-context-verification","title":"Build Context Verification","text":"<pre><code># Check build context size\ndu -sh ops/docker/rust-ci-runner/\n\n# List files in build context\nfind ops/docker/rust-ci-runner/ -type f\n\n# Verify Dockerfile syntax\ndocker build --dry-run ops/docker/rust-ci-runner/\n</code></pre>"},{"location":"operations/building-locally/#advanced-building","title":"Advanced Building","text":""},{"location":"operations/building-locally/#multi-stage-build-optimization","title":"Multi-stage Build Optimization","text":"<pre><code># Example optimization for development\nFROM rust:1.87.0-slim-bookworm AS development\n# Add development-specific tools\nRUN apt-get update &amp;&amp; apt-get install -y \\\n    gdb lldb strace valgrind\n\nFROM rust:1.87.0-slim-bookworm AS production\n# Production optimizations\nRUN apt-get update &amp;&amp; apt-get install -y --no-install-recommends \\\n    ca-certificates &amp;&amp; \\\n    rm -rf /var/lib/apt/lists/*\n</code></pre> <pre><code># Build specific stage\ndocker build --target development -t rust-ci:dev ops/docker/rust-ci-runner/\ndocker build --target production -t rust-ci:prod ops/docker/rust-ci-runner/\n</code></pre>"},{"location":"operations/building-locally/#build-arguments-and-customization","title":"Build Arguments and Customization","text":"<pre><code># Common build arguments\ndocker build \\\n  --build-arg RUST_VERSION=1.87.0 \\\n  --build-arg NODE_VERSION=20 \\\n  --build-arg DEBIAN_FRONTEND=noninteractive \\\n  -t webgrip/rust-ci-runner:custom \\\n  ops/docker/rust-ci-runner/\n\n# Development build with debug symbols\ndocker build \\\n  --build-arg BUILD_TYPE=debug \\\n  --build-arg OPTIMIZATION_LEVEL=0 \\\n  -t webgrip/rust-ci-runner:debug \\\n  ops/docker/rust-ci-runner/\n</code></pre>"},{"location":"operations/building-locally/#build-cache-management","title":"Build Cache Management","text":"<pre><code># Build with cache from registry\ndocker build \\\n  --cache-from webgrip/rust-ci-runner:latest \\\n  -t webgrip/rust-ci-runner:local \\\n  ops/docker/rust-ci-runner/\n\n# Use BuildKit for advanced caching\nexport DOCKER_BUILDKIT=1\ndocker build \\\n  --build-arg BUILDKIT_INLINE_CACHE=1 \\\n  -t webgrip/rust-ci-runner:cached \\\n  ops/docker/rust-ci-runner/\n\n# Clean build cache\ndocker builder prune\ndocker system prune -a\n</code></pre>"},{"location":"operations/building-locally/#build-automation","title":"Build Automation","text":""},{"location":"operations/building-locally/#makefile-for-build-automation","title":"Makefile for Build Automation","text":"<pre><code># Makefile for local building\nIMAGES := rust-ci-runner github-runner helm-deploy playwright-runner act-runner rust-releaser\nREGISTRY := webgrip\nTAG := local\n\n.PHONY: all build-% clean test-% push-% help\n\n# Build all images\nall: $(addprefix build-,$(IMAGES))\n\n# Build specific image\nbuild-%:\n    @echo \"Building $* image...\"\n    docker build -t $(REGISTRY)/$*:$(TAG) ops/docker/$*/\n    @echo \"\u2705 Built $(REGISTRY)/$*:$(TAG)\"\n\n# Test specific image\ntest-%: build-%\n    @echo \"Testing $* image...\"\n    docker run --rm $(REGISTRY)/$*:$(TAG) --version || echo \"\u2705 $* image works\"\n\n# Push to local registry\npush-%: build-%\n    docker push $(REGISTRY)/$*:$(TAG)\n\n# Clean up local images\nclean:\n    docker images | grep \"$(REGISTRY)\" | grep \"$(TAG)\" | awk '{print $$3}' | xargs -r docker rmi\n\n# Build with custom tag\ntag:\n    $(eval TAG := $(shell git rev-parse --short HEAD))\n    @echo \"Building with tag: $(TAG)\"\n\n# Help target\nhelp:\n    @echo \"Available targets:\"\n    @echo \"  all              - Build all images\"\n    @echo \"  build-&lt;image&gt;    - Build specific image\"\n    @echo \"  test-&lt;image&gt;     - Test specific image\"\n    @echo \"  push-&lt;image&gt;     - Push to registry\"\n    @echo \"  clean            - Clean up local images\"\n    @echo \"  tag              - Build with git SHA tag\"\n    @echo \"\"\n    @echo \"Available images: $(IMAGES)\"\n    @echo \"\"\n    @echo \"Examples:\"\n    @echo \"  make build-rust-ci-runner\"\n    @echo \"  make test-playwright-runner\"\n    @echo \"  make TAG=dev build-helm-deploy\"\n\n# Usage examples\nbuild-dev: TAG=dev\nbuild-dev: all\n\nbuild-test: TAG=test\nbuild-test: all\n</code></pre> <p>Usage: <pre><code># Build all images\nmake all\n\n# Build specific image\nmake build-rust-ci-runner\n\n# Build and test\nmake test-playwright-runner\n\n# Build with custom tag\nmake TAG=dev build-helm-deploy\n\n# Clean up\nmake clean\n</code></pre></p>"},{"location":"operations/building-locally/#build-script-automation","title":"Build Script Automation","text":"<pre><code>#!/bin/bash\n# scripts/build-local.sh - Automated local building\n\nset -euo pipefail\n\n# Configuration\nREGISTRY=\"${DOCKER_REGISTRY:-webgrip}\"\nTAG=\"${BUILD_TAG:-local}\"\nPARALLEL=\"${PARALLEL_BUILDS:-2}\"\nBUILD_ARGS=\"${BUILD_ARGS:-}\"\n\n# Colors for output\nRED='\\033[0;31m'\nGREEN='\\033[0;32m'\nYELLOW='\\033[1;33m'\nNC='\\033[0m' # No Color\n\n# Logging functions\nlog_info() { echo -e \"${GREEN}[INFO]${NC} $1\"; }\nlog_warn() { echo -e \"${YELLOW}[WARN]${NC} $1\"; }\nlog_error() { echo -e \"${RED}[ERROR]${NC} $1\"; }\n\n# Image definitions\ndeclare -A IMAGES=(\n    [\"rust-ci-runner\"]=\"ops/docker/rust-ci-runner\"\n    [\"github-runner\"]=\"ops/docker/github-runner\"\n    [\"helm-deploy\"]=\"ops/docker/helm-deploy\"\n    [\"playwright-runner\"]=\"ops/docker/playwright-runner\"\n    [\"act-runner\"]=\"ops/docker/act-runner\"\n    [\"rust-releaser\"]=\"ops/docker/rust-releaser\"\n)\n\n# Build single image\nbuild_image() {\n    local name=$1\n    local path=$2\n    local full_tag=\"${REGISTRY}/${name}:${TAG}\"\n\n    log_info \"Building $name -&gt; $full_tag\"\n\n    if docker build $BUILD_ARGS -t \"$full_tag\" \"$path\"; then\n        log_info \"\u2705 Successfully built $full_tag\"\n        return 0\n    else\n        log_error \"\u274c Failed to build $full_tag\"\n        return 1\n    fi\n}\n\n# Test image\ntest_image() {\n    local name=$1\n    local full_tag=\"${REGISTRY}/${name}:${TAG}\"\n\n    log_info \"Testing $full_tag\"\n\n    case $name in\n        \"rust-ci-runner\")\n            docker run --rm \"$full_tag\" rustc --version &gt;/dev/null\n            ;;\n        \"github-runner\")\n            docker run --rm \"$full_tag\" php --version &gt;/dev/null\n            ;;\n        \"helm-deploy\")\n            docker run --rm \"$full_tag\" helm version &gt;/dev/null\n            ;;\n        \"playwright-runner\")\n            docker run --rm \"$full_tag\" npx playwright --version &gt;/dev/null\n            ;;\n        \"act-runner\")\n            docker run --rm \"$full_tag\" act --version &gt;/dev/null\n            ;;\n        \"rust-releaser\")\n            docker run --rm \"$full_tag\" node --version &gt;/dev/null\n            ;;\n    esac\n\n    if [ $? -eq 0 ]; then\n        log_info \"\u2705 $full_tag passed basic test\"\n        return 0\n    else\n        log_error \"\u274c $full_tag failed basic test\"\n        return 1\n    fi\n}\n\n# Main function\nmain() {\n    local target_images=()\n    local test_after_build=false\n    local clean_before_build=false\n\n    # Parse arguments\n    while [[ $# -gt 0 ]]; do\n        case $1 in\n            --test)\n                test_after_build=true\n                shift\n                ;;\n            --clean)\n                clean_before_build=true\n                shift\n                ;;\n            --parallel)\n                PARALLEL=\"$2\"\n                shift 2\n                ;;\n            --tag)\n                TAG=\"$2\"\n                shift 2\n                ;;\n            --all)\n                target_images=(${!IMAGES[@]})\n                shift\n                ;;\n            *)\n                if [[ -n \"${IMAGES[$1]:-}\" ]]; then\n                    target_images+=(\"$1\")\n                else\n                    log_error \"Unknown image: $1\"\n                    log_info \"Available images: ${!IMAGES[*]}\"\n                    exit 1\n                fi\n                shift\n                ;;\n        esac\n    done\n\n    # Default to all images if none specified\n    if [[ ${#target_images[@]} -eq 0 ]]; then\n        target_images=(${!IMAGES[@]})\n    fi\n\n    log_info \"Building images: ${target_images[*]}\"\n    log_info \"Registry: $REGISTRY\"\n    log_info \"Tag: $TAG\"\n\n    # Clean if requested\n    if [[ \"$clean_before_build\" == \"true\" ]]; then\n        log_info \"Cleaning Docker cache...\"\n        docker system prune -f\n    fi\n\n    # Build images\n    local failed_builds=()\n    for image in \"${target_images[@]}\"; do\n        if ! build_image \"$image\" \"${IMAGES[$image]}\"; then\n            failed_builds+=(\"$image\")\n        fi\n\n        # Test if requested\n        if [[ \"$test_after_build\" == \"true\" ]]; then\n            test_image \"$image\" || failed_builds+=(\"$image-test\")\n        fi\n    done\n\n    # Report results\n    if [[ ${#failed_builds[@]} -eq 0 ]]; then\n        log_info \"\ud83c\udf89 All builds completed successfully!\"\n    else\n        log_error \"\u274c Failed builds: ${failed_builds[*]}\"\n        exit 1\n    fi\n}\n\n# Usage function\nusage() {\n    cat &lt;&lt; EOF\nUsage: $0 [OPTIONS] [IMAGES...]\n\nBuild Docker images locally.\n\nOPTIONS:\n    --test              Test images after building\n    --clean             Clean Docker cache before building\n    --parallel N        Number of parallel builds (default: $PARALLEL)\n    --tag TAG           Tag for built images (default: $TAG)\n    --all               Build all images\n\nIMAGES:\n    ${!IMAGES[*]}\n\nEXAMPLES:\n    $0 --all --test                     # Build and test all images\n    $0 rust-ci-runner playwright-runner # Build specific images\n    $0 --tag dev --clean helm-deploy    # Build with custom tag and clean cache\n\nENVIRONMENT VARIABLES:\n    DOCKER_REGISTRY     Docker registry (default: webgrip)\n    BUILD_TAG           Default tag (default: local)\n    PARALLEL_BUILDS     Parallel builds (default: 2)\n    BUILD_ARGS          Additional docker build args\nEOF\n}\n\n# Handle help\nif [[ \"${1:-}\" == \"--help\" ]] || [[ \"${1:-}\" == \"-h\" ]]; then\n    usage\n    exit 0\nfi\n\n# Run main function\nmain \"$@\"\n</code></pre> <p>Usage: <pre><code># Make script executable\nchmod +x scripts/build-local.sh\n\n# Build all images\n./scripts/build-local.sh --all\n\n# Build and test specific images\n./scripts/build-local.sh --test rust-ci-runner playwright-runner\n\n# Build with custom tag and clean cache\n./scripts/build-local.sh --tag dev --clean helm-deploy\n\n# Build all with custom configuration\nBUILD_TAG=dev PARALLEL_BUILDS=4 ./scripts/build-local.sh --all --test\n</code></pre></p>"},{"location":"operations/building-locally/#testing-built-images","title":"Testing Built Images","text":""},{"location":"operations/building-locally/#basic-functionality-testing","title":"Basic Functionality Testing","text":"<pre><code># Test Rust CI Runner\ndocker run --rm webgrip/rust-ci-runner:local rustc --version\ndocker run --rm webgrip/rust-ci-runner:local cargo --version\ndocker run --rm webgrip/rust-ci-runner:local cargo audit --version\n\n# Test Playwright Runner\ndocker run --rm webgrip/playwright-runner:local npx playwright --version\ndocker run --rm webgrip/playwright-runner:local php --version\n\n# Test Helm Deploy\ndocker run --rm webgrip/helm-deploy:local helm version\ndocker run --rm webgrip/helm-deploy:local kubectl version --client\n\n# Test ACT Runner\ndocker run --rm webgrip/act-runner:local act --version\n\n# Test GitHub Runner (requires setup)\ndocker run --rm webgrip/github-runner:local php --version\ndocker run --rm webgrip/github-runner:local composer --version\n\n# Test Rust Releaser\ndocker run --rm webgrip/rust-releaser:local node --version\ndocker run --rm webgrip/rust-releaser:local npx semantic-release --version\n</code></pre>"},{"location":"operations/building-locally/#integration-testing","title":"Integration Testing","text":"<pre><code># Test volume mounting\ndocker run --rm \\\n  -v $(pwd):/workspace \\\n  -w /workspace \\\n  webgrip/rust-ci-runner:local \\\n  bash -c \"ls -la &amp;&amp; rustc --version\"\n\n# Test network connectivity\ndocker run --rm webgrip/rust-ci-runner:local \\\n  bash -c \"curl -s https://crates.io | head -5\"\n\n# Test build functionality\nmkdir -p /tmp/test-rust-project\ncd /tmp/test-rust-project\ncargo init --name test-app\n\ndocker run --rm \\\n  -v $(pwd):/workspace \\\n  -w /workspace \\\n  webgrip/rust-ci-runner:local \\\n  bash -c \"cargo build &amp;&amp; cargo test\"\n</code></pre>"},{"location":"operations/building-locally/#performance-testing","title":"Performance Testing","text":"<pre><code># Measure build time\ntime docker build -t test-build ops/docker/rust-ci-runner/\n\n# Measure image size\ndocker images | grep rust-ci-runner\n\n# Test container startup time\ntime docker run --rm webgrip/rust-ci-runner:local echo \"Hello World\"\n\n# Memory usage test\ndocker run --rm \\\n  --memory=1g \\\n  webgrip/rust-ci-runner:local \\\n  bash -c \"echo 'Memory test passed'\"\n</code></pre>"},{"location":"operations/building-locally/#troubleshooting","title":"Troubleshooting","text":""},{"location":"operations/building-locally/#build-failures","title":"Build Failures","text":"<p>Out of disk space <pre><code># Check disk usage\ndf -h\ndocker system df\n\n# Clean up\ndocker system prune -a --volumes\ndocker builder prune --all\n</code></pre></p> <p>Network timeouts <pre><code># Use build args for proxy\ndocker build \\\n  --build-arg HTTP_PROXY=http://proxy:8080 \\\n  --build-arg HTTPS_PROXY=http://proxy:8080 \\\n  -t webgrip/rust-ci-runner:local \\\n  ops/docker/rust-ci-runner/\n</code></pre></p> <p>Permission errors <pre><code># Check Docker daemon access\ndocker info\n\n# Fix permissions (Linux)\nsudo usermod -aG docker $USER\nnewgrp docker\n</code></pre></p> <p>Base image pull failures <pre><code># Pre-pull base images\ndocker pull rust:1.87.0-slim-bookworm\ndocker pull alpine:3.22.1\ndocker pull mcr.microsoft.com/playwright:v1.51.0-noble\n\n# Use local registry mirror\ndocker build --pull=false -t local-build ops/docker/rust-ci-runner/\n</code></pre></p>"},{"location":"operations/building-locally/#runtime-issues","title":"Runtime Issues","text":"<p>Container won't start <pre><code># Debug container\ndocker run -it --entrypoint=/bin/bash webgrip/rust-ci-runner:local\n\n# Check logs\ndocker logs &lt;container-id&gt;\n\n# Inspect image\ndocker inspect webgrip/rust-ci-runner:local\n</code></pre></p> <p>Tool not found <pre><code># Verify PATH\ndocker run --rm webgrip/rust-ci-runner:local echo $PATH\n\n# Check installed tools\ndocker run --rm webgrip/rust-ci-runner:local which cargo rustc\n\n# Debug package installation\ndocker run --rm webgrip/rust-ci-runner:local dpkg -l | grep rust\n</code></pre></p>"},{"location":"operations/building-locally/#build-performance-issues","title":"Build Performance Issues","text":"<p>Slow builds <pre><code># Use BuildKit\nexport DOCKER_BUILDKIT=1\n\n# Parallel builds\ndocker-compose build --parallel\n\n# Use build cache\ndocker build --cache-from webgrip/rust-ci-runner:latest\n</code></pre></p> <p>Layer cache misses <pre><code># Optimize Dockerfile layer order\n# Place frequently changing content at the end\n\n# Use .dockerignore\necho \"target/\" &gt;&gt; ops/docker/rust-ci-runner/.dockerignore\necho \"*.log\" &gt;&gt; ops/docker/rust-ci-runner/.dockerignore\n</code></pre></p>"},{"location":"operations/building-locally/#best-practices","title":"Best Practices","text":""},{"location":"operations/building-locally/#development-workflow","title":"Development Workflow","text":"<ol> <li>Small, incremental changes: Test each change incrementally</li> <li>Use development tags: Tag images with descriptive names (<code>dev</code>, <code>test</code>, <code>feature-x</code>)</li> <li>Clean up regularly: Remove unused images and containers</li> <li>Use build cache: Leverage Docker's layer caching for faster builds</li> </ol>"},{"location":"operations/building-locally/#security-considerations","title":"Security Considerations","text":"<pre><code># Scan images for vulnerabilities\ndocker run --rm -v /var/run/docker.sock:/var/run/docker.sock \\\n  aquasec/trivy image webgrip/rust-ci-runner:local\n\n# Check for secrets in images\ndocker run --rm -v /var/run/docker.sock:/var/run/docker.sock \\\n  wagoodman/dive webgrip/rust-ci-runner:local\n</code></pre>"},{"location":"operations/building-locally/#resource-management","title":"Resource Management","text":"<pre><code># Monitor resource usage\ndocker stats\n\n# Set resource limits\ndocker run --memory=2g --cpus=1 webgrip/rust-ci-runner:local\n\n# Use multi-stage builds to reduce image size\n# Optimize package installation order\n</code></pre>"},{"location":"operations/building-locally/#integration-with-development-tools","title":"Integration with Development Tools","text":""},{"location":"operations/building-locally/#vs-code-integration","title":"VS Code Integration","text":"<pre><code>// .vscode/tasks.json\n{\n  \"version\": \"2.0.0\",\n  \"tasks\": [\n    {\n      \"label\": \"Build Rust CI Runner\",\n      \"type\": \"shell\",\n      \"command\": \"docker\",\n      \"args\": [\n        \"build\",\n        \"-t\", \"webgrip/rust-ci-runner:dev\",\n        \"ops/docker/rust-ci-runner/\"\n      ],\n      \"group\": \"build\",\n      \"presentation\": {\n        \"reveal\": \"always\",\n        \"panel\": \"new\"\n      }\n    },\n    {\n      \"label\": \"Test Built Image\",\n      \"type\": \"shell\",\n      \"command\": \"docker\",\n      \"args\": [\n        \"run\", \"--rm\",\n        \"webgrip/rust-ci-runner:dev\",\n        \"rustc\", \"--version\"\n      ],\n      \"dependsOn\": \"Build Rust CI Runner\",\n      \"group\": \"test\"\n    }\n  ]\n}\n</code></pre>"},{"location":"operations/building-locally/#ide-docker-plugin","title":"IDE Docker Plugin","text":"<p>Most IDEs support Docker plugins for: - Building images directly from IDE - Running containers with debugging - Viewing container logs - Managing Docker resources</p>"},{"location":"operations/building-locally/#related-documentation","title":"Related Documentation","text":"<ul> <li>Contributing Images - How to contribute new images</li> <li>Maintenance - Ongoing maintenance procedures</li> <li>Docker Images - Individual image documentation</li> <li>CI/CD Pipeline - Automated building process</li> </ul> <p>Assumption: Developers have local Docker installations and sufficient system resources for building container images. Network connectivity requirements may vary based on base image sizes and dependencies. Validation needed: Confirm local development environment standards and resource requirements.</p> <p>Maintainer: WebGrip Ops Team Scripts: Available in repository <code>scripts/</code> directory Support: GitHub Issues</p>"},{"location":"operations/contributing-images/","title":"Contributing Images","text":"<p>Guide for contributing new Docker images or improving existing ones in the WebGrip infrastructure repository.</p>"},{"location":"operations/contributing-images/#overview","title":"Overview","text":"<p>Contributing to our infrastructure helps:</p> <ul> <li>\u2705 Expand capabilities with new development tools and environments</li> <li>\u2705 Improve existing images with performance optimizations and feature additions</li> <li>\u2705 Share knowledge through documentation and best practices</li> <li>\u2705 Maintain quality through consistent standards and review processes</li> <li>\u2705 Support the community by solving common development challenges</li> </ul>"},{"location":"operations/contributing-images/#contribution-process","title":"Contribution Process","text":""},{"location":"operations/contributing-images/#1-planning-phase","title":"1. Planning Phase","text":"<pre><code>flowchart TD\n    IDEA[Image Idea] --&gt; RESEARCH[Research Existing Solutions]\n    RESEARCH --&gt; PROPOSAL[Create Proposal Issue]\n    PROPOSAL --&gt; DISCUSSION[Community Discussion]\n    DISCUSSION --&gt; APPROVED{Approved?}\n    APPROVED --&gt;|Yes| DESIGN[Design Phase]\n    APPROVED --&gt;|No| REVISE[Revise Proposal]\n    REVISE --&gt; DISCUSSION</code></pre> <p>Before starting development:</p> <ol> <li>Check existing images: Review current images to avoid duplication</li> <li>Create an issue: Use our issue template</li> <li>Discuss approach: Engage with the team on implementation strategy</li> <li>Get approval: Wait for maintainer approval before significant work</li> </ol>"},{"location":"operations/contributing-images/#2-development-phase","title":"2. Development Phase","text":"<pre><code>flowchart LR\n    FORK[Fork Repository] --&gt; BRANCH[Create Feature Branch]\n    BRANCH --&gt; DEVELOP[Develop Image]\n    DEVELOP --&gt; TEST[Local Testing]\n    TEST --&gt; DOCUMENT[Documentation]\n    DOCUMENT --&gt; PR[Create Pull Request]\n    PR --&gt; REVIEW[Code Review]\n    REVIEW --&gt; MERGE[Merge to Main]</code></pre>"},{"location":"operations/contributing-images/#creating-a-new-image","title":"Creating a New Image","text":""},{"location":"operations/contributing-images/#directory-structure","title":"Directory Structure","text":"<pre><code># Create new image directory\nmkdir -p ops/docker/my-new-image\n\n# Standard structure\nops/docker/my-new-image/\n\u251c\u2500\u2500 Dockerfile              # Main build file\n\u251c\u2500\u2500 README.md              # Image-specific documentation\n\u251c\u2500\u2500 .dockerignore          # Build context exclusions\n\u251c\u2500\u2500 entrypoint.sh          # Custom entry point (if needed)\n\u251c\u2500\u2500 config/                # Configuration files\n\u2502   \u251c\u2500\u2500 tool.conf\n\u2502   \u2514\u2500\u2500 env.sh\n\u2514\u2500\u2500 scripts/               # Helper scripts\n    \u251c\u2500\u2500 setup.sh\n    \u2514\u2500\u2500 healthcheck.sh\n</code></pre>"},{"location":"operations/contributing-images/#dockerfile-best-practices","title":"Dockerfile Best Practices","text":""},{"location":"operations/contributing-images/#base-image-selection","title":"Base Image Selection","text":"<pre><code># Prefer official, minimal base images\nFROM node:20-alpine3.18        # Good: official + minimal\nFROM alpine:3.22.1             # Good: minimal\nFROM ubuntu:22.04              # OK: official but larger\nFROM my-custom-base:latest     # Avoid: non-standard base\n</code></pre>"},{"location":"operations/contributing-images/#multi-stage-build-pattern","title":"Multi-stage Build Pattern","text":"<pre><code># Build stage - install build dependencies\nFROM node:20-alpine3.18 AS build\n\nWORKDIR /build\n\n# Copy package files first (for layer caching)\nCOPY package*.json ./\nRUN npm ci --only=production\n\n# Copy source code\nCOPY . .\nRUN npm run build\n\n# Runtime stage - minimal runtime dependencies\nFROM node:20-alpine3.18 AS runtime\n\n# Create non-root user\nRUN addgroup -g 1001 -S appgroup &amp;&amp; \\\n    adduser -S appuser -u 1001 -G appgroup\n\n# Install runtime dependencies only\nRUN apk add --no-cache \\\n    ca-certificates \\\n    curl\n\n# Copy artifacts from build stage\nCOPY --from=build /build/dist /app\nCOPY --from=build /build/node_modules /app/node_modules\n\n# Set ownership and switch to non-root user\nRUN chown -R appuser:appgroup /app\nUSER appuser\n\nWORKDIR /app\nEXPOSE 3000\n\n# Health check\nHEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \\\n  CMD curl -f http://localhost:3000/health || exit 1\n\nENTRYPOINT [\"node\", \"server.js\"]\n</code></pre>"},{"location":"operations/contributing-images/#layer-optimization","title":"Layer Optimization","text":"<pre><code># \u274c BAD: Creates many layers\nRUN apt-get update\nRUN apt-get install -y curl\nRUN apt-get install -y git\nRUN apt-get install -y build-essential\nRUN rm -rf /var/lib/apt/lists/*\n\n# \u2705 GOOD: Single layer with cleanup\nRUN apt-get update &amp;&amp; \\\n    apt-get install -y --no-install-recommends \\\n      curl \\\n      git \\\n      build-essential &amp;&amp; \\\n    rm -rf /var/lib/apt/lists/*\n</code></pre>"},{"location":"operations/contributing-images/#build-arguments-and-environment","title":"Build Arguments and Environment","text":"<pre><code># Build-time configuration\nARG NODE_VERSION=20\nARG BUILD_DATE\nARG VERSION\n\n# Runtime environment\nENV NODE_ENV=production \\\n    PORT=3000 \\\n    LOG_LEVEL=info\n\n# Labels for metadata\nLABEL maintainer=\"WebGrip Ops Team &lt;ops@webgrip.nl&gt;\" \\\n      org.opencontainers.image.title=\"My Tool\" \\\n      org.opencontainers.image.description=\"Description of the tool\" \\\n      org.opencontainers.image.version=\"${VERSION}\" \\\n      org.opencontainers.image.created=\"${BUILD_DATE}\" \\\n      org.opencontainers.image.source=\"https://github.com/webgrip/infrastructure\"\n</code></pre>"},{"location":"operations/contributing-images/#example-creating-a-python-tools-image","title":"Example: Creating a Python Tools Image","text":"<pre><code># ops/docker/python-tools/Dockerfile\nARG PYTHON_VERSION=3.11\n\n# Build stage\nFROM python:${PYTHON_VERSION}-slim-bookworm AS build\n\n# System build dependencies\nRUN apt-get update &amp;&amp; \\\n    apt-get install -y --no-install-recommends \\\n      build-essential \\\n      curl \\\n      ca-certificates &amp;&amp; \\\n    rm -rf /var/lib/apt/lists/*\n\n# Python tools installation\nRUN pip install --no-cache-dir \\\n    poetry \\\n    black \\\n    flake8 \\\n    mypy \\\n    pytest \\\n    jupyter\n\n# Runtime stage\nFROM python:${PYTHON_VERSION}-slim-bookworm AS runtime\n\n# Runtime dependencies\nRUN apt-get update &amp;&amp; \\\n    apt-get install -y --no-install-recommends \\\n      git \\\n      curl \\\n      ca-certificates &amp;&amp; \\\n    rm -rf /var/lib/apt/lists/*\n\n# Copy Python tools from build stage\nCOPY --from=build /usr/local/lib/python3.11/site-packages /usr/local/lib/python3.11/site-packages\nCOPY --from=build /usr/local/bin /usr/local/bin\n\n# Create non-root user\nRUN groupadd -r python &amp;&amp; useradd -r -g python python\n\n# Set working directory\nWORKDIR /workspace\n\n# Switch to non-root user\nUSER python\n\n# Verify installation\nRUN python --version &amp;&amp; \\\n    poetry --version &amp;&amp; \\\n    black --version\n\nENTRYPOINT [\"bash\"]\n</code></pre>"},{"location":"operations/contributing-images/#configuration-files","title":"Configuration Files","text":""},{"location":"operations/contributing-images/#dockerignore","title":".dockerignore","text":"<pre><code># ops/docker/my-new-image/.dockerignore\n**/.git\n**/.gitignore\n**/README.md\n**/Dockerfile\n**/docker-compose*.yml\n**/.dockerignore\n**/.vscode\n**/.idea\n**/node_modules\n**/target\n**/*.log\n**/tmp\n**/temp\n.DS_Store\nThumbs.db\n</code></pre>"},{"location":"operations/contributing-images/#health-check-script","title":"Health Check Script","text":"<pre><code>#!/bin/bash\n# ops/docker/my-new-image/scripts/healthcheck.sh\n\nset -e\n\n# Check if main service is running\nif pgrep -f \"my-service\" &gt; /dev/null; then\n    echo \"Service is running\"\n    exit 0\nelse\n    echo \"Service is not running\"\n    exit 1\nfi\n</code></pre>"},{"location":"operations/contributing-images/#entry-point-script","title":"Entry Point Script","text":"<pre><code>#!/bin/bash\n# ops/docker/my-new-image/entrypoint.sh\n\nset -e\n\n# Setup function\nsetup_environment() {\n    echo \"Setting up environment...\"\n\n    # Create necessary directories\n    mkdir -p /workspace/.cache\n\n    # Set permissions\n    chown -R $(id -u):$(id -g) /workspace\n\n    echo \"Environment setup complete\"\n}\n\n# Main execution\nmain() {\n    setup_environment\n\n    # Execute the main command\n    exec \"$@\"\n}\n\n# Run main function\nmain \"$@\"\n</code></pre>"},{"location":"operations/contributing-images/#testing-new-images","title":"Testing New Images","text":""},{"location":"operations/contributing-images/#local-testing-checklist","title":"Local Testing Checklist","text":"<pre><code># 1. Build image\ndocker build -t webgrip/my-new-image:test ops/docker/my-new-image/\n\n# 2. Basic functionality test\ndocker run --rm webgrip/my-new-image:test --version\n\n# 3. Interactive test\ndocker run -it --rm webgrip/my-new-image:test bash\n\n# 4. Volume mounting test\ndocker run --rm -v $(pwd):/workspace -w /workspace \\\n  webgrip/my-new-image:test ls -la\n\n# 5. Environment variable test\ndocker run --rm -e TEST_VAR=hello \\\n  webgrip/my-new-image:test env | grep TEST_VAR\n\n# 6. Health check test (if implemented)\ndocker run -d --name test-container webgrip/my-new-image:test\nsleep 10\ndocker exec test-container /scripts/healthcheck.sh\ndocker rm -f test-container\n</code></pre>"},{"location":"operations/contributing-images/#automated-testing","title":"Automated Testing","text":"<pre><code>#!/bin/bash\n# ops/docker/my-new-image/test.sh\n\nset -e\n\nIMAGE_NAME=\"webgrip/my-new-image:test\"\nCONTAINER_NAME=\"test-my-new-image\"\n\necho \"\ud83e\uddea Testing $IMAGE_NAME\"\n\n# Build image\necho \"Building image...\"\ndocker build -t \"$IMAGE_NAME\" .\n\n# Test 1: Basic execution\necho \"Test 1: Basic execution\"\ndocker run --rm \"$IMAGE_NAME\" --version\n\n# Test 2: Tool availability\necho \"Test 2: Tool availability\"\ndocker run --rm \"$IMAGE_NAME\" which python3\ndocker run --rm \"$IMAGE_NAME\" python3 -c \"import sys; print(sys.version)\"\n\n# Test 3: Workspace functionality\necho \"Test 3: Workspace functionality\"\ndocker run --rm -v \"$(pwd):/workspace\" -w /workspace \\\n  \"$IMAGE_NAME\" ls -la\n\n# Test 4: Non-root user\necho \"Test 4: Non-root user\"\nUSER_ID=$(docker run --rm \"$IMAGE_NAME\" id -u)\nif [ \"$USER_ID\" = \"0\" ]; then\n    echo \"\u274c Container running as root\"\n    exit 1\nelse\n    echo \"\u2705 Container running as non-root user ($USER_ID)\"\nfi\n\n# Test 5: Security scan\necho \"Test 5: Security scan\"\nif command -v trivy &gt;/dev/null 2&gt;&amp;1; then\n    trivy image \"$IMAGE_NAME\"\nelse\n    echo \"\u26a0\ufe0f  Trivy not available, skipping security scan\"\nfi\n\necho \"\u2705 All tests passed!\"\n</code></pre>"},{"location":"operations/contributing-images/#integration-testing","title":"Integration Testing","text":"<pre><code># .github/workflows/test-new-image.yml\nname: Test New Image\non:\n  pull_request:\n    paths:\n      - 'ops/docker/my-new-image/**'\n\njobs:\n  test:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v4\n\n      - name: Build image\n        run: |\n          docker build -t test-image ops/docker/my-new-image/\n\n      - name: Run tests\n        run: |\n          cd ops/docker/my-new-image\n          chmod +x test.sh\n          ./test.sh\n\n      - name: Security scan\n        uses: aquasecurity/trivy-action@master\n        with:\n          image-ref: test-image\n          format: sarif\n          output: trivy-results.sarif\n\n      - name: Upload scan results\n        uses: github/codeql-action/upload-sarif@v2\n        with:\n          sarif_file: trivy-results.sarif\n</code></pre>"},{"location":"operations/contributing-images/#documentation-requirements","title":"Documentation Requirements","text":""},{"location":"operations/contributing-images/#image-documentation-template","title":"Image Documentation Template","text":"<pre><code># My New Image\n\nBrief description of what this image provides and its purpose.\n\n## Purpose\n\nThis image serves as...\n\n## Image Details\n\n| Property | Value |\n|----------|-------|\n| **Base Image** | `python:3.11-slim-bookworm` |\n| **Size** | ~200MB |\n| **Architecture** | AMD64 |\n| **Registry** | `webgrip/my-new-image` |\n| **Dockerfile** | [`ops/docker/my-new-image/Dockerfile`](../../../ops/docker/my-new-image/Dockerfile) |\n\n## Installed Tools\n\n| Tool | Version | Purpose |\n|------|---------|---------|\n| **Python** | 3.11 | Runtime environment |\n| **Poetry** | Latest | Dependency management |\n\n## Usage Examples\n\n### Basic Usage\n\n```bash\n# Run interactive session\ndocker run -it --rm webgrip/my-new-image:latest\n</code></pre>"},{"location":"operations/contributing-images/#project-development","title":"Project Development","text":"<pre><code># Mount project directory\ndocker run --rm -v $(pwd):/workspace -w /workspace \\\n  webgrip/my-new-image:latest \\\n  python main.py\n</code></pre>"},{"location":"operations/contributing-images/#configuration","title":"Configuration","text":""},{"location":"operations/contributing-images/#environment-variables","title":"Environment Variables","text":"Variable Default Purpose <code>PYTHON_ENV</code> <code>production</code> Python environment"},{"location":"operations/contributing-images/#troubleshooting","title":"Troubleshooting","text":""},{"location":"operations/contributing-images/#common-issues","title":"Common Issues","text":"<p>Tool not found <pre><code># Verify installation\ndocker run --rm webgrip/my-new-image:latest which python3\n</code></pre></p>"},{"location":"operations/contributing-images/#related-documentation","title":"Related Documentation","text":"<ul> <li>Building Locally</li> <li>Architecture Overview <pre><code>### Integration with Main Documentation\n\nUpdate the main index page to include your new image:\n\n```markdown\n# Add to docs/techdocs/docs/index.md\n\n| [My New Image](docker-images/my-new-image.md) | Python development tools | Complete Python toolchain for development |\n</code></pre></li> </ul> <p>Update the navigation in <code>mkdocs.yml</code>:</p> <pre><code># Add to docs/techdocs/mkdocs.yml\nnav:\n  - Docker Images:\n    - My New Image: docker-images/my-new-image.md\n</code></pre>"},{"location":"operations/contributing-images/#code-review-process","title":"Code Review Process","text":""},{"location":"operations/contributing-images/#pre-review-checklist","title":"Pre-Review Checklist","text":"<p>Before submitting a pull request:</p> <ul> <li>[ ] Dockerfile follows best practices (multi-stage, layer optimization, security)</li> <li>[ ] Image builds successfully locally</li> <li>[ ] Basic functionality tested with manual verification</li> <li>[ ] Documentation created following template</li> <li>[ ] Tests implemented (automated testing script)</li> <li>[ ] Security considerations addressed (non-root user, minimal packages)</li> <li>[ ] .dockerignore configured to exclude unnecessary files</li> <li>[ ] Build arguments documented and sensible defaults provided</li> </ul>"},{"location":"operations/contributing-images/#pull-request-template","title":"Pull Request Template","text":"<pre><code>## Description\nBrief description of the new image or changes.\n\n## Type of Change\n- [ ] New Docker image\n- [ ] Enhancement to existing image\n- [ ] Bug fix\n- [ ] Documentation update\n\n## Testing\n- [ ] Local build successful\n- [ ] Manual functionality testing complete\n- [ ] Automated tests pass\n- [ ] Security scan results reviewed\n\n## Documentation\n- [ ] Image documentation created/updated\n- [ ] Navigation updated in mkdocs.yml\n- [ ] Usage examples provided\n- [ ] Troubleshooting section included\n\n## Checklist\n- [ ] Dockerfile follows best practices\n- [ ] Image uses non-root user\n- [ ] Minimal package installation\n- [ ] Health check implemented (if applicable)\n- [ ] Entry point script provided (if needed)\n- [ ] .dockerignore configured\n\n## Additional Notes\nAny additional information about the implementation.\n</code></pre>"},{"location":"operations/contributing-images/#review-criteria","title":"Review Criteria","text":"<p>Reviewers will evaluate:</p> <ol> <li>Technical Quality</li> <li>Dockerfile best practices</li> <li>Security considerations</li> <li>Performance optimization</li> <li> <p>Error handling</p> </li> <li> <p>Documentation Quality</p> </li> <li>Completeness and accuracy</li> <li>Usage examples</li> <li>Troubleshooting guidance</li> <li> <p>Integration with existing docs</p> </li> <li> <p>Testing Coverage</p> </li> <li>Automated test coverage</li> <li>Manual testing verification</li> <li> <p>Error condition handling</p> </li> <li> <p>Maintainability</p> </li> <li>Code clarity and organization</li> <li>Update procedures</li> <li>Dependency management</li> </ol>"},{"location":"operations/contributing-images/#common-patterns","title":"Common Patterns","text":""},{"location":"operations/contributing-images/#development-tool-images","title":"Development Tool Images","text":"<p>For images containing development tools:</p> <pre><code># Pattern: Development environment\nFROM base-runtime AS development\n\n# Install development tools\nRUN package-manager install dev-tools\n\n# Configure development environment\nENV DEVELOPMENT_MODE=true\nCOPY dev-config/ /etc/dev-config/\n\n# Keep runtime optimized\nFROM base-runtime AS production\nCOPY --from=development /usr/local/bin /usr/local/bin\n</code></pre>"},{"location":"operations/contributing-images/#cicd-tool-images","title":"CI/CD Tool Images","text":"<p>For CI/CD pipeline tools:</p> <pre><code># Pattern: CI/CD tool\nFROM minimal-base\n\n# Install CI tools\nRUN install-ci-tools\n\n# Add pipeline scripts\nCOPY scripts/ /usr/local/bin/\nRUN chmod +x /usr/local/bin/*\n\n# Configure for automation\nENV AUTOMATION_MODE=true\nENTRYPOINT [\"/usr/local/bin/entrypoint.sh\"]\n</code></pre>"},{"location":"operations/contributing-images/#language-runtime-images","title":"Language Runtime Images","text":"<p>For language-specific runtimes:</p> <pre><code># Pattern: Language runtime\nFROM official-language-image\n\n# Add common tools\nRUN install-language-tools\n\n# Configure language environment\nENV LANGUAGE_ENV=production\n\n# Add helpful utilities\nCOPY utilities/ /usr/local/bin/\n</code></pre>"},{"location":"operations/contributing-images/#maintenance-responsibilities","title":"Maintenance Responsibilities","text":""},{"location":"operations/contributing-images/#after-contribution","title":"After Contribution","text":"<p>Once your image is accepted:</p> <ol> <li>Monitor issues related to your image</li> <li>Respond to bug reports in a timely manner</li> <li>Propose updates for security patches and new features</li> <li>Maintain documentation accuracy</li> <li>Participate in reviews of related changes</li> </ol>"},{"location":"operations/contributing-images/#long-term-ownership","title":"Long-term Ownership","text":"<p>Consider the long-term maintenance:</p> <ul> <li>Dependency updates: Regular updates for security and features</li> <li>Base image updates: Following upstream base image changes</li> <li>Documentation maintenance: Keeping docs current with changes</li> <li>Community support: Helping other users with issues</li> </ul>"},{"location":"operations/contributing-images/#related-documentation_1","title":"Related Documentation","text":"<ul> <li>Building Locally - Local development and testing</li> <li>Maintenance - Ongoing maintenance procedures</li> <li>Architecture Overview - How images fit into infrastructure</li> <li>CI/CD Pipeline - Automated building process</li> </ul> <p>Assumption: Contributors have basic Docker knowledge and can follow standard GitHub contribution workflows. Complex images may require additional review time and documentation. Validation needed: Confirm contribution workflow and review capacity with maintainer team.</p> <p>Maintainer: WebGrip Ops Team Issues: GitHub Issues Discussions: GitHub Discussions</p>"},{"location":"operations/maintaining-techdocs/","title":"Maintaining TechDocs","text":"<p>Guide for maintaining and updating the WebGrip Infrastructure TechDocs documentation.</p>"},{"location":"operations/maintaining-techdocs/#overview","title":"Overview","text":"<p>This guide helps contributors and maintainers keep the TechDocs documentation accurate, current, and valuable for all users of the WebGrip infrastructure.</p>"},{"location":"operations/maintaining-techdocs/#documentation-architecture","title":"Documentation Architecture","text":""},{"location":"operations/maintaining-techdocs/#information-architecture-mapping","title":"Information Architecture Mapping","text":"<p>The TechDocs structure directly maps to the repository organization:</p> <pre><code>Repository Structure          \u2192    Documentation Structure\n\u251c\u2500\u2500 ops/docker/              \u2192    \u251c\u2500\u2500 docker-images/\n\u2502   \u251c\u2500\u2500 rust-ci-runner/      \u2192    \u2502   \u251c\u2500\u2500 rust-ci-runner.md\n\u2502   \u251c\u2500\u2500 github-runner/       \u2192    \u2502   \u251c\u2500\u2500 github-runner.md\n\u2502   \u2514\u2500\u2500 ...                  \u2192    \u2502   \u2514\u2500\u2500 ...\n\u251c\u2500\u2500 .github/workflows/       \u2192    \u251c\u2500\u2500 cicd/\n\u251c\u2500\u2500 tests/playwright-runner/ \u2192    \u251c\u2500\u2500 testing/\n\u251c\u2500\u2500 docs/adrs/              \u2192    \u251c\u2500\u2500 adrs/\n\u2514\u2500\u2500 docs/techdocs/          \u2192    \u2514\u2500\u2500 (this documentation)\n</code></pre>"},{"location":"operations/maintaining-techdocs/#content-organization-principles","title":"Content Organization Principles","text":"<ol> <li>Service-First Structure: Documentation organized around Docker images as primary services</li> <li>Audience-Specific Sections: Content tailored for developers, DevOps engineers, and QA teams</li> <li>Cross-Linking: Extensive internal links for discoverability</li> <li>Source Citations: All claims link back to source code or configuration</li> <li>Assumption Tracking: Clear marking of inferences with validation suggestions</li> </ol>"},{"location":"operations/maintaining-techdocs/#adding-new-content","title":"Adding New Content","text":""},{"location":"operations/maintaining-techdocs/#new-docker-image-documentation","title":"New Docker Image Documentation","text":"<p>When adding a new Docker image:</p> <ol> <li> <p>Create image documentation file:    <pre><code># Create new file following naming convention\ntouch docs/techdocs/docs/docker-images/my-new-image.md\n</code></pre></p> </li> <li> <p>Update navigation:    <pre><code># Add to docs/techdocs/mkdocs.yml\nnav:\n  - Docker Images:\n    - My New Image: docker-images/my-new-image.md\n</code></pre></p> </li> <li> <p>Follow documentation template:</p> </li> <li>Purpose and scope</li> <li>Image details table</li> <li>Installed tools and versions</li> <li>Usage examples</li> <li>Configuration options</li> <li>Troubleshooting section</li> <li> <p>Related documentation links</p> </li> <li> <p>Update overview pages:</p> </li> <li>Add to main index page table</li> <li>Update architecture diagrams if needed</li> <li>Add cross-references from related pages</li> </ol>"},{"location":"operations/maintaining-techdocs/#new-feature-documentation","title":"New Feature Documentation","text":"<p>For new features or significant changes:</p> <ol> <li>Identify affected sections: Determine which existing pages need updates</li> <li>Create new pages if needed: For substantial new functionality</li> <li>Update cross-references: Ensure new content is discoverable</li> <li>Add to quick start: Include in relevant quick start workflows</li> <li>Update troubleshooting: Add common issues and solutions</li> </ol>"},{"location":"operations/maintaining-techdocs/#updating-existing-content","title":"Updating Existing Content","text":""},{"location":"operations/maintaining-techdocs/#regular-content-maintenance","title":"Regular Content Maintenance","text":"<p>Version Information: - Update tool versions in image documentation - Sync version matrices and compatibility tables - Update \"latest\" version references</p> <p>Links and References: - Validate internal links quarterly - Update external links when they change - Fix broken references to source code</p> <p>Examples and Code Snippets: - Test code examples for accuracy - Update deprecated command syntax - Refresh environment variables and configuration</p>"},{"location":"operations/maintaining-techdocs/#systematic-updates","title":"Systematic Updates","text":"<p>Quarterly Review Process:</p> <ol> <li> <p>Link Validation:    <pre><code># Run link checker on all documentation\ncd docs/techdocs/docs\nfind . -name \"*.md\" -exec markdown-link-check {} \\;\n</code></pre></p> </li> <li> <p>Content Audit:    <pre><code># Find outdated content markers\ngrep -r \"TODO\\|FIXME\\|XXX\" docs/techdocs/docs --include=\"*.md\"\n\n# Find assumption blocks for validation\ngrep -r \"&gt; Assumption:\" docs/techdocs/docs --include=\"*.md\"\n</code></pre></p> </li> <li> <p>Version Synchronization:    <pre><code># Update version information across all pages\n# This should be automated as part of maintenance scripts\n</code></pre></p> </li> </ol>"},{"location":"operations/maintaining-techdocs/#content-standards","title":"Content Standards","text":""},{"location":"operations/maintaining-techdocs/#writing-guidelines","title":"Writing Guidelines","text":"<p>Voice and Tone: - Use active voice and clear, direct language - Write for multiple skill levels with appropriate context - Include practical examples and real-world usage patterns</p> <p>Structure: - Use consistent heading hierarchy (H1 \u2192 H2 \u2192 H3) - Include purpose statement at the beginning of each page - Provide table of contents for long pages via MkDocs</p> <p>Technical Content: - Include complete, runnable examples - Provide troubleshooting for common issues - Link to source code and configuration files - Mark assumptions and inferences clearly</p>"},{"location":"operations/maintaining-techdocs/#documentation-patterns","title":"Documentation Patterns","text":"<p>Image Documentation Pattern: <pre><code># Image Name\n\nBrief description and purpose.\n\n## Image Details\n[Standard table with base image, size, registry, etc.]\n\n## Installed Tools\n[Table of tools, versions, and purposes]\n\n## Usage Examples\n[Practical, copy-paste examples]\n\n## Configuration\n[Environment variables, build args, etc.]\n\n## Troubleshooting\n[Common issues and solutions]\n\n## Related Documentation\n[Cross-links to related content]\n</code></pre></p> <p>Process Documentation Pattern: <pre><code># Process Name\n\nOverview and purpose.\n\n## Architecture\n[Mermaid diagram showing process flow]\n\n## Implementation\n[Detailed steps and configuration]\n\n## Examples\n[Real-world usage scenarios]\n\n## Troubleshooting\n[Common issues and debugging]\n</code></pre></p>"},{"location":"operations/maintaining-techdocs/#mermaid-diagram-standards","title":"Mermaid Diagram Standards","text":"<p>Use consistent Mermaid diagram patterns:</p> <pre><code>flowchart TD\n    START[Start Node] --&gt; PROCESS[Process Step]\n    PROCESS --&gt; DECISION{Decision Point}\n    DECISION --&gt;|Yes| SUCCESS[Success Path]\n    DECISION --&gt;|No| ERROR[Error Path]\n    ERROR --&gt; RETRY[Retry Logic]\n    RETRY --&gt; PROCESS\n    SUCCESS --&gt; END[End Node]</code></pre> <p>Diagram Guidelines: - Use descriptive node labels - Include decision points and error paths - Group related components in subgraphs - Use consistent color coding for different types of nodes - Keep diagrams focused and not overly complex</p>"},{"location":"operations/maintaining-techdocs/#building-and-testing","title":"Building and Testing","text":""},{"location":"operations/maintaining-techdocs/#local-development","title":"Local Development","text":"<pre><code># Install MkDocs and dependencies\npip install mkdocs mkdocs-material\n\n# Navigate to TechDocs directory\ncd docs/techdocs\n\n# Serve locally for development\nmkdocs serve\n\n# Build static site\nmkdocs build\n</code></pre>"},{"location":"operations/maintaining-techdocs/#content-validation","title":"Content Validation","text":"<pre><code># Validate Markdown syntax\nmarkdownlint docs/techdocs/docs/**/*.md\n\n# Check for broken links\nmarkdown-link-check docs/techdocs/docs/**/*.md\n\n# Validate MkDocs configuration\nmkdocs build --strict\n</code></pre>"},{"location":"operations/maintaining-techdocs/#integration-testing","title":"Integration Testing","text":"<p>The documentation builds automatically when: - Changes are pushed to the main branch - Pull requests modify documentation files - Backstage TechDocs refreshes content</p>"},{"location":"operations/maintaining-techdocs/#pr-review-guidelines","title":"PR Review Guidelines","text":""},{"location":"operations/maintaining-techdocs/#documentation-review-checklist","title":"Documentation Review Checklist","text":"<p>Content Quality: - [ ] Information is accurate and up-to-date - [ ] Examples are complete and runnable - [ ] Assumptions are clearly marked - [ ] Cross-references are appropriate and working</p> <p>Structure and Navigation: - [ ] Content follows established patterns - [ ] Navigation updates are included - [ ] New content is discoverable - [ ] Headings use proper hierarchy</p> <p>Technical Accuracy: - [ ] Code examples have been tested - [ ] Version information is current - [ ] Links to source code are correct - [ ] Configuration examples are valid</p> <p>Style and Consistency: - [ ] Writing follows voice and tone guidelines - [ ] Formatting is consistent with existing content - [ ] Mermaid diagrams follow established patterns - [ ] Table formatting is consistent</p>"},{"location":"operations/maintaining-techdocs/#review-process","title":"Review Process","text":"<ol> <li>Automated Checks: GitHub Actions validate links and build documentation</li> <li>Content Review: Reviewers check accuracy and completeness</li> <li>Style Review: Ensure consistency with existing documentation</li> <li>Technical Review: Validate examples and technical accuracy</li> <li>Integration Test: Verify documentation builds and deploys correctly</li> </ol>"},{"location":"operations/maintaining-techdocs/#troubleshooting","title":"Troubleshooting","text":""},{"location":"operations/maintaining-techdocs/#common-issues","title":"Common Issues","text":"<p>MkDocs Build Failures: <pre><code># Check configuration syntax\nmkdocs build --strict\n\n# Validate nav structure\npython -c \"import yaml; yaml.safe_load(open('mkdocs.yml'))\"\n</code></pre></p> <p>Link Validation Failures: <pre><code># Check specific file\nmarkdown-link-check docs/docker-images/rust-ci-runner.md\n\n# Fix common patterns\nsed -i 's/\\.\\.\\/\\.\\.\\/\\.\\.\\//..\\/..\\//' docs/**/*.md\n</code></pre></p> <p>Mermaid Diagram Issues: - Verify syntax using Mermaid Live Editor - Check for proper escaping in YAML configuration - Ensure diagram complexity doesn't exceed rendering limits</p>"},{"location":"operations/maintaining-techdocs/#getting-help","title":"Getting Help","text":"<p>Documentation Issues: - Create GitHub issue with <code>documentation</code> label - Include specific pages and sections affected - Provide suggestions for improvement when possible</p> <p>Technical Questions: - Use GitHub Discussions for questions about content - Tag relevant maintainers for urgent issues - Check existing issues before creating new ones</p>"},{"location":"operations/maintaining-techdocs/#automation-and-tools","title":"Automation and Tools","text":""},{"location":"operations/maintaining-techdocs/#maintenance-scripts","title":"Maintenance Scripts","text":"<p>The repository includes several scripts for documentation maintenance:</p> <pre><code># Validate all documentation\nscripts/validate-documentation.sh\n\n# Update version information\nscripts/sync-versions.sh\n\n# Check for broken links\nscripts/check-documentation-links.sh\n</code></pre>"},{"location":"operations/maintaining-techdocs/#github-actions","title":"GitHub Actions","text":"<p>Automated workflows handle: - Link validation on PRs - Documentation building and deployment - Content validation and formatting checks</p>"},{"location":"operations/maintaining-techdocs/#related-documentation","title":"Related Documentation","text":"<ul> <li>Contributing Images - How to document new images</li> <li>Maintenance - Overall repository maintenance procedures</li> <li>ADRs - Architectural decisions affecting documentation</li> </ul> <p>Maintenance Schedule: Documentation should be reviewed quarterly and updated whenever infrastructure changes. Use this guide to ensure consistency and quality across all TechDocs content.</p> <p>Maintainer: WebGrip Ops Team Source: <code>docs/techdocs/</code> Support: GitHub Issues with <code>documentation</code> label</p>"},{"location":"operations/maintenance/","title":"Maintenance","text":"<p>Comprehensive guide for maintaining and updating the WebGrip infrastructure Docker images and documentation.</p>"},{"location":"operations/maintenance/#overview","title":"Overview","text":"<p>Maintenance encompasses:</p> <ul> <li>\u2705 Regular updates to base images and dependencies</li> <li>\u2705 Security patch management and vulnerability remediation</li> <li>\u2705 Performance monitoring and optimization</li> <li>\u2705 Documentation maintenance to ensure accuracy and relevance</li> <li>\u2705 Quality assurance through automated testing and validation</li> </ul>"},{"location":"operations/maintenance/#maintenance-schedule","title":"Maintenance Schedule","text":""},{"location":"operations/maintenance/#weekly-tasks","title":"Weekly Tasks","text":"<pre><code>gantt\n    title Weekly Maintenance Schedule\n    dateFormat  YYYY-MM-DD\n    section Security\n    Security Scans    :2024-01-01, 1d\n    Vulnerability Review :2024-01-02, 1d\n    section Performance\n    Build Time Analysis :2024-01-03, 1d\n    section Quality\n    Documentation Review :2024-01-04, 1d\n    Link Validation     :2024-01-05, 1d</code></pre> <p>Every Monday: Security and vulnerability scanning <pre><code># Automated security scan script\n#!/bin/bash\nfor image in rust-ci-runner github-runner helm-deploy playwright-runner act-runner rust-releaser; do\n    echo \"Scanning webgrip/$image:latest\"\n    trivy image \"webgrip/$image:latest\" --severity HIGH,CRITICAL\ndone\n</code></pre></p> <p>Every Wednesday: Performance and build time monitoring <pre><code># Performance monitoring script\n#!/bin/bash\nfor image in rust-ci-runner github-runner helm-deploy playwright-runner act-runner rust-releaser; do\n    echo \"Testing $image performance...\"\n    time docker pull \"webgrip/$image:latest\"\n    time docker run --rm \"webgrip/$image:latest\" echo \"Performance test\"\ndone\n</code></pre></p> <p>Every Friday: Documentation review and link validation <pre><code># Documentation validation\ncd docs/techdocs/docs\nfind . -name \"*.md\" -exec markdown-link-check {} \\;\n</code></pre></p>"},{"location":"operations/maintenance/#monthly-tasks","title":"Monthly Tasks","text":"<p>First Monday of Month: Base image updates - Review base image security advisories - Test updated base images - Update Dockerfiles with new base image versions - Rebuild and test all images</p> <p>Second Monday: Dependency updates - Update language runtimes (Rust, Node.js, PHP, Python) - Update CLI tools and utilities - Test compatibility with existing workflows</p> <p>Third Monday: Performance optimization - Analyze image sizes and build times - Optimize Dockerfile layer caching - Review and update build arguments</p> <p>Fourth Monday: Documentation review - Review and update all image documentation - Validate links and references - Update version information and compatibility matrices</p>"},{"location":"operations/maintenance/#quarterly-tasks","title":"Quarterly Tasks","text":"<p>Security Review: - Comprehensive security audit of all images - Review and update security practices - Update base images to latest stable versions - Implement new security features</p> <p>Architecture Review: - Evaluate image architecture and dependencies - Consider consolidation or splitting of images - Review integration patterns and usage - Plan for new image requirements</p> <p>Community Feedback: - Review GitHub issues and discussions - Analyze usage patterns from logs - Gather feedback from development teams - Plan improvements based on feedback</p>"},{"location":"operations/maintenance/#image-maintenance","title":"Image Maintenance","text":""},{"location":"operations/maintenance/#base-image-updates","title":"Base Image Updates","text":"<pre><code>flowchart TD\n    MONITOR[Monitor Base Images] --&gt; CHECK[Check for Updates]\n    CHECK --&gt; SECURITY[Security Advisory Review]\n    SECURITY --&gt; TEST[Test Updated Images]\n    TEST --&gt; COMPATIBLE{Compatible?}\n    COMPATIBLE --&gt;|Yes| UPDATE[Update Dockerfiles]\n    COMPATIBLE --&gt;|No| INVESTIGATE[Investigate Issues]\n    INVESTIGATE --&gt; FIX[Apply Fixes]\n    FIX --&gt; TEST\n    UPDATE --&gt; BUILD[Rebuild Images]\n    BUILD --&gt; DEPLOY[Deploy to Registry]\n    DEPLOY --&gt; VERIFY[Verify Deployment]</code></pre>"},{"location":"operations/maintenance/#monitoring-base-images","title":"Monitoring Base Images","text":"<pre><code>#!/bin/bash\n# scripts/monitor-base-images.sh\n\ndeclare -A BASE_IMAGES=(\n    [\"rust-ci-runner\"]=\"rust:1.87.0-slim-bookworm\"\n    [\"github-runner\"]=\"ghcr.io/actions/actions-runner:2.328.0\"\n    [\"helm-deploy\"]=\"alpine:3.21.3\"\n    [\"playwright-runner\"]=\"mcr.microsoft.com/playwright:v1.51.0-noble\"\n    [\"act-runner\"]=\"alpine:3.22.1\"\n    [\"rust-releaser\"]=\"node:22-bookworm-slim\"\n)\n\necho \"Checking base image updates...\"\n\nfor image in \"${!BASE_IMAGES[@]}\"; do\n    base=\"${BASE_IMAGES[$image]}\"\n    echo \"Checking $image (base: $base)\"\n\n    # Check for newer versions\n    if docker pull \"$base\"; then\n        echo \"\u2705 $base is current\"\n    else\n        echo \"\u274c Failed to pull $base\"\n    fi\n\n    # Check for security vulnerabilities\n    trivy image \"$base\" --severity HIGH,CRITICAL --quiet\ndone\n</code></pre>"},{"location":"operations/maintenance/#update-process","title":"Update Process","text":"<pre><code>#!/bin/bash\n# scripts/update-base-image.sh\n\nIMAGE_NAME=$1\nNEW_BASE_VERSION=$2\n\nif [[ -z \"$IMAGE_NAME\" || -z \"$NEW_BASE_VERSION\" ]]; then\n    echo \"Usage: $0 &lt;image-name&gt; &lt;new-base-version&gt;\"\n    exit 1\nfi\n\necho \"Updating $IMAGE_NAME to use base image $NEW_BASE_VERSION\"\n\n# Update Dockerfile\nsed -i \"s/FROM .*/FROM $NEW_BASE_VERSION/\" \"ops/docker/$IMAGE_NAME/Dockerfile\"\n\n# Build and test\ndocker build -t \"webgrip/$IMAGE_NAME:test-update\" \"ops/docker/$IMAGE_NAME/\"\n\n# Run basic tests\necho \"Running basic tests...\"\ncase $IMAGE_NAME in\n    \"rust-ci-runner\")\n        docker run --rm \"webgrip/$IMAGE_NAME:test-update\" rustc --version\n        ;;\n    \"github-runner\")\n        docker run --rm \"webgrip/$IMAGE_NAME:test-update\" php --version\n        ;;\n    \"helm-deploy\")\n        docker run --rm \"webgrip/$IMAGE_NAME:test-update\" helm version\n        ;;\n    \"playwright-runner\")\n        docker run --rm \"webgrip/$IMAGE_NAME:test-update\" npx playwright --version\n        ;;\n    \"act-runner\")\n        docker run --rm \"webgrip/$IMAGE_NAME:test-update\" act --version\n        ;;\n    \"rust-releaser\")\n        docker run --rm \"webgrip/$IMAGE_NAME:test-update\" node --version\n        ;;\nesac\n\nif [[ $? -eq 0 ]]; then\n    echo \"\u2705 Update successful for $IMAGE_NAME\"\n    echo \"Ready to commit and push changes\"\nelse\n    echo \"\u274c Update failed for $IMAGE_NAME\"\n    exit 1\nfi\n</code></pre>"},{"location":"operations/maintenance/#dependency-management","title":"Dependency Management","text":""},{"location":"operations/maintenance/#language-runtime-updates","title":"Language Runtime Updates","text":"<pre><code>#!/bin/bash\n# scripts/update-runtimes.sh\n\n# Rust updates\necho \"Checking Rust versions...\"\nLATEST_RUST=$(curl -s https://forge.rust-lang.org/infra/channel-releases.html | grep -o \"1\\.[0-9]\\+\\.[0-9]\\+\" | head -1)\necho \"Latest Rust: $LATEST_RUST\"\n\n# Node.js updates\necho \"Checking Node.js versions...\"\nLATEST_NODE=$(curl -s https://nodejs.org/dist/index.json | jq -r '.[0].version' | sed 's/v//')\necho \"Latest Node.js: $LATEST_NODE\"\n\n# PHP updates\necho \"Checking PHP versions...\"\nLATEST_PHP=$(curl -s https://www.php.net/releases/index.php | grep -o \"8\\.[0-9]\\+\\.[0-9]\\+\" | head -1)\necho \"Latest PHP: $LATEST_PHP\"\n\n# Update Dockerfiles with new versions\n# This would typically involve careful testing and validation\n</code></pre>"},{"location":"operations/maintenance/#tool-updates","title":"Tool Updates","text":"<pre><code>#!/bin/bash\n# scripts/update-tools.sh\n\ndeclare -A TOOLS=(\n    [\"helm\"]=\"https://api.github.com/repos/helm/helm/releases/latest\"\n    [\"kubectl\"]=\"https://storage.googleapis.com/kubernetes-release/release/stable.txt\"\n    [\"act\"]=\"https://api.github.com/repos/nektos/act/releases/latest\"\n    [\"sops\"]=\"https://api.github.com/repos/mozilla/sops/releases/latest\"\n)\n\nfor tool in \"${!TOOLS[@]}\"; do\n    echo \"Checking $tool updates...\"\n\n    case $tool in\n        \"kubectl\")\n            latest=$(curl -s \"${TOOLS[$tool]}\")\n            ;;\n        *)\n            latest=$(curl -s \"${TOOLS[$tool]}\" | jq -r '.tag_name')\n            ;;\n    esac\n\n    echo \"$tool latest version: $latest\"\ndone\n</code></pre>"},{"location":"operations/maintenance/#security-maintenance","title":"Security Maintenance","text":""},{"location":"operations/maintenance/#vulnerability-scanning","title":"Vulnerability Scanning","text":"<pre><code>#!/bin/bash\n# scripts/security-scan.sh\n\nIMAGES=(\n    \"webgrip/rust-ci-runner:latest\"\n    \"webgrip/github-runner:latest\"\n    \"webgrip/helm-deploy:latest\"\n    \"webgrip/playwright-runner:latest\"\n    \"webgrip/act-runner:latest\"\n    \"webgrip/rust-releaser:latest\"\n)\n\nREPORT_DIR=\"security-reports/$(date +%Y-%m-%d)\"\nmkdir -p \"$REPORT_DIR\"\n\nfor image in \"${IMAGES[@]}\"; do\n    echo \"Scanning $image...\"\n\n    # Trivy scan\n    trivy image \"$image\" \\\n        --format json \\\n        --output \"$REPORT_DIR/$(basename $image)-trivy.json\"\n\n    # Summary report\n    trivy image \"$image\" \\\n        --severity HIGH,CRITICAL \\\n        --format table \\\n        &gt; \"$REPORT_DIR/$(basename $image)-summary.txt\"\ndone\n\n# Generate overall report\necho \"# Security Scan Report - $(date)\" &gt; \"$REPORT_DIR/README.md\"\necho \"\" &gt;&gt; \"$REPORT_DIR/README.md\"\n\nfor image in \"${IMAGES[@]}\"; do\n    echo \"## $(basename $image)\" &gt;&gt; \"$REPORT_DIR/README.md\"\n    echo '```' &gt;&gt; \"$REPORT_DIR/README.md\"\n    cat \"$REPORT_DIR/$(basename $image)-summary.txt\" &gt;&gt; \"$REPORT_DIR/README.md\"\n    echo '```' &gt;&gt; \"$REPORT_DIR/README.md\"\n    echo \"\" &gt;&gt; \"$REPORT_DIR/README.md\"\ndone\n\necho \"Security scan complete. Report saved to $REPORT_DIR/\"\n</code></pre>"},{"location":"operations/maintenance/#security-patch-process","title":"Security Patch Process","text":"<pre><code>#!/bin/bash\n# scripts/apply-security-patches.sh\n\nIMAGE_NAME=$1\nCVE_ID=$2\n\nif [[ -z \"$IMAGE_NAME\" || -z \"$CVE_ID\" ]]; then\n    echo \"Usage: $0 &lt;image-name&gt; &lt;cve-id&gt;\"\n    exit 1\nfi\n\necho \"Applying security patch for $CVE_ID in $IMAGE_NAME\"\n\n# Create branch for security fix\ngit checkout -b \"security-fix-$CVE_ID-$IMAGE_NAME\"\n\n# Update image with security fixes\ncase $IMAGE_NAME in\n    \"rust-ci-runner\"|\"rust-releaser\")\n        # Update Rust packages\n        echo \"Updating Rust packages...\"\n        # Add specific package updates to Dockerfile\n        ;;\n    \"github-runner\"|\"playwright-runner\")\n        # Update system packages\n        echo \"Updating system packages...\"\n        # Update package versions in Dockerfile\n        ;;\n    \"helm-deploy\"|\"act-runner\")\n        # Update Alpine packages\n        echo \"Updating Alpine packages...\"\n        # Update apk packages in Dockerfile\n        ;;\nesac\n\n# Build and test\ndocker build -t \"webgrip/$IMAGE_NAME:security-fix\" \"ops/docker/$IMAGE_NAME/\"\n\n# Run security scan to verify fix\ntrivy image \"webgrip/$IMAGE_NAME:security-fix\" --severity HIGH,CRITICAL\n\necho \"Security patch applied. Please review and test before merging.\"\n</code></pre>"},{"location":"operations/maintenance/#performance-maintenance","title":"Performance Maintenance","text":""},{"location":"operations/maintenance/#build-time-optimization","title":"Build Time Optimization","text":"<pre><code>#!/bin/bash\n# scripts/optimize-build-times.sh\n\nIMAGES=(rust-ci-runner github-runner helm-deploy playwright-runner act-runner rust-releaser)\n\necho \"Analyzing build performance...\"\n\nfor image in \"${IMAGES[@]}\"; do\n    echo \"Testing $image build time...\"\n\n    # Clean build\n    start_time=$(date +%s)\n    docker build --no-cache -t \"webgrip/$image:perf-test\" \"ops/docker/$image/\" &gt; /dev/null 2&gt;&amp;1\n    end_time=$(date +%s)\n    clean_build_time=$((end_time - start_time))\n\n    # Cached build\n    start_time=$(date +%s)\n    docker build -t \"webgrip/$image:perf-test-cached\" \"ops/docker/$image/\" &gt; /dev/null 2&gt;&amp;1\n    end_time=$(date +%s)\n    cached_build_time=$((end_time - start_time))\n\n    # Image size\n    size=$(docker images \"webgrip/$image:perf-test\" --format \"table {{.Size}}\" | tail -1)\n\n    echo \"$image: Clean=${clean_build_time}s, Cached=${cached_build_time}s, Size=$size\"\n\n    # Cleanup\n    docker rmi \"webgrip/$image:perf-test\" \"webgrip/$image:perf-test-cached\" &gt; /dev/null 2&gt;&amp;1\ndone\n</code></pre>"},{"location":"operations/maintenance/#image-size-monitoring","title":"Image Size Monitoring","text":"<pre><code>#!/bin/bash\n# scripts/monitor-image-sizes.sh\n\necho \"Image Size Report - $(date)\" &gt; image-sizes.md\necho \"==========================\" &gt;&gt; image-sizes.md\necho \"\" &gt;&gt; image-sizes.md\n\ndocker images webgrip/* --format \"table {{.Repository}}:{{.Tag}}\\t{{.Size}}\\t{{.CreatedAt}}\" | \\\n    grep -v \"REPOSITORY\" | \\\n    sort -k1 &gt;&gt; image-sizes.md\n\n# Check for images over size threshold\necho \"\" &gt;&gt; image-sizes.md\necho \"Large Images (&gt;1GB):\" &gt;&gt; image-sizes.md\ndocker images webgrip/* --format \"table {{.Repository}}:{{.Tag}}\\t{{.Size}}\" | \\\n    grep -E \"[0-9\\.]+GB\" &gt;&gt; image-sizes.md || echo \"None\" &gt;&gt; image-sizes.md\n\necho \"Image size report generated: image-sizes.md\"\n</code></pre>"},{"location":"operations/maintenance/#documentation-maintenance","title":"Documentation Maintenance","text":""},{"location":"operations/maintenance/#automated-link-checking","title":"Automated Link Checking","text":"<pre><code>#!/bin/bash\n# scripts/check-documentation-links.sh\n\necho \"Checking documentation links...\"\n\ncd docs/techdocs/docs\n\n# Install markdown-link-check if not present\nif ! command -v markdown-link-check &amp;&gt; /dev/null; then\n    npm install -g markdown-link-check\nfi\n\n# Create config file for link checking\ncat &gt; /tmp/link-check-config.json &lt;&lt; EOF\n{\n  \"ignorePatterns\": [\n    {\n      \"pattern\": \"^http://localhost\"\n    },\n    {\n      \"pattern\": \"^https://localhost\"\n    }\n  ],\n  \"timeout\": \"20s\",\n  \"retryOn429\": true,\n  \"retryCount\": 3,\n  \"fallbackRetryDelay\": \"30s\"\n}\nEOF\n\n# Check all markdown files\nfind . -name \"*.md\" -print0 | xargs -0 -I {} markdown-link-check {} -c /tmp/link-check-config.json\n\n# Cleanup\nrm /tmp/link-check-config.json\n\necho \"Link checking complete\"\n</code></pre>"},{"location":"operations/maintenance/#content-validation","title":"Content Validation","text":"<pre><code>#!/bin/bash\n# scripts/validate-documentation.sh\n\necho \"Validating documentation content...\"\n\n# Check for broken internal references\necho \"Checking internal references...\"\nfind docs/techdocs/docs -name \"*.md\" -exec grep -H \"\\(\\.\\./\\|docs/\\)\" {} \\; | \\\n    while read -r line; do\n        file=$(echo \"$line\" | cut -d: -f1)\n        ref=$(echo \"$line\" | cut -d: -f2- | grep -o '\\(docs/[^)]*\\|\\.\\./[^)]*\\)' | head -1)\n\n        if [[ -n \"$ref\" ]]; then\n            # Convert relative path to absolute\n            abs_path=$(realpath --relative-to=\"$(pwd)\" \"$(dirname \"$file\")/$ref\" 2&gt;/dev/null)\n\n            if [[ ! -f \"$abs_path\" ]]; then\n                echo \"\u274c Broken reference in $file: $ref\"\n            fi\n        fi\n    done\n\n# Check for outdated version references\necho \"Checking for outdated version references...\"\ngrep -r \"v1\\.[0-9]\\+\\.[0-9]\\+\" docs/techdocs/docs --include=\"*.md\" | \\\n    grep -v \"example\\|placeholder\" | \\\n    while read -r line; do\n        echo \"\u26a0\ufe0f  Version reference found: $line\"\n    done\n\n# Check for TODO/FIXME comments\necho \"Checking for TODO/FIXME items...\"\ngrep -r \"TODO\\|FIXME\\|XXX\" docs/techdocs/docs --include=\"*.md\" | \\\n    while read -r line; do\n        echo \"\ud83d\udcdd Action item: $line\"\n    done\n\necho \"Documentation validation complete\"\n</code></pre>"},{"location":"operations/maintenance/#version-synchronization","title":"Version Synchronization","text":"<pre><code>#!/bin/bash\n# scripts/sync-versions.sh\n\necho \"Synchronizing version information...\"\n\n# Get current image versions from registry\ndeclare -A CURRENT_VERSIONS\n\nIMAGES=(rust-ci-runner github-runner helm-deploy playwright-runner act-runner rust-releaser)\n\nfor image in \"${IMAGES[@]}\"; do\n    # Get image creation date and size\n    info=$(docker inspect \"webgrip/$image:latest\" --format \"{{.Created}} {{.Size}}\" 2&gt;/dev/null)\n\n    if [[ $? -eq 0 ]]; then\n        CURRENT_VERSIONS[$image]=$info\n        echo \"Found $image: $info\"\n    else\n        echo \"\u26a0\ufe0f  Could not fetch info for $image\"\n    fi\ndone\n\n# Update documentation with current versions\nfor image in \"${IMAGES[@]}\"; do\n    doc_file=\"docs/techdocs/docs/docker-images/$image.md\"\n\n    if [[ -f \"$doc_file\" ]]; then\n        echo \"Updating version info in $doc_file\"\n        # This would involve updating the version tables in documentation\n        # Implementation depends on specific format used\n    fi\ndone\n\necho \"Version synchronization complete\"\n</code></pre>"},{"location":"operations/maintenance/#quality-assurance","title":"Quality Assurance","text":""},{"location":"operations/maintenance/#automated-testing","title":"Automated Testing","text":"<pre><code>#!/bin/bash\n# scripts/qa-check.sh\n\necho \"Running quality assurance checks...\"\n\n# 1. Docker image builds\necho \"Testing image builds...\"\nfor image in rust-ci-runner github-runner helm-deploy playwright-runner act-runner rust-releaser; do\n    echo \"Building $image...\"\n    if docker build -q -t \"qa-test-$image\" \"ops/docker/$image/\" &gt; /dev/null; then\n        echo \"\u2705 $image builds successfully\"\n        docker rmi \"qa-test-$image\" &gt; /dev/null\n    else\n        echo \"\u274c $image build failed\"\n    fi\ndone\n\n# 2. Documentation build\necho \"Testing documentation build...\"\ncd docs/techdocs\nif mkdocs build &gt; /dev/null 2&gt;&amp;1; then\n    echo \"\u2705 Documentation builds successfully\"\n    rm -rf site/\nelse\n    echo \"\u274c Documentation build failed\"\nfi\ncd ../..\n\n# 3. Link validation\necho \"Validating links...\"\n./scripts/check-documentation-links.sh &gt; /dev/null 2&gt;&amp;1\nif [[ $? -eq 0 ]]; then\n    echo \"\u2705 All links are valid\"\nelse\n    echo \"\u274c Some links are broken\"\nfi\n\n# 4. Security scan\necho \"Running security scans...\"\n./scripts/security-scan.sh &gt; /dev/null 2&gt;&amp;1\necho \"\u2705 Security scans completed\"\n\necho \"Quality assurance checks complete\"\n</code></pre>"},{"location":"operations/maintenance/#continuous-monitoring","title":"Continuous Monitoring","text":"<pre><code># .github/workflows/maintenance.yml\nname: Maintenance Tasks\non:\n  schedule:\n    # Weekly security scans (Mondays at 2 AM UTC)\n    - cron: '0 2 * * 1'\n    # Monthly full maintenance (First Monday of month at 4 AM UTC)\n    - cron: '0 4 1-7 * 1'\n\njobs:\n  security-scan:\n    if: github.event.schedule == '0 2 * * 1'\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v4\n\n      - name: Run security scans\n        run: ./scripts/security-scan.sh\n\n      - name: Upload security reports\n        uses: actions/upload-artifact@v3\n        with:\n          name: security-reports\n          path: security-reports/\n\n  full-maintenance:\n    if: github.event.schedule == '0 4 1-7 * 1'\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v4\n\n      - name: Check base image updates\n        run: ./scripts/monitor-base-images.sh\n\n      - name: Validate documentation\n        run: ./scripts/validate-documentation.sh\n\n      - name: Performance analysis\n        run: ./scripts/optimize-build-times.sh\n\n      - name: Create maintenance report\n        run: |\n          echo \"# Monthly Maintenance Report - $(date)\" &gt; maintenance-report.md\n          echo \"Generated on $(date)\" &gt;&gt; maintenance-report.md\n          # Add report sections\n\n      - name: Upload maintenance report\n        uses: actions/upload-artifact@v3\n        with:\n          name: maintenance-report\n          path: maintenance-report.md\n</code></pre>"},{"location":"operations/maintenance/#incident-response","title":"Incident Response","text":""},{"location":"operations/maintenance/#image-failure-response","title":"Image Failure Response","text":"<pre><code>#!/bin/bash\n# scripts/incident-response.sh\n\nINCIDENT_TYPE=$1\nAFFECTED_IMAGE=$2\n\ncase $INCIDENT_TYPE in\n    \"build-failure\")\n        echo \"Responding to build failure for $AFFECTED_IMAGE\"\n\n        # Check recent changes\n        git log --oneline -10 \"ops/docker/$AFFECTED_IMAGE/\"\n\n        # Attempt to build with previous version\n        previous_commit=$(git log --format=\"%H\" -n 2 \"ops/docker/$AFFECTED_IMAGE/\" | tail -1)\n        git checkout \"$previous_commit\" -- \"ops/docker/$AFFECTED_IMAGE/\"\n\n        if docker build -t \"webgrip/$AFFECTED_IMAGE:rollback\" \"ops/docker/$AFFECTED_IMAGE/\"; then\n            echo \"\u2705 Previous version builds successfully\"\n            echo \"Consider rolling back recent changes\"\n        else\n            echo \"\u274c Previous version also fails to build\"\n            echo \"Deeper investigation required\"\n        fi\n        ;;\n\n    \"security-vulnerability\")\n        echo \"Responding to security vulnerability in $AFFECTED_IMAGE\"\n\n        # Pull latest base image\n        base_image=$(grep \"FROM\" \"ops/docker/$AFFECTED_IMAGE/Dockerfile\" | head -1 | awk '{print $2}')\n        docker pull \"$base_image\"\n\n        # Rebuild with latest base\n        docker build --no-cache -t \"webgrip/$AFFECTED_IMAGE:security-fix\" \"ops/docker/$AFFECTED_IMAGE/\"\n\n        # Run security scan\n        trivy image \"webgrip/$AFFECTED_IMAGE:security-fix\" --severity HIGH,CRITICAL\n        ;;\n\n    \"performance-degradation\")\n        echo \"Responding to performance issues in $AFFECTED_IMAGE\"\n\n        # Analyze recent build times\n        echo \"Recent build performance analysis needed\"\n        ./scripts/optimize-build-times.sh\n        ;;\nesac\n</code></pre>"},{"location":"operations/maintenance/#emergency-rollback","title":"Emergency Rollback","text":"<pre><code>#!/bin/bash\n# scripts/emergency-rollback.sh\n\nIMAGE_NAME=$1\nTARGET_SHA=${2:-HEAD~1}\n\nif [[ -z \"$IMAGE_NAME\" ]]; then\n    echo \"Usage: $0 &lt;image-name&gt; [target-sha]\"\n    exit 1\nfi\n\necho \"Emergency rollback for $IMAGE_NAME to $TARGET_SHA\"\n\n# Create emergency branch\ngit checkout -b \"emergency-rollback-$IMAGE_NAME-$(date +%s)\"\n\n# Rollback to target commit\ngit checkout \"$TARGET_SHA\" -- \"ops/docker/$IMAGE_NAME/\"\n\n# Build and test\ndocker build -t \"webgrip/$IMAGE_NAME:emergency-rollback\" \"ops/docker/$IMAGE_NAME/\"\n\n# Basic smoke test\ncase $IMAGE_NAME in\n    \"rust-ci-runner\")\n        docker run --rm \"webgrip/$IMAGE_NAME:emergency-rollback\" rustc --version\n        ;;\n    # Add other image tests as needed\nesac\n\nif [[ $? -eq 0 ]]; then\n    echo \"\u2705 Emergency rollback successful\"\n    echo \"Create PR to merge emergency rollback\"\nelse\n    echo \"\u274c Emergency rollback failed\"\n    exit 1\nfi\n</code></pre>"},{"location":"operations/maintenance/#documentation-lifecycle","title":"Documentation Lifecycle","text":""},{"location":"operations/maintenance/#quarterly-review-process","title":"Quarterly Review Process","text":"<ol> <li>Content Audit: Review all documentation for accuracy and completeness</li> <li>Link Validation: Verify all internal and external links</li> <li>Version Updates: Synchronize version information across all docs</li> <li>Usage Analytics: Review most-accessed content and optimize accordingly</li> <li>Community Feedback: Incorporate feedback from GitHub issues and discussions</li> </ol>"},{"location":"operations/maintenance/#continuous-improvement","title":"Continuous Improvement","text":"<pre><code>#!/bin/bash\n# scripts/doc-improvement.sh\n\necho \"Analyzing documentation for improvement opportunities...\"\n\n# Find pages with outdated information\nfind docs/techdocs/docs -name \"*.md\" -exec grep -l \"TODO\\|FIXME\\|XXX\" {} \\;\n\n# Find pages that haven't been updated recently\nfind docs/techdocs/docs -name \"*.md\" -not -newer /tmp/30-days-ago\n\n# Analyze link density (pages with few links might need more cross-references)\nfind docs/techdocs/docs -name \"*.md\" -exec sh -c 'echo \"$(grep -o \"\\[.*\\](.*)\" \"$1\" | wc -l) links in $1\"' _ {} \\; | \\\n    sort -n | head -10\n\necho \"Documentation improvement analysis complete\"\n</code></pre>"},{"location":"operations/maintenance/#related-documentation","title":"Related Documentation","text":"<ul> <li>Building Locally - Local development and testing procedures</li> <li>Contributing Images - Guidelines for contributing new images</li> <li>CI/CD Pipeline - Automated building and deployment</li> <li>Architecture Overview - Overall system architecture</li> </ul> <p>Assumption: Maintenance tasks can be automated through scripts and CI/CD pipelines. Manual intervention may be required for complex issues or major version updates. Validation needed: Confirm automation capabilities and manual oversight requirements with operations team.</p> <p>Maintainer: WebGrip Ops Team Scripts: Available in repository <code>scripts/</code> directory Monitoring: GitHub Actions workflows for automated maintenance tasks</p>"},{"location":"overview/architecture/","title":"Architecture Overview","text":""},{"location":"overview/architecture/#system-architecture","title":"System Architecture","text":"<p>The WebGrip Infrastructure follows a service-oriented architecture where each Docker image serves as a specialized microservice for different aspects of our CI/CD pipeline.</p> <pre><code>flowchart TB\n    subgraph \"Development\"\n        DEV[Developer] --&gt; LOCAL[Local Development]\n        LOCAL --&gt; ACT[ACT Runner&lt;br/&gt;Local Testing]\n        LOCAL --&gt; RUST_CI[Rust CI Runner&lt;br/&gt;Development Environment]\n    end\n\n    subgraph \"CI/CD Pipeline\"\n        GH[GitHub Repository] --&gt; ACTIONS[GitHub Actions]\n        ACTIONS --&gt; GH_RUNNER[GitHub Runner&lt;br/&gt;Self-hosted]\n        ACTIONS --&gt; PLAYWRIGHT[Playwright Runner&lt;br/&gt;E2E Testing]\n        ACTIONS --&gt; RUST_REL[Rust Releaser&lt;br/&gt;Release Automation]\n    end\n\n    subgraph \"Deployment\"\n        ACTIONS --&gt; HELM[Helm Deploy&lt;br/&gt;K8s Deployment]\n        HELM --&gt; K8S[Kubernetes Cluster]\n    end\n\n    subgraph \"Image Registry\"\n        DOCKER[Docker Registry] --&gt; GH_RUNNER\n        DOCKER --&gt; PLAYWRIGHT\n        DOCKER --&gt; HELM\n        DOCKER --&gt; RUST_CI\n        DOCKER --&gt; ACT\n        DOCKER --&gt; RUST_REL\n    end\n\n    GH_RUNNER --&gt; DOCKER\n    PLAYWRIGHT --&gt; DOCKER\n    RUST_REL --&gt; DOCKER\n    HELM --&gt; DOCKER\n    RUST_CI --&gt; DOCKER\n    ACT --&gt; DOCKER</code></pre>"},{"location":"overview/architecture/#component-architecture","title":"Component Architecture","text":""},{"location":"overview/architecture/#docker-image-services","title":"Docker Image Services","text":"<p>Each Docker image is designed as a self-contained service with specific responsibilities:</p> <pre><code>flowchart LR\n    subgraph \"Base Images\"\n        ALPINE[Alpine Linux]\n        RUST[Rust Official]\n        NODE[Node.js]\n        PLAYWRIGHT_BASE[Playwright Base]\n        ACTIONS_BASE[Actions Runner Base]\n    end\n\n    subgraph \"Our Images\"\n        RUST_CI[Rust CI Runner]\n        GH_RUNNER[GitHub Runner]\n        HELM[Helm Deploy]\n        PLAYWRIGHT[Playwright Runner]\n        ACT[ACT Runner]\n        RUST_REL[Rust Releaser]\n    end\n\n    ALPINE --&gt; HELM\n    ALPINE --&gt; ACT\n    RUST --&gt; RUST_CI\n    NODE --&gt; RUST_REL\n    PLAYWRIGHT_BASE --&gt; PLAYWRIGHT\n    ACTIONS_BASE --&gt; GH_RUNNER</code></pre>"},{"location":"overview/architecture/#automation-architecture","title":"Automation Architecture","text":"<p>Our automation follows an event-driven pattern triggered by repository changes:</p> <pre><code>sequenceDiagram\n    participant Dev as Developer\n    participant GH as GitHub\n    participant Actions as GitHub Actions\n    participant Registry as Docker Registry\n    participant K8s as Kubernetes\n\n    Dev-&gt;&gt;GH: Push Dockerfile changes\n    GH-&gt;&gt;Actions: Trigger workflow\n    Actions-&gt;&gt;Actions: Determine changed directories\n    Actions-&gt;&gt;Actions: Build changed images\n    Actions-&gt;&gt;Registry: Push new images\n    Note over Registry: Images available for use\n\n    Dev-&gt;&gt;GH: Push application code\n    GH-&gt;&gt;Actions: Trigger deployment\n    Actions-&gt;&gt;Registry: Pull deployment image\n    Actions-&gt;&gt;K8s: Deploy using Helm</code></pre>"},{"location":"overview/architecture/#design-principles","title":"Design Principles","text":""},{"location":"overview/architecture/#single-responsibility","title":"\ud83c\udfaf Single Responsibility","text":"<p>Each Docker image has one primary purpose and contains only the tools necessary for that specific function.</p> <p>Example: The Helm Deploy image contains only Alpine Linux + Helm + kubectl, not development tools or testing frameworks.</p>"},{"location":"overview/architecture/#composability","title":"\ud83d\udd27 Composability","text":"<p>Images can be used independently or combined in workflows to create more complex automation pipelines.</p> <p>Example: A typical deployment workflow uses: 1. <code>rust-ci-runner</code> for building 2. <code>playwright-runner</code> for testing 3. <code>helm-deploy</code> for deployment</p>"},{"location":"overview/architecture/#immutability","title":"\ud83d\udce6 Immutability","text":"<p>Images are versioned and immutable. Changes result in new image versions rather than modifying existing ones.</p> <p>Implementation: Each image is tagged with both <code>:latest</code> and <code>:${{ github.sha }}</code> for different use cases.</p>"},{"location":"overview/architecture/#performance","title":"\ud83d\ude80 Performance","text":"<p>Images are optimized for fast startup and minimal resource usage in CI/CD environments.</p> <p>Techniques: - Multi-stage builds to reduce final image size - Layer caching optimization - Minimal base images where possible</p>"},{"location":"overview/architecture/#data-flow","title":"Data Flow","text":""},{"location":"overview/architecture/#build-pipeline-data-flow","title":"Build Pipeline Data Flow","text":"<pre><code>flowchart TD\n    SOURCE[Source Code] --&gt; DETECT[Change Detection]\n    DETECT --&gt; BUILD[Image Build]\n    BUILD --&gt; TEST[Image Testing]\n    TEST --&gt; PUSH[Registry Push]\n    PUSH --&gt; TAG[Version Tagging]\n    TAG --&gt; NOTIFY[Availability Notification]</code></pre>"},{"location":"overview/architecture/#usage-data-flow","title":"Usage Data Flow","text":"<pre><code>flowchart TD\n    TRIGGER[Workflow Trigger] --&gt; PULL[Pull Image]\n    PULL --&gt; RUN[Execute Container]\n    RUN --&gt; PROCESS[Process Artifacts]\n    PROCESS --&gt; OUTPUT[Generate Output]\n    OUTPUT --&gt; CLEANUP[Container Cleanup]</code></pre>"},{"location":"overview/architecture/#technology-stack","title":"Technology Stack","text":""},{"location":"overview/architecture/#core-technologies","title":"Core Technologies","text":"Layer Technology Purpose Container Runtime Docker Container orchestration and execution CI/CD Platform GitHub Actions Automation workflows and triggering Image Registry Docker Hub Image storage and distribution Documentation MkDocs + Backstage Technical documentation platform Orchestration Kubernetes + Helm Production deployment platform"},{"location":"overview/architecture/#per-image-technology-stack","title":"Per-Image Technology Stack","text":"Image Base Primary Tools Purpose Rust CI Runner <code>rust:slim-bookworm</code> Rust toolchain, cargo-audit, cargo-tarpaulin Rust development and CI GitHub Runner <code>actions/actions-runner</code> GitHub Actions runner, Helm Self-hosted Actions execution Helm Deploy <code>alpine:3.21.3</code> Helm, kubectl, git Kubernetes deployment Playwright Runner <code>mcr.microsoft.com/playwright</code> Playwright, Node.js End-to-end browser testing ACT Runner <code>alpine:3.22.1</code> ACT, Docker, git Local GitHub Actions testing Rust Releaser <code>node:22-bookworm-slim</code> Node.js, Rust, cross-compilation tools Release automation"},{"location":"overview/architecture/#security-architecture","title":"Security Architecture","text":""},{"location":"overview/architecture/#container-security","title":"Container Security","text":"<pre><code>flowchart TD\n    BASE[Base Image Security] --&gt; SCAN[Vulnerability Scanning]\n    SCAN --&gt; MINIMAL[Minimal Attack Surface]\n    MINIMAL --&gt; USER[Non-root User]\n    USER --&gt; SECRETS[Secret Management]\n    SECRETS --&gt; NETWORK[Network Isolation]</code></pre> <p>Security Measures: - Regular base image updates - Minimal package installation - Non-root user execution where possible - No secrets baked into images - Security scanning in CI pipeline</p>"},{"location":"overview/architecture/#access-control","title":"Access Control","text":"<ul> <li>Registry Access: Controlled via Docker Hub credentials</li> <li>GitHub Actions: Uses repository-level secrets and permissions</li> <li>Kubernetes: RBAC-controlled deployment permissions</li> </ul>"},{"location":"overview/architecture/#scalability-considerations","title":"Scalability Considerations","text":""},{"location":"overview/architecture/#horizontal-scaling","title":"Horizontal Scaling","text":"<ul> <li>Multiple runner instances can use the same images</li> <li>Registry caching reduces download times</li> <li>Parallel workflow execution supported</li> </ul>"},{"location":"overview/architecture/#vertical-scaling","title":"Vertical Scaling","text":"<ul> <li>Images designed for various resource profiles</li> <li>Configurable resource limits in Kubernetes</li> <li>Efficient memory and CPU usage patterns</li> </ul>"},{"location":"overview/architecture/#integration-points","title":"Integration Points","text":""},{"location":"overview/architecture/#external-dependencies","title":"External Dependencies","text":"<pre><code>flowchart LR\n    REPO[This Repository] --&gt; DOCKER_HUB[Docker Hub Registry]\n    REPO --&gt; GH_ACTIONS[GitHub Actions Platform]\n    REPO --&gt; WORKFLOWS[webgrip/workflows Repository]\n    REPO --&gt; K8S[Kubernetes Clusters]\n    REPO --&gt; BACKSTAGE[Backstage Platform]</code></pre>"},{"location":"overview/architecture/#internal-dependencies","title":"Internal Dependencies","text":"<ul> <li>Base Images: Official Docker images (Alpine, Rust, Node.js, etc.)</li> <li>Shared Workflows: Reusable workflows from <code>webgrip/workflows</code></li> <li>Configuration: Settings from <code>catalog-info.yml</code></li> </ul>"},{"location":"overview/architecture/#operational-architecture","title":"Operational Architecture","text":""},{"location":"overview/architecture/#monitoring-observability","title":"Monitoring &amp; Observability","text":"<p>Currently implemented: - \u2705 Build success/failure notifications via GitHub Actions - \u2705 Image vulnerability scanning - \u2705 Workflow execution logs</p> <p>Assumption: Detailed runtime monitoring (container metrics, resource usage) is handled by the Kubernetes platform and not part of this repository's scope. Validation needed: Confirm monitoring strategy with ops team.</p>"},{"location":"overview/architecture/#backup-recovery","title":"Backup &amp; Recovery","text":"<ul> <li>Source Code: Backed up via GitHub</li> <li>Images: Stored in Docker Hub with version history</li> <li>Configuration: Version controlled in this repository</li> </ul>"},{"location":"overview/architecture/#disaster-recovery","title":"Disaster Recovery","text":"<p>In case of image unavailability: 1. Images can be rebuilt from source using local Docker 2. Alternative registries can be configured 3. Local development possible using <code>docker-compose.yml</code></p>"},{"location":"overview/architecture/#related-documentation","title":"Related Documentation","text":"<ul> <li>Purpose &amp; Scope - Why this architecture was chosen</li> <li>Quick Start Guide - How to use this architecture</li> <li>Docker Images - Detailed documentation for each component</li> <li>Operations - Maintenance and operational procedures</li> </ul>"},{"location":"overview/purpose/","title":"Purpose &amp; Scope","text":""},{"location":"overview/purpose/#mission-statement","title":"Mission Statement","text":"<p>The WebGrip Infrastructure repository serves as the centralized foundation for our organization's CI/CD infrastructure, providing specialized Docker images and automation workflows that enable consistent, reliable, and efficient development and deployment processes across all WebGrip projects.</p>"},{"location":"overview/purpose/#primary-objectives","title":"Primary Objectives","text":""},{"location":"overview/purpose/#standardization","title":"\ud83c\udfaf Standardization","text":"<p>Provide consistent, well-tested environments for development, testing, and deployment across all WebGrip projects. Each Docker image encapsulates specific tooling and configurations needed for different stages of our software lifecycle.</p>"},{"location":"overview/purpose/#efficiency","title":"\ud83d\ude80 Efficiency","text":"<p>Reduce setup time and eliminate \"works on my machine\" issues by providing pre-configured environments that developers can use immediately without lengthy local setup procedures.</p>"},{"location":"overview/purpose/#automation","title":"\ud83d\udd27 Automation","text":"<p>Enable automated building, testing, and deployment workflows through specialized container images that integrate seamlessly with GitHub Actions and Kubernetes infrastructure.</p>"},{"location":"overview/purpose/#scalability","title":"\ud83d\udcc8 Scalability","text":"<p>Support the growing needs of WebGrip's development teams with infrastructure that can handle multiple projects, different technology stacks, and varying deployment requirements.</p>"},{"location":"overview/purpose/#scope-boundaries","title":"Scope &amp; Boundaries","text":""},{"location":"overview/purpose/#in-scope","title":"\u2705 In Scope","text":"<p>Docker Images for CI/CD - Development environments (Rust CI Runner) - Testing infrastructure (Playwright Runner) - Deployment tooling (Helm Deploy) - Automation runners (GitHub Actions Runner, ACT Runner) - Release processes (Rust Releaser)</p> <p>Automation Workflows - Automated Docker image building and publishing - Version management and tagging - Multi-platform build support</p> <p>Testing Infrastructure - End-to-end testing with Playwright - Local workflow testing with ACT</p> <p>Documentation &amp; Standards - Comprehensive usage documentation - Best practices and conventions - Architectural decision records</p>"},{"location":"overview/purpose/#out-of-scope","title":"\u274c Out of Scope","text":"<p>Application Code - Business logic or application-specific code - Project-specific deployment configurations - Individual project dependencies</p> <p>Production Infrastructure - Kubernetes cluster management - Production monitoring and alerting - Database administration - Network configuration</p> <p>Security Management - Secrets management (beyond basic container security) - Access control policies - Compliance frameworks</p>"},{"location":"overview/purpose/#target-audiences","title":"Target Audiences","text":""},{"location":"overview/purpose/#developers","title":"\ud83d\udc68\u200d\ud83d\udcbb Developers","text":"<ul> <li>Need consistent development environments</li> <li>Want to test GitHub Actions workflows locally</li> <li>Require reliable CI/CD tooling</li> </ul>"},{"location":"overview/purpose/#devops-engineers","title":"\ud83d\udd27 DevOps Engineers","text":"<ul> <li>Manage deployment pipelines</li> <li>Maintain CI/CD infrastructure</li> <li>Optimize build and deployment processes</li> </ul>"},{"location":"overview/purpose/#qa-engineers","title":"\ud83e\uddea QA Engineers","text":"<ul> <li>Run end-to-end tests consistently</li> <li>Need reliable testing environments</li> <li>Validate deployment processes</li> </ul>"},{"location":"overview/purpose/#new-team-members","title":"\ud83d\udcda New Team Members","text":"<ul> <li>Need to understand our infrastructure</li> <li>Want quick onboarding to development processes</li> <li>Require clear documentation and examples</li> </ul>"},{"location":"overview/purpose/#value-proposition","title":"Value Proposition","text":""},{"location":"overview/purpose/#for-individual-developers","title":"For Individual Developers","text":"<ul> <li>Faster Onboarding: Get productive immediately with pre-configured environments</li> <li>Consistent Experience: Same tooling and versions across all environments</li> <li>Local Testing: Test CI/CD workflows locally before pushing changes</li> </ul>"},{"location":"overview/purpose/#for-development-teams","title":"For Development Teams","text":"<ul> <li>Reduced Friction: Eliminate environment-specific issues</li> <li>Better Collaboration: Shared understanding of infrastructure and processes</li> <li>Quality Assurance: Consistent testing and deployment practices</li> </ul>"},{"location":"overview/purpose/#for-webgrip-organization","title":"For WebGrip Organization","text":"<ul> <li>Cost Efficiency: Reduced setup time and infrastructure maintenance overhead</li> <li>Risk Reduction: Standardized, tested infrastructure components</li> <li>Faster Delivery: Streamlined development and deployment processes</li> </ul>"},{"location":"overview/purpose/#success-metrics","title":"Success Metrics","text":"<p>We measure the success of this infrastructure through:</p> <ul> <li>Onboarding Time: New developers productive within hours, not days</li> <li>Build Reliability: &gt;99% success rate for automated builds</li> <li>Developer Satisfaction: Positive feedback on development experience</li> <li>Maintenance Overhead: Minimal time spent on environment issues</li> </ul>"},{"location":"overview/purpose/#integration-points","title":"Integration Points","text":"<p>This infrastructure integrates with:</p> <ul> <li>GitHub Actions: Primary CI/CD platform using our runner images</li> <li>Kubernetes: Deployment target using Helm Deploy image  </li> <li>Docker Registry: Image storage and distribution</li> <li>Backstage: Service catalog and documentation platform</li> <li>Individual Projects: Consumed as base images and tools</li> </ul> <p>Assumption: Teams are primarily using GitHub for source control and GitHub Actions for CI/CD. If teams need integration with other platforms (GitLab, Jenkins, etc.), this would require extending our image set or creating new specialized images.</p>"},{"location":"overview/purpose/#related-documentation","title":"Related Documentation","text":"<ul> <li>Architecture Overview - Technical architecture and design decisions</li> <li>Quick Start Guide - Get started using these tools</li> <li>Contributing Images - Add new infrastructure components</li> </ul>"},{"location":"overview/quick-start/","title":"Quick Start Guide","text":"<p>Get up and running with WebGrip Infrastructure in minutes, not hours.</p>"},{"location":"overview/quick-start/#prerequisites","title":"Prerequisites","text":"<p>Before you begin, ensure you have:</p> <ul> <li>Docker installed and running</li> <li>Git for cloning repositories</li> <li>Access to the WebGrip organization on GitHub</li> </ul>"},{"location":"overview/quick-start/#option-1-using-pre-built-images-recommended","title":"Option 1: Using Pre-built Images (Recommended)","text":"<p>The fastest way to get started is using our pre-built images from Docker Hub.</p>"},{"location":"overview/quick-start/#rust-development","title":"\ud83e\udd80 Rust Development","text":"<pre><code># Pull the latest Rust CI image\ndocker pull webgrip/rust-ci-runner:latest\n\n# Start a Rust development environment\ndocker run -it --rm \\\n  -v $(pwd):/workspace \\\n  -w /workspace \\\n  webgrip/rust-ci-runner:latest \\\n  bash\n\n# Inside the container, you now have access to:\n# - Rust toolchain (latest stable)\n# - cargo-audit, cargo-tarpaulin\n# - Common build tools\n</code></pre>"},{"location":"overview/quick-start/#end-to-end-testing","title":"\ud83c\udfad End-to-End Testing","text":"<pre><code># Pull the Playwright testing image\ndocker pull webgrip/playwright-runner:latest\n\n# Run in your project directory with tests\ndocker run -it --rm \\\n  -v $(pwd):/app \\\n  -w /app \\\n  webgrip/playwright-runner:latest \\\n  npx playwright test\n</code></pre>"},{"location":"overview/quick-start/#local-github-actions-testing","title":"\u2699\ufe0f Local GitHub Actions Testing","text":"<pre><code># Pull the ACT runner image\ndocker pull webgrip/act-runner:latest\n\n# Test your GitHub Actions workflows locally\ndocker run -it --rm \\\n  -v $(pwd):/workspace \\\n  -v /var/run/docker.sock:/var/run/docker.sock \\\n  -w /workspace \\\n  webgrip/act-runner:latest \\\n  act\n</code></pre>"},{"location":"overview/quick-start/#kubernetes-deployment","title":"\u2638\ufe0f Kubernetes Deployment","text":"<pre><code># Pull the Helm deployment image  \ndocker pull webgrip/helm-deploy:latest\n\n# Deploy to Kubernetes (requires kubectl config)\ndocker run -it --rm \\\n  -v $(pwd):/workspace \\\n  -v ~/.kube:/root/.kube \\\n  -w /workspace \\\n  webgrip/helm-deploy:latest \\\n  helm upgrade --install myapp ./charts/myapp\n</code></pre>"},{"location":"overview/quick-start/#option-2-building-locally","title":"Option 2: Building Locally","text":"<p>If you need to modify images or test local changes:</p>"},{"location":"overview/quick-start/#clone-the-repository","title":"Clone the Repository","text":"<pre><code>git clone https://github.com/webgrip/infrastructure.git\ncd infrastructure\n</code></pre>"},{"location":"overview/quick-start/#build-specific-images","title":"Build Specific Images","text":"<pre><code># Build all images\ndocker-compose build\n\n# Or build specific images\ndocker build -t my-rust-ci ops/docker/rust-ci-runner/\ndocker build -t my-playwright ops/docker/playwright-runner/\ndocker build -t my-helm-deploy ops/docker/helm-deploy/\n</code></pre>"},{"location":"overview/quick-start/#verify-local-builds","title":"Verify Local Builds","text":"<pre><code># Test the Rust CI runner\ndocker run --rm my-rust-ci rustc --version\n\n# Test the Playwright runner  \ndocker run --rm my-playwright npx playwright --version\n\n# Test the Helm deploy image\ndocker run --rm my-helm-deploy helm version\n</code></pre>"},{"location":"overview/quick-start/#common-use-cases","title":"Common Use Cases","text":""},{"location":"overview/quick-start/#setting-up-cicd-for-a-new-project","title":"\ud83d\udd04 Setting Up CI/CD for a New Project","text":"<ol> <li> <p>Choose the appropriate images for your technology stack:    <pre><code># .github/workflows/ci.yml\njobs:\n  test:\n    runs-on: ubuntu-latest\n    container: webgrip/rust-ci-runner:latest\n    steps:\n      - uses: actions/checkout@v4\n      - run: cargo test\n\n  e2e-test:\n    runs-on: ubuntu-latest  \n    container: webgrip/playwright-runner:latest\n    steps:\n      - uses: actions/checkout@v4\n      - run: npx playwright test\n</code></pre></p> </li> <li> <p>Configure deployment using the Helm image:    <pre><code>deploy:\n  needs: [test, e2e-test]\n  runs-on: ubuntu-latest\n  container: webgrip/helm-deploy:latest\n  steps:\n    - uses: actions/checkout@v4\n    - run: helm upgrade --install myapp ./charts/myapp\n</code></pre></p> </li> </ol>"},{"location":"overview/quick-start/#local-development-workflow","title":"\ud83e\uddea Local Development Workflow","text":"<ol> <li> <p>Start your development environment:    <pre><code># For Rust projects\ndocker run -it --rm -v $(pwd):/workspace -w /workspace \\\n  webgrip/rust-ci-runner:latest bash\n</code></pre></p> </li> <li> <p>Test your changes locally before pushing:    <pre><code># Test GitHub Actions workflows\ndocker run -it --rm -v $(pwd):/workspace -w /workspace \\\n  -v /var/run/docker.sock:/var/run/docker.sock \\\n  webgrip/act-runner:latest act\n</code></pre></p> </li> <li> <p>Run end-to-end tests:    <pre><code>docker run -it --rm -v $(pwd):/app -w /app \\\n  webgrip/playwright-runner:latest npx playwright test\n</code></pre></p> </li> </ol>"},{"location":"overview/quick-start/#release-process","title":"\ud83d\ude80 Release Process","text":"<p>For Rust projects, use our release automation:</p> <pre><code># Pull the release image\ndocker pull webgrip/rust-releaser:latest\n\n# Run release process (configure via environment variables)\ndocker run -it --rm \\\n  -v $(pwd):/workspace \\\n  -w /workspace \\\n  -e GITHUB_TOKEN=$GITHUB_TOKEN \\\n  webgrip/rust-releaser:latest \\\n  ./release-script.sh\n</code></pre>"},{"location":"overview/quick-start/#environment-specific-configurations","title":"Environment-Specific Configurations","text":""},{"location":"overview/quick-start/#development-environment","title":"Development Environment","text":"<pre><code># Use latest images for development\nexport IMAGE_TAG=latest\n\n# Enable verbose logging\nexport RUST_LOG=debug\nexport PLAYWRIGHT_DEBUG=1\n</code></pre>"},{"location":"overview/quick-start/#production-environment","title":"Production Environment","text":"<pre><code># Use specific SHA tags for production\nexport IMAGE_TAG=${{ github.sha }}\n\n# Optimize for production\nexport RUST_LOG=info\nexport NODE_ENV=production\n</code></pre>"},{"location":"overview/quick-start/#troubleshooting","title":"Troubleshooting","text":""},{"location":"overview/quick-start/#common-issues","title":"Common Issues","text":"<p>\"Permission denied\" errors <pre><code># Fix file permissions\ndocker run --rm -v $(pwd):/workspace -w /workspace \\\n  webgrip/rust-ci-runner:latest \\\n  chown -R $(id -u):$(id -g) .\n</code></pre></p> <p>Image not found <pre><code># Verify image exists\ndocker images | grep webgrip\n\n# Pull latest version\ndocker pull webgrip/rust-ci-runner:latest\n</code></pre></p> <p>Container exits immediately <pre><code># Check container logs\ndocker logs &lt;container-id&gt;\n\n# Run with interactive shell for debugging\ndocker run -it --entrypoint=/bin/bash webgrip/rust-ci-runner:latest\n</code></pre></p>"},{"location":"overview/quick-start/#getting-help","title":"Getting Help","text":"<ol> <li> <p>Check the logs first:    <pre><code>docker logs -f &lt;container-name&gt;\n</code></pre></p> </li> <li> <p>Verify image integrity:    <pre><code>docker inspect webgrip/rust-ci-runner:latest\n</code></pre></p> </li> <li> <p>Test with minimal setup:    <pre><code>docker run --rm webgrip/rust-ci-runner:latest rustc --version\n</code></pre></p> </li> </ol>"},{"location":"overview/quick-start/#next-steps","title":"Next Steps","text":"<p>Now that you're up and running:</p> <ol> <li>Explore individual images: Check out detailed documentation for each Docker image</li> <li>Understand the CI/CD pipeline: Learn about our automated building process</li> <li>Contribute improvements: Read our contributing guide</li> <li>Set up testing: Configure Playwright testing for your projects</li> </ol>"},{"location":"overview/quick-start/#quick-reference","title":"Quick Reference","text":""},{"location":"overview/quick-start/#image-quick-reference","title":"Image Quick Reference","text":"Need Use This Image Quick Command Rust development <code>webgrip/rust-ci-runner</code> <code>docker run -it --rm -v $(pwd):/workspace webgrip/rust-ci-runner bash</code> E2E testing <code>webgrip/playwright-runner</code> <code>docker run --rm -v $(pwd):/app webgrip/playwright-runner npx playwright test</code> K8s deployment <code>webgrip/helm-deploy</code> <code>docker run --rm -v $(pwd):/workspace webgrip/helm-deploy helm version</code> Local Actions testing <code>webgrip/act-runner</code> <code>docker run --rm -v $(pwd):/workspace webgrip/act-runner act</code> GitHub Actions runner <code>webgrip/github-runner</code> See GitHub Runner docs Release automation <code>webgrip/rust-releaser</code> See Rust Releaser docs"},{"location":"overview/quick-start/#resource-links","title":"Resource Links","text":"<ul> <li>\ud83d\udcd6 Architecture Overview - Understanding the big picture</li> <li>\ud83d\udee0\ufe0f Operations Guide - Building and maintaining images</li> <li>\ud83d\udc1b Issue Tracker - Report problems or request features</li> <li>\ud83d\udcac Team Contact - Get help from the ops team</li> </ul>"},{"location":"testing/playwright-setup/","title":"Playwright Setup","text":"<p>Comprehensive guide to setting up and using Playwright for end-to-end testing in WebGrip's infrastructure.</p>"},{"location":"testing/playwright-setup/#overview","title":"Overview","text":"<p>Our Playwright testing infrastructure provides:</p> <ul> <li>\u2705 Multi-browser testing across Chromium, Firefox, and WebKit</li> <li>\u2705 Containerized execution with consistent environments</li> <li>\u2705 PHP application support for full-stack testing</li> <li>\u2705 CI/CD integration with automated test execution</li> <li>\u2705 Visual regression testing capabilities</li> <li>\u2705 Parallel test execution for faster feedback</li> </ul>"},{"location":"testing/playwright-setup/#architecture","title":"Architecture","text":""},{"location":"testing/playwright-setup/#testing-environment-stack","title":"Testing Environment Stack","text":"<pre><code>flowchart TD\n    subgraph \"Host System\"\n        REPO[Repository Code]\n        CONFIG[Test Configuration]\n    end\n\n    subgraph \"Playwright Container\"\n        PLAYWRIGHT[Playwright Test Runner]\n        BROWSERS[Browser Engines]\n        PHP[PHP Runtime]\n        NODE[Node.js Runtime]\n    end\n\n    subgraph \"Test Targets\"\n        LOCAL_APP[Local Application]\n        STAGING[Staging Environment]\n        API[API Endpoints]\n    end\n\n    subgraph \"Test Outputs\"\n        REPORTS[HTML Reports]\n        SCREENSHOTS[Screenshots]\n        VIDEOS[Test Videos]\n        TRACES[Execution Traces]\n    end\n\n    REPO --&gt; PLAYWRIGHT\n    CONFIG --&gt; PLAYWRIGHT\n    PLAYWRIGHT --&gt; BROWSERS\n    BROWSERS --&gt; LOCAL_APP\n    BROWSERS --&gt; STAGING\n    BROWSERS --&gt; API\n    PLAYWRIGHT --&gt; REPORTS\n    PLAYWRIGHT --&gt; SCREENSHOTS\n    PLAYWRIGHT --&gt; VIDEOS\n    PLAYWRIGHT --&gt; TRACES</code></pre>"},{"location":"testing/playwright-setup/#browser-testing-matrix","title":"Browser Testing Matrix","text":"<pre><code>flowchart LR\n    subgraph \"Test Cases\"\n        TESTS[Test Specifications]\n    end\n\n    subgraph \"Browser Matrix\"\n        CHROMIUM[Chromium&lt;br/&gt;Desktop Chrome]\n        FIREFOX[Firefox&lt;br/&gt;Desktop Firefox] \n        WEBKIT[WebKit&lt;br/&gt;Desktop Safari]\n    end\n\n    subgraph \"Device Matrix\"\n        DESKTOP[Desktop Viewports]\n        MOBILE[Mobile Viewports]\n        TABLET[Tablet Viewports]\n    end\n\n    TESTS --&gt; CHROMIUM\n    TESTS --&gt; FIREFOX\n    TESTS --&gt; WEBKIT\n\n    CHROMIUM --&gt; DESKTOP\n    FIREFOX --&gt; DESKTOP\n    WEBKIT --&gt; DESKTOP\n\n    CHROMIUM --&gt; MOBILE\n    WEBKIT --&gt; MOBILE</code></pre>"},{"location":"testing/playwright-setup/#configuration","title":"Configuration","text":""},{"location":"testing/playwright-setup/#current-configuration","title":"Current Configuration","text":"<p>Our Playwright setup is located in <code>tests/playwright-runner/</code> with the following structure:</p> <pre><code>tests/playwright-runner/\n\u251c\u2500\u2500 package.json              # Dependencies and scripts\n\u251c\u2500\u2500 playwright.config.ts      # Main configuration\n\u2514\u2500\u2500 tests/\n    \u2514\u2500\u2500 google.spec.ts        # Example test\n</code></pre>"},{"location":"testing/playwright-setup/#playwright-configuration-file","title":"Playwright Configuration File","text":"<p>Current configuration (<code>playwright.config.ts</code>):</p> <pre><code>export default defineConfig({\n  testDir: './tests',\n  fullyParallel: true,\n  forbidOnly: !!process.env.CI,\n  retries: process.env.CI ? 2 : 0,\n  workers: process.env.CI ? 1 : undefined,\n  reporter: 'line',\n\n  use: {\n    trace: 'on-first-retry',\n  },\n\n  projects: [\n    {\n      name: 'chromium',\n      use: { ...devices['Desktop Chrome'] },\n    },\n    // Additional browsers commented out for now\n  ],\n});\n</code></pre>"},{"location":"testing/playwright-setup/#recommended-production-configuration","title":"Recommended Production Configuration","text":"<pre><code>// playwright.config.ts - Enhanced configuration\nimport { defineConfig, devices } from '@playwright/test';\n\nexport default defineConfig({\n  testDir: './tests',\n\n  // Execution settings\n  fullyParallel: true,\n  forbidOnly: !!process.env.CI,\n  retries: process.env.CI ? 2 : 0,\n  workers: process.env.CI ? 2 : undefined,\n  timeout: 30000,\n\n  // Reporting\n  reporter: [\n    ['html', { outputFolder: 'playwright-report' }],\n    ['json', { outputFile: 'test-results.json' }],\n    ['junit', { outputFile: 'test-results.xml' }],\n    ['line']\n  ],\n\n  // Global test settings\n  use: {\n    baseURL: process.env.BASE_URL || 'http://localhost:8000',\n    trace: 'on-first-retry',\n    screenshot: 'only-on-failure',\n    video: 'retain-on-failure',\n    actionTimeout: 10000,\n    navigationTimeout: 15000,\n  },\n\n  // Browser projects\n  projects: [\n    {\n      name: 'chromium',\n      use: { ...devices['Desktop Chrome'] },\n    },\n    {\n      name: 'firefox',\n      use: { ...devices['Desktop Firefox'] },\n    },\n    {\n      name: 'webkit',\n      use: { ...devices['Desktop Safari'] },\n    },\n    {\n      name: 'mobile-chrome',\n      use: { ...devices['Pixel 5'] },\n    },\n    {\n      name: 'mobile-safari',\n      use: { ...devices['iPhone 12'] },\n    },\n  ],\n\n  // Web server for testing\n  webServer: {\n    command: 'php artisan serve',\n    url: 'http://localhost:8000',\n    reuseExistingServer: !process.env.CI,\n    timeout: 120000,\n  },\n});\n</code></pre>"},{"location":"testing/playwright-setup/#installation-and-setup","title":"Installation and Setup","text":""},{"location":"testing/playwright-setup/#local-development-setup","title":"Local Development Setup","text":"<pre><code># Navigate to test directory\ncd tests/playwright-runner\n\n# Install dependencies\nnpm install\n\n# Install browser binaries\nnpx playwright install\n\n# Install system dependencies (if needed)\nnpx playwright install-deps\n</code></pre>"},{"location":"testing/playwright-setup/#docker-based-setup-recommended","title":"Docker-based Setup (Recommended)","text":"<pre><code># Use our Playwright Runner image\ndocker run -it --rm \\\n  -v $(pwd):/app \\\n  -w /app \\\n  webgrip/playwright-runner:latest \\\n  bash\n\n# Inside container - dependencies already installed\ncd tests/playwright-runner\nnpm install  # Install project-specific dependencies\nnpx playwright test\n</code></pre>"},{"location":"testing/playwright-setup/#project-integration","title":"Project Integration","text":"<pre><code># Add Playwright to existing project\ncd your-project\nnpm init -y\nnpm install -D @playwright/test\nnpx playwright install\n\n# Generate initial configuration\nnpx playwright init\n</code></pre>"},{"location":"testing/playwright-setup/#writing-tests","title":"Writing Tests","text":""},{"location":"testing/playwright-setup/#basic-test-structure","title":"Basic Test Structure","text":"<pre><code>// tests/example.spec.ts\nimport { test, expect } from '@playwright/test';\n\ntest.describe('Application Tests', () =&gt; {\n  test.beforeEach(async ({ page }) =&gt; {\n    // Setup before each test\n    await page.goto('/');\n  });\n\n  test('should load homepage', async ({ page }) =&gt; {\n    await expect(page).toHaveTitle(/My Application/);\n    await expect(page.locator('h1')).toContainText('Welcome');\n  });\n\n  test('should navigate to about page', async ({ page }) =&gt; {\n    await page.click('a[href=\"/about\"]');\n    await expect(page).toHaveURL(/.*about/);\n    await expect(page.locator('h1')).toContainText('About');\n  });\n});\n</code></pre>"},{"location":"testing/playwright-setup/#api-testing","title":"API Testing","text":"<pre><code>// tests/api.spec.ts\nimport { test, expect } from '@playwright/test';\n\ntest.describe('API Tests', () =&gt; {\n  test('should fetch user data', async ({ request }) =&gt; {\n    const response = await request.get('/api/users');\n    expect(response.status()).toBe(200);\n\n    const users = await response.json();\n    expect(users).toHaveLength(3);\n    expect(users[0]).toHaveProperty('name');\n    expect(users[0]).toHaveProperty('email');\n  });\n\n  test('should create new user', async ({ request }) =&gt; {\n    const response = await request.post('/api/users', {\n      data: {\n        name: 'Test User',\n        email: 'test@example.com'\n      }\n    });\n\n    expect(response.status()).toBe(201);\n    const user = await response.json();\n    expect(user.name).toBe('Test User');\n  });\n});\n</code></pre>"},{"location":"testing/playwright-setup/#visual-regression-testing","title":"Visual Regression Testing","text":"<pre><code>// tests/visual.spec.ts\nimport { test, expect } from '@playwright/test';\n\ntest.describe('Visual Regression', () =&gt; {\n  test('should match homepage screenshot', async ({ page }) =&gt; {\n    await page.goto('/');\n\n    // Wait for content to load\n    await page.waitForLoadState('networkidle');\n\n    // Take screenshot and compare\n    await expect(page).toHaveScreenshot('homepage.png');\n  });\n\n  test('should match mobile view', async ({ page }) =&gt; {\n    await page.setViewportSize({ width: 375, height: 667 });\n    await page.goto('/');\n\n    await expect(page).toHaveScreenshot('homepage-mobile.png');\n  });\n});\n</code></pre>"},{"location":"testing/playwright-setup/#php-application-testing","title":"PHP Application Testing","text":"<pre><code>// tests/php-app.spec.ts\nimport { test, expect } from '@playwright/test';\nimport { execSync } from 'child_process';\n\ntest.describe('PHP Application', () =&gt; {\n  test.beforeEach(async () =&gt; {\n    // Reset database state\n    execSync('php artisan migrate:fresh --seed', { stdio: 'inherit' });\n  });\n\n  test('should register new user', async ({ page }) =&gt; {\n    await page.goto('/register');\n\n    await page.fill('[name=\"name\"]', 'John Doe');\n    await page.fill('[name=\"email\"]', 'john@example.com');\n    await page.fill('[name=\"password\"]', 'password123');\n    await page.fill('[name=\"password_confirmation\"]', 'password123');\n\n    await page.click('button[type=\"submit\"]');\n\n    await expect(page).toHaveURL('/dashboard');\n    await expect(page.locator('.welcome')).toContainText('Welcome, John Doe');\n  });\n\n  test('should handle authentication', async ({ page }) =&gt; {\n    // Seed user first\n    execSync('php artisan tinker --execute=\"User::create([\\'name\\' =&gt; \\'Test\\', \\'email\\' =&gt; \\'test@test.com\\', \\'password\\' =&gt; bcrypt(\\'password\\')])\"');\n\n    await page.goto('/login');\n    await page.fill('[name=\"email\"]', 'test@test.com');\n    await page.fill('[name=\"password\"]', 'password');\n    await page.click('button[type=\"submit\"]');\n\n    await expect(page).toHaveURL('/dashboard');\n  });\n});\n</code></pre>"},{"location":"testing/playwright-setup/#running-tests","title":"Running Tests","text":""},{"location":"testing/playwright-setup/#basic-execution","title":"Basic Execution","text":"<pre><code># Run all tests\nnpx playwright test\n\n# Run specific test file\nnpx playwright test tests/example.spec.ts\n\n# Run tests in specific browser\nnpx playwright test --project=chromium\n\n# Run tests in headed mode (visible browser)\nnpx playwright test --headed\n\n# Run tests with UI mode\nnpx playwright test --ui\n</code></pre>"},{"location":"testing/playwright-setup/#docker-execution","title":"Docker Execution","text":"<pre><code># Run tests in Playwright container\ndocker run --rm \\\n  -v $(pwd):/app \\\n  -w /app/tests/playwright-runner \\\n  webgrip/playwright-runner:latest \\\n  npx playwright test\n\n# Run with custom configuration\ndocker run --rm \\\n  -v $(pwd):/app \\\n  -w /app \\\n  -e BASE_URL=http://staging.example.com \\\n  webgrip/playwright-runner:latest \\\n  npx playwright test --config=tests/playwright-runner/playwright.config.ts\n</code></pre>"},{"location":"testing/playwright-setup/#cicd-integration","title":"CI/CD Integration","text":"<pre><code># .github/workflows/e2e-tests.yml\nname: E2E Tests\non: [push, pull_request]\n\njobs:\n  test:\n    runs-on: ubuntu-latest\n    container: webgrip/playwright-runner:latest\n\n    services:\n      database:\n        image: postgres:15\n        env:\n          POSTGRES_PASSWORD: postgres\n        options: &gt;-\n          --health-cmd pg_isready\n          --health-interval 10s\n          --health-timeout 5s\n          --health-retries 5\n\n    steps:\n      - uses: actions/checkout@v4\n\n      - name: Setup application\n        run: |\n          composer install\n          php artisan key:generate\n          php artisan migrate --force\n\n      - name: Start web server\n        run: php artisan serve &amp;\n\n      - name: Wait for server\n        run: npx wait-on http://localhost:8000\n\n      - name: Run Playwright tests\n        run: |\n          cd tests/playwright-runner\n          npm install\n          npx playwright test\n\n      - name: Upload test reports\n        uses: actions/upload-artifact@v3\n        if: always()\n        with:\n          name: playwright-report\n          path: tests/playwright-runner/playwright-report/\n</code></pre>"},{"location":"testing/playwright-setup/#test-organization","title":"Test Organization","text":""},{"location":"testing/playwright-setup/#recommended-directory-structure","title":"Recommended Directory Structure","text":"<pre><code>tests/playwright-runner/\n\u251c\u2500\u2500 package.json\n\u251c\u2500\u2500 playwright.config.ts\n\u251c\u2500\u2500 fixtures/              # Test data and utilities\n\u2502   \u251c\u2500\u2500 auth.ts            # Authentication helpers\n\u2502   \u251c\u2500\u2500 database.ts        # Database utilities\n\u2502   \u2514\u2500\u2500 api.ts             # API helpers\n\u251c\u2500\u2500 tests/\n\u2502   \u251c\u2500\u2500 auth/              # Authentication tests\n\u2502   \u2502   \u251c\u2500\u2500 login.spec.ts\n\u2502   \u2502   \u2514\u2500\u2500 registration.spec.ts\n\u2502   \u251c\u2500\u2500 api/               # API tests\n\u2502   \u2502   \u251c\u2500\u2500 users.spec.ts\n\u2502   \u2502   \u2514\u2500\u2500 orders.spec.ts\n\u2502   \u251c\u2500\u2500 e2e/               # End-to-end workflows\n\u2502   \u2502   \u251c\u2500\u2500 checkout.spec.ts\n\u2502   \u2502   \u2514\u2500\u2500 user-journey.spec.ts\n\u2502   \u2514\u2500\u2500 visual/            # Visual regression tests\n\u2502       \u251c\u2500\u2500 homepage.spec.ts\n\u2502       \u2514\u2500\u2500 components.spec.ts\n\u251c\u2500\u2500 test-results/          # Generated test results\n\u251c\u2500\u2500 playwright-report/     # HTML reports\n\u2514\u2500\u2500 screenshots/           # Visual regression baselines\n</code></pre>"},{"location":"testing/playwright-setup/#test-categorization","title":"Test Categorization","text":"<pre><code>// Use test tags for organization\ntest.describe('User Management @smoke', () =&gt; {\n  // Smoke tests - critical functionality\n});\n\ntest.describe('Advanced Features @integration', () =&gt; {\n  // Integration tests - complex workflows\n});\n\ntest.describe('Visual Regression @visual', () =&gt; {\n  // Visual tests - UI consistency\n});\n</code></pre>"},{"location":"testing/playwright-setup/#running-categorized-tests","title":"Running Categorized Tests","text":"<pre><code># Run smoke tests only\nnpx playwright test --grep \"@smoke\"\n\n# Run all except visual tests\nnpx playwright test --grep-invert \"@visual\"\n\n# Run specific category\nnpx playwright test tests/auth/\n</code></pre>"},{"location":"testing/playwright-setup/#debugging-and-development","title":"Debugging and Development","text":""},{"location":"testing/playwright-setup/#debug-mode","title":"Debug Mode","text":"<pre><code># Debug specific test\nnpx playwright test --debug tests/example.spec.ts\n\n# Debug with headed browser\nnpx playwright test --headed --slowMo=1000\n\n# Debug in specific browser\nnpx playwright test --project=chromium --debug\n</code></pre>"},{"location":"testing/playwright-setup/#test-inspector","title":"Test Inspector","text":"<pre><code>// Add breakpoint in test\ntest('debug example', async ({ page }) =&gt; {\n  await page.goto('/');\n  await page.pause(); // Opens Playwright Inspector\n  await page.click('button');\n});\n</code></pre>"},{"location":"testing/playwright-setup/#trace-viewer","title":"Trace Viewer","text":"<pre><code># Generate traces\nnpx playwright test --trace=on\n\n# View traces\nnpx playwright show-trace test-results/trace.zip\n</code></pre>"},{"location":"testing/playwright-setup/#console-and-network-monitoring","title":"Console and Network Monitoring","text":"<pre><code>test('monitor network', async ({ page }) =&gt; {\n  // Listen to console logs\n  page.on('console', msg =&gt; console.log('PAGE LOG:', msg.text()));\n\n  // Monitor network requests\n  page.on('request', request =&gt; {\n    console.log('REQUEST:', request.url());\n  });\n\n  page.on('response', response =&gt; {\n    console.log('RESPONSE:', response.url(), response.status());\n  });\n\n  await page.goto('/');\n});\n</code></pre>"},{"location":"testing/playwright-setup/#advanced-features","title":"Advanced Features","text":""},{"location":"testing/playwright-setup/#custom-fixtures","title":"Custom Fixtures","text":"<pre><code>// fixtures/auth.ts\nimport { test as base } from '@playwright/test';\n\ntype AuthFixtures = {\n  authenticatedPage: Page;\n};\n\nexport const test = base.extend&lt;AuthFixtures&gt;({\n  authenticatedPage: async ({ page }, use) =&gt; {\n    // Login before each test\n    await page.goto('/login');\n    await page.fill('[name=\"email\"]', 'test@example.com');\n    await page.fill('[name=\"password\"]', 'password');\n    await page.click('button[type=\"submit\"]');\n    await page.waitForURL('/dashboard');\n\n    await use(page);\n  },\n});\n\n// Usage in tests\ntest('authenticated user can access profile', async ({ authenticatedPage }) =&gt; {\n  await authenticatedPage.goto('/profile');\n  await expect(authenticatedPage).toHaveURL('/profile');\n});\n</code></pre>"},{"location":"testing/playwright-setup/#page-object-model","title":"Page Object Model","text":"<pre><code>// pages/LoginPage.ts\nexport class LoginPage {\n  constructor(private page: Page) {}\n\n  async goto() {\n    await this.page.goto('/login');\n  }\n\n  async login(email: string, password: string) {\n    await this.page.fill('[name=\"email\"]', email);\n    await this.page.fill('[name=\"password\"]', password);\n    await this.page.click('button[type=\"submit\"]');\n  }\n\n  async getErrorMessage() {\n    return await this.page.locator('.error-message').textContent();\n  }\n}\n\n// Usage in tests\ntest('login flow', async ({ page }) =&gt; {\n  const loginPage = new LoginPage(page);\n  await loginPage.goto();\n  await loginPage.login('invalid@email.com', 'wrongpassword');\n\n  const error = await loginPage.getErrorMessage();\n  expect(error).toContain('Invalid credentials');\n});\n</code></pre>"},{"location":"testing/playwright-setup/#performance-testing","title":"Performance Testing","text":"<pre><code>test('performance metrics', async ({ page }) =&gt; {\n  await page.goto('/');\n\n  // Wait for page to load completely\n  await page.waitForLoadState('networkidle');\n\n  // Get performance metrics\n  const performanceEntries = await page.evaluate(() =&gt; {\n    return JSON.stringify(performance.getEntriesByType('navigation'));\n  });\n\n  const navigation = JSON.parse(performanceEntries)[0];\n  const loadTime = navigation.loadEventEnd - navigation.fetchStart;\n\n  expect(loadTime).toBeLessThan(3000); // 3 second load time\n});\n</code></pre>"},{"location":"testing/playwright-setup/#troubleshooting","title":"Troubleshooting","text":""},{"location":"testing/playwright-setup/#common-issues","title":"Common Issues","text":"<p>Browser launch failures <pre><code># Check browser installation\nnpx playwright install --with-deps\n\n# Debug browser launch\nDEBUG=pw:browser npx playwright test\n</code></pre></p> <p>Element not found errors <pre><code>// Use proper waiting strategies\nawait page.waitForSelector('[data-testid=\"submit-button\"]');\nawait page.waitForLoadState('networkidle');\n\n// Use more resilient selectors\nawait page.click('[data-testid=\"submit\"]'); // Better\nawait page.click('button:has-text(\"Submit\")'); // Good\nawait page.click('button'); // Fragile\n</code></pre></p> <p>Flaky tests <pre><code>// Add proper waits\nawait page.waitForURL('/dashboard');\nawait page.waitForSelector('.loading', { state: 'detached' });\n\n// Use assertions with auto-waiting\nawait expect(page.locator('.message')).toBeVisible();\nawait expect(page).toHaveURL(/dashboard/);\n</code></pre></p> <p>Performance issues <pre><code># Run tests in parallel with limited workers\nnpx playwright test --workers=2\n\n# Run specific browser only\nnpx playwright test --project=chromium\n</code></pre></p>"},{"location":"testing/playwright-setup/#related-documentation","title":"Related Documentation","text":"<ul> <li>Playwright Runner Image - Container environment details</li> <li>Test Execution - Advanced execution strategies</li> <li>Architecture Overview - Testing in our infrastructure</li> <li>CI/CD Pipeline - Automated test execution</li> </ul> <p>Assumption: Tests primarily target web applications built with standard technologies (HTML, CSS, JavaScript, PHP). Complex SPA frameworks may require additional configuration and custom waiting strategies. Validation needed: Confirm application architecture and testing requirements with development teams.</p> <p>Maintainer: WebGrip Ops Team Configuration: <code>tests/playwright-runner/playwright.config.ts</code> Container: webgrip/playwright-runner</p>"},{"location":"testing/test-execution/","title":"Test Execution","text":"<p>Advanced strategies and patterns for executing Playwright tests across different environments and scenarios.</p>"},{"location":"testing/test-execution/#overview","title":"Overview","text":"<p>Test execution encompasses:</p> <ul> <li>\u2705 Environment-specific execution across development, staging, and production</li> <li>\u2705 Parallel and distributed testing for optimal performance</li> <li>\u2705 Cross-browser and cross-device testing for comprehensive coverage</li> <li>\u2705 CI/CD integration patterns for automated testing workflows</li> <li>\u2705 Test result management and reporting strategies</li> </ul>"},{"location":"testing/test-execution/#execution-strategies","title":"Execution Strategies","text":""},{"location":"testing/test-execution/#local-development-execution","title":"Local Development Execution","text":"<pre><code>flowchart TD\n    DEV[Developer Machine] --&gt; LOCAL_ENV[Local Environment]\n    LOCAL_ENV --&gt; QUICK[Quick Feedback Loop]\n    QUICK --&gt; INDIVIDUAL[Individual Test Files]\n    QUICK --&gt; BROWSER[Single Browser]\n    QUICK --&gt; DEBUG[Debug Mode]\n\n    subgraph \"Development Workflow\"\n        WRITE[Write Test] --&gt; RUN[Run Test]\n        RUN --&gt; DEBUG_ISSUE[Debug Issues]\n        DEBUG_ISSUE --&gt; FIX[Fix Code]\n        FIX --&gt; WRITE\n    end\n\n    DEBUG --&gt; WRITE</code></pre>"},{"location":"testing/test-execution/#cicd-execution-pipeline","title":"CI/CD Execution Pipeline","text":"<pre><code>flowchart LR\n    subgraph \"Commit Stage\"\n        COMMIT[Code Commit] --&gt; SMOKE[Smoke Tests]\n        SMOKE --&gt; FAST_FEEDBACK[&lt; 5 minutes]\n    end\n\n    subgraph \"Integration Stage\"\n        FAST_FEEDBACK --&gt; FULL_SUITE[Full Test Suite]\n        FULL_SUITE --&gt; PARALLEL[Parallel Execution]\n        PARALLEL --&gt; MULTI_BROWSER[Multi-Browser]\n    end\n\n    subgraph \"Deployment Stage\"\n        MULTI_BROWSER --&gt; E2E[E2E Tests]\n        E2E --&gt; ACCEPTANCE[Acceptance Tests]\n        ACCEPTANCE --&gt; DEPLOY[Deploy]\n    end</code></pre>"},{"location":"testing/test-execution/#production-monitoring","title":"Production Monitoring","text":"<pre><code>flowchart TD\n    PROD[Production Environment] --&gt; SYNTHETIC[Synthetic Tests]\n    SYNTHETIC --&gt; CRITICAL_PATHS[Critical User Paths]\n    CRITICAL_PATHS --&gt; ALERTS[Failure Alerts]\n    ALERTS --&gt; INCIDENT[Incident Response]\n\n    subgraph \"Monitoring Schedule\"\n        HOURLY[Hourly Checks]\n        DAILY[Daily Full Suite]\n        WEEKLY[Weekly Regression]\n    end\n\n    SYNTHETIC --&gt; HOURLY\n    SYNTHETIC --&gt; DAILY\n    SYNTHETIC --&gt; WEEKLY</code></pre>"},{"location":"testing/test-execution/#execution-environments","title":"Execution Environments","text":""},{"location":"testing/test-execution/#local-development","title":"Local Development","text":"<pre><code># Quick development cycle\ncd tests/playwright-runner\n\n# Run single test file\nnpx playwright test tests/auth/login.spec.ts\n\n# Run with headed browser for debugging\nnpx playwright test tests/auth/login.spec.ts --headed\n\n# Run with debug mode\nnpx playwright test tests/auth/login.spec.ts --debug\n\n# Watch mode for continuous testing\nnpx playwright test --watch\n</code></pre>"},{"location":"testing/test-execution/#docker-based-execution","title":"Docker-based Execution","text":"<pre><code># Standard container execution\ndocker run --rm \\\n  -v $(pwd):/app \\\n  -w /app/tests/playwright-runner \\\n  webgrip/playwright-runner:latest \\\n  npx playwright test\n\n# With environment variables\ndocker run --rm \\\n  -v $(pwd):/app \\\n  -w /app/tests/playwright-runner \\\n  -e BASE_URL=http://staging.example.com \\\n  -e TEST_USER_EMAIL=test@example.com \\\n  -e TEST_USER_PASSWORD=password123 \\\n  webgrip/playwright-runner:latest \\\n  npx playwright test --project=chromium\n\n# With volume for reports\ndocker run --rm \\\n  -v $(pwd):/app \\\n  -v playwright-reports:/app/tests/playwright-runner/playwright-report \\\n  -w /app/tests/playwright-runner \\\n  webgrip/playwright-runner:latest \\\n  npx playwright test --reporter=html\n</code></pre>"},{"location":"testing/test-execution/#github-actions-integration","title":"GitHub Actions Integration","text":"<pre><code># .github/workflows/playwright-tests.yml\nname: Playwright Tests\non:\n  push:\n    branches: [main, develop]\n  pull_request:\n    branches: [main]\n\njobs:\n  test:\n    runs-on: ubuntu-latest\n    container: webgrip/playwright-runner:latest\n\n    strategy:\n      fail-fast: false\n      matrix:\n        browser: [chromium, firefox, webkit]\n        shard: [1, 2, 3, 4]\n\n    steps:\n      - uses: actions/checkout@v4\n\n      - name: Setup application\n        run: |\n          composer install --no-dev --optimize-autoloader\n          php artisan config:cache\n          php artisan route:cache\n\n      - name: Setup database\n        env:\n          DB_CONNECTION: sqlite\n          DB_DATABASE: \":memory:\"\n        run: |\n          php artisan migrate --force\n          php artisan db:seed --force\n\n      - name: Start application server\n        run: |\n          php artisan serve --port=8000 &amp;\n          sleep 10\n          curl http://localhost:8000/health || exit 1\n\n      - name: Run Playwright tests\n        env:\n          BASE_URL: http://localhost:8000\n        run: |\n          cd tests/playwright-runner\n          npm ci\n          npx playwright test \\\n            --project=${{ matrix.browser }} \\\n            --shard=${{ matrix.shard }}/4 \\\n            --reporter=blob\n\n      - name: Upload test results\n        uses: actions/upload-artifact@v3\n        if: always()\n        with:\n          name: playwright-results-${{ matrix.browser }}-${{ matrix.shard }}\n          path: tests/playwright-runner/test-results/\n\n  merge-reports:\n    if: always()\n    needs: test\n    runs-on: ubuntu-latest\n    container: webgrip/playwright-runner:latest\n    steps:\n      - uses: actions/checkout@v4\n\n      - name: Download all test results\n        uses: actions/download-artifact@v3\n        with:\n          pattern: playwright-results-*\n          merge-multiple: true\n          path: test-results/\n\n      - name: Merge test reports\n        run: |\n          cd tests/playwright-runner\n          npx playwright merge-reports --reporter=html test-results/\n\n      - name: Upload merged report\n        uses: actions/upload-artifact@v3\n        with:\n          name: playwright-report\n          path: tests/playwright-runner/playwright-report/\n</code></pre>"},{"location":"testing/test-execution/#parallel-execution","title":"Parallel Execution","text":""},{"location":"testing/test-execution/#browser-parallelization","title":"Browser Parallelization","text":"<pre><code>// playwright.config.ts - Browser parallelization\nexport default defineConfig({\n  projects: [\n    {\n      name: 'chromium',\n      use: { ...devices['Desktop Chrome'] },\n    },\n    {\n      name: 'firefox',\n      use: { ...devices['Desktop Firefox'] },\n    },\n    {\n      name: 'webkit',\n      use: { ...devices['Desktop Safari'] },\n    },\n  ],\n});\n</code></pre> <pre><code># Run all browsers in parallel\nnpx playwright test\n\n# Run specific browser\nnpx playwright test --project=chromium\n\n# Run multiple specific browsers\nnpx playwright test --project=chromium --project=firefox\n</code></pre>"},{"location":"testing/test-execution/#test-sharding","title":"Test Sharding","text":"<pre><code># Split tests across multiple runners\nnpx playwright test --shard=1/4  # Run 1st quarter\nnpx playwright test --shard=2/4  # Run 2nd quarter\nnpx playwright test --shard=3/4  # Run 3rd quarter\nnpx playwright test --shard=4/4  # Run 4th quarter\n\n# In CI with matrix\nstrategy:\n  matrix:\n    shard: [1, 2, 3, 4]\nsteps:\n  - name: Run tests (Shard ${{ matrix.shard }})\n    run: npx playwright test --shard=${{ matrix.shard }}/4\n</code></pre>"},{"location":"testing/test-execution/#worker-configuration","title":"Worker Configuration","text":"<pre><code>// playwright.config.ts - Worker optimization\nexport default defineConfig({\n  // Local development - use all cores\n  workers: process.env.CI ? 2 : undefined,\n\n  // Or specify exact number\n  workers: 4,\n\n  // Full parallelization\n  fullyParallel: true,\n\n  // Global timeout\n  globalTimeout: 60 * 60 * 1000, // 1 hour\n\n  // Per-test timeout\n  timeout: 30 * 1000, // 30 seconds\n});\n</code></pre>"},{"location":"testing/test-execution/#test-selection-and-filtering","title":"Test Selection and Filtering","text":""},{"location":"testing/test-execution/#tag-based-execution","title":"Tag-based Execution","text":"<pre><code>// tests/auth.spec.ts\ntest.describe('Authentication @smoke @auth', () =&gt; {\n  test('should login successfully @critical', async ({ page }) =&gt; {\n    // Test implementation\n  });\n\n  test('should handle invalid credentials @error-handling', async ({ page }) =&gt; {\n    // Test implementation\n  });\n});\n\ntest.describe('User Management @integration @users', () =&gt; {\n  test('should create new user @crud', async ({ page }) =&gt; {\n    // Test implementation\n  });\n});\n</code></pre> <pre><code># Run tests by tags\nnpx playwright test --grep \"@smoke\"              # Smoke tests only\nnpx playwright test --grep \"@critical\"          # Critical tests only\nnpx playwright test --grep \"@smoke|@critical\"   # Smoke OR critical\nnpx playwright test --grep-invert \"@slow\"       # Everything except slow tests\n\n# Run by test suite\nnpx playwright test --grep \"@auth\"              # All auth tests\nnpx playwright test tests/auth/                 # All files in auth directory\n</code></pre>"},{"location":"testing/test-execution/#environment-specific-selection","title":"Environment-specific Selection","text":"<pre><code># Development environment - fast feedback\nnpx playwright test --grep \"@smoke\" --project=chromium\n\n# Staging environment - comprehensive testing\nnpx playwright test --grep \"@smoke|@integration\"\n\n# Production monitoring - critical paths only\nnpx playwright test --grep \"@critical|@monitoring\"\n</code></pre>"},{"location":"testing/test-execution/#file-based-selection","title":"File-based Selection","text":"<pre><code># Run specific test files\nnpx playwright test tests/auth/login.spec.ts\nnpx playwright test tests/auth/\n\n# Run multiple specific files\nnpx playwright test tests/auth/login.spec.ts tests/users/profile.spec.ts\n\n# Run tests matching pattern\nnpx playwright test \"**/*auth*.spec.ts\"\n</code></pre>"},{"location":"testing/test-execution/#cross-environment-testing","title":"Cross-Environment Testing","text":""},{"location":"testing/test-execution/#environment-configuration","title":"Environment Configuration","text":"<pre><code>// config/environments.ts\nexport const environments = {\n  development: {\n    baseURL: 'http://localhost:8000',\n    timeout: 10000,\n    retries: 0,\n  },\n  staging: {\n    baseURL: 'https://staging.webgrip.nl',\n    timeout: 30000,\n    retries: 2,\n  },\n  production: {\n    baseURL: 'https://app.webgrip.nl',\n    timeout: 15000,\n    retries: 1,\n  },\n};\n\n// playwright.config.ts\nconst env = process.env.TEST_ENV || 'development';\nconst config = environments[env];\n\nexport default defineConfig({\n  use: {\n    baseURL: config.baseURL,\n    actionTimeout: config.timeout,\n  },\n  retries: config.retries,\n});\n</code></pre>"},{"location":"testing/test-execution/#environment-specific-execution","title":"Environment-specific Execution","text":"<pre><code># Test against different environments\nTEST_ENV=development npx playwright test\nTEST_ENV=staging npx playwright test --grep \"@smoke\"\nTEST_ENV=production npx playwright test --grep \"@monitoring\"\n\n# With Docker\ndocker run --rm \\\n  -v $(pwd):/app \\\n  -w /app/tests/playwright-runner \\\n  -e TEST_ENV=staging \\\n  -e BASE_URL=https://staging.webgrip.nl \\\n  webgrip/playwright-runner:latest \\\n  npx playwright test --grep \"@smoke\"\n</code></pre>"},{"location":"testing/test-execution/#cross-browser-testing-matrix","title":"Cross-browser Testing Matrix","text":"<pre><code># Complete cross-browser testing\nstrategy:\n  matrix:\n    browser: [chromium, firefox, webkit]\n    environment: [staging, production]\n\nsteps:\n  - name: Test ${{ matrix.browser }} on ${{ matrix.environment }}\n    env:\n      TEST_ENV: ${{ matrix.environment }}\n    run: npx playwright test --project=${{ matrix.browser }}\n</code></pre>"},{"location":"testing/test-execution/#performance-optimization","title":"Performance Optimization","text":""},{"location":"testing/test-execution/#test-execution-performance","title":"Test Execution Performance","text":"<pre><code>// playwright.config.ts - Performance optimizations\nexport default defineConfig({\n  // Faster test execution\n  fullyParallel: true,\n  workers: process.env.CI ? 4 : undefined,\n\n  // Reasonable timeouts\n  timeout: 30000,\n  actionTimeout: 10000,\n  navigationTimeout: 15000,\n\n  // Optimize for CI\n  use: {\n    // Disable animations for faster execution\n    reducedMotion: 'reduce',\n\n    // Optimize screenshots\n    screenshot: 'only-on-failure',\n\n    // Minimal trace collection\n    trace: 'retain-on-failure',\n\n    // Disable video in CI\n    video: process.env.CI ? 'off' : 'retain-on-failure',\n  },\n\n  // Global setup for shared state\n  globalSetup: require.resolve('./global-setup'),\n  globalTeardown: require.resolve('./global-teardown'),\n});\n</code></pre>"},{"location":"testing/test-execution/#resource-management","title":"Resource Management","text":"<pre><code>// global-setup.ts - Shared setup\nimport { chromium, FullConfig } from '@playwright/test';\n\nasync function globalSetup(config: FullConfig) {\n  // Setup shared database state\n  await setupTestDatabase();\n\n  // Warm up application\n  const browser = await chromium.launch();\n  const page = await browser.newPage();\n  await page.goto(config.projects[0].use.baseURL);\n  await browser.close();\n\n  // Cache authentication state\n  await setupAuthenticationState();\n}\n\nexport default globalSetup;\n</code></pre>"},{"location":"testing/test-execution/#caching-strategies","title":"Caching Strategies","text":"<pre><code>// fixtures/auth-cache.ts\nimport { test as base } from '@playwright/test';\n\nconst STORAGE_STATE = 'auth-state.json';\n\nexport const test = base.extend({\n  // Reuse authentication state\n  storageState: STORAGE_STATE,\n\n  authenticatedPage: async ({ page }, use) =&gt; {\n    // Use cached authentication if available\n    await use(page);\n  },\n});\n</code></pre>"},{"location":"testing/test-execution/#test-result-management","title":"Test Result Management","text":""},{"location":"testing/test-execution/#report-generation","title":"Report Generation","text":"<pre><code>// playwright.config.ts - Multiple reporters\nexport default defineConfig({\n  reporter: [\n    // HTML report for local development\n    ['html', { \n      outputFolder: 'playwright-report',\n      open: process.env.CI ? 'never' : 'on-failure'\n    }],\n\n    // JSON for CI integration\n    ['json', { outputFile: 'test-results.json' }],\n\n    // JUnit for test management systems\n    ['junit', { outputFile: 'test-results.xml' }],\n\n    // Line reporter for CI logs\n    ['line'],\n\n    // Custom reporter for notifications\n    ['./reporters/slack-reporter.js'],\n  ],\n});\n</code></pre>"},{"location":"testing/test-execution/#artifact-management","title":"Artifact Management","text":"<pre><code># Generate and collect artifacts\nnpx playwright test \\\n  --reporter=html \\\n  --output-dir=test-results \\\n  --screenshot=on \\\n  --video=on \\\n  --trace=on\n\n# Archive results\ntar -czf \"test-results-$(date +%Y%m%d-%H%M%S).tar.gz\" \\\n  test-results/ \\\n  playwright-report/ \\\n  test-results.json\n</code></pre>"},{"location":"testing/test-execution/#cicd-integration","title":"CI/CD Integration","text":"<pre><code># Complete artifact handling\n- name: Run Playwright tests\n  run: npx playwright test --reporter=blob\n\n- name: Generate HTML report\n  if: always()\n  run: npx playwright merge-reports --reporter=html blob-report/\n\n- name: Upload test report\n  uses: actions/upload-artifact@v3\n  if: always()\n  with:\n    name: playwright-report-${{ github.run_id }}\n    path: |\n      playwright-report/\n      test-results/\n    retention-days: 30\n\n- name: Upload to test management\n  if: always()\n  run: |\n    curl -X POST \\\n      -H \"Content-Type: application/json\" \\\n      -d @test-results.json \\\n      https://test-management.webgrip.nl/api/results\n</code></pre>"},{"location":"testing/test-execution/#monitoring-and-alerting","title":"Monitoring and Alerting","text":""},{"location":"testing/test-execution/#synthetic-monitoring","title":"Synthetic Monitoring","text":"<pre><code>// tests/monitoring/critical-paths.spec.ts\nimport { test, expect } from '@playwright/test';\n\ntest.describe('Critical Path Monitoring @monitoring @critical', () =&gt; {\n  test('user login flow', async ({ page }) =&gt; {\n    const startTime = Date.now();\n\n    await page.goto('/login');\n    await page.fill('[name=\"email\"]', process.env.MONITOR_USER_EMAIL!);\n    await page.fill('[name=\"password\"]', process.env.MONITOR_USER_PASSWORD!);\n    await page.click('button[type=\"submit\"]');\n\n    await expect(page).toHaveURL('/dashboard');\n\n    const loadTime = Date.now() - startTime;\n    expect(loadTime).toBeLessThan(5000); // 5 second SLA\n  });\n\n  test('checkout process', async ({ page }) =&gt; {\n    // Simulate critical business process\n    await page.goto('/products/1');\n    await page.click('button:has-text(\"Add to Cart\")');\n    await page.goto('/checkout');\n\n    // Verify checkout loads within SLA\n    await expect(page.locator('h1')).toContainText('Checkout');\n  });\n});\n</code></pre>"},{"location":"testing/test-execution/#alert-configuration","title":"Alert Configuration","text":"<pre><code>#!/bin/bash\n# monitoring/run-synthetic-tests.sh\n\n# Run critical path tests\nnpx playwright test --grep \"@monitoring\" --reporter=json &gt; monitoring-results.json\n\n# Check for failures\nFAILURES=$(jq '.stats.failed' monitoring-results.json)\n\nif [ \"$FAILURES\" -gt 0 ]; then\n  # Send alert to Slack\n  curl -X POST -H 'Content-type: application/json' \\\n    --data '{\"text\":\"\ud83d\udea8 Synthetic monitoring tests failed: '\"$FAILURES\"' failures detected\"}' \\\n    $SLACK_WEBHOOK_URL\n\n  # Page on-call team\n  curl -X POST \\\n    -H \"Authorization: Token $PAGERDUTY_TOKEN\" \\\n    -H \"Content-Type: application/json\" \\\n    -d '{\n      \"incident\": {\n        \"type\": \"incident\",\n        \"title\": \"Synthetic Test Failures\",\n        \"service\": {\"id\": \"'\"$PAGERDUTY_SERVICE_ID\"'\", \"type\": \"service_reference\"}\n      }\n    }' \\\n    https://api.pagerduty.com/incidents\nfi\n</code></pre>"},{"location":"testing/test-execution/#performance-monitoring","title":"Performance Monitoring","text":"<pre><code>// tests/performance/load-times.spec.ts\ntest('performance metrics', async ({ page }) =&gt; {\n  await page.goto('/');\n\n  const metrics = await page.evaluate(() =&gt; {\n    const perfData = performance.getEntriesByType('navigation')[0];\n    return {\n      domContentLoaded: perfData.domContentLoadedEventEnd - perfData.fetchStart,\n      loadComplete: perfData.loadEventEnd - perfData.fetchStart,\n      firstPaint: performance.getEntriesByType('paint')[0]?.startTime || 0,\n    };\n  });\n\n  // Assert performance SLAs\n  expect(metrics.domContentLoaded).toBeLessThan(2000);\n  expect(metrics.loadComplete).toBeLessThan(5000);\n  expect(metrics.firstPaint).toBeLessThan(1500);\n\n  // Log metrics for monitoring\n  console.log('Performance Metrics:', JSON.stringify(metrics));\n});\n</code></pre>"},{"location":"testing/test-execution/#troubleshooting-test-execution","title":"Troubleshooting Test Execution","text":""},{"location":"testing/test-execution/#common-execution-issues","title":"Common Execution Issues","text":"<p>Tests timing out <pre><code>// Increase timeouts for specific tests\ntest('slow operation', async ({ page }) =&gt; {\n  test.setTimeout(60000); // 60 seconds for this test\n\n  await page.goto('/slow-page');\n  await page.waitForSelector('.slow-component', { timeout: 30000 });\n});\n</code></pre></p> <p>Flaky tests <pre><code>// Add proper waits and retries\ntest('potentially flaky test', async ({ page }) =&gt; {\n  // Retry this test up to 3 times\n  test.fixme(({ browserName }) =&gt; browserName === 'webkit', 'Flaky on WebKit');\n\n  await page.goto('/');\n\n  // Wait for network to be idle\n  await page.waitForLoadState('networkidle');\n\n  // Use auto-waiting assertions\n  await expect(page.locator('.dynamic-content')).toBeVisible();\n});\n</code></pre></p> <p>Resource exhaustion <pre><code># Reduce parallel workers\nnpx playwright test --workers=1\n\n# Run tests sequentially\nnpx playwright test --workers=1 --fullyParallel=false\n\n# Increase system resources\ndocker run --rm \\\n  --memory=4g \\\n  --cpus=2 \\\n  -v $(pwd):/app \\\n  webgrip/playwright-runner:latest \\\n  npx playwright test\n</code></pre></p>"},{"location":"testing/test-execution/#debug-execution","title":"Debug Execution","text":"<pre><code># Debug with verbose output\nDEBUG=pw:* npx playwright test\n\n# Debug specific test\nnpx playwright test --debug tests/auth/login.spec.ts\n\n# Debug in headed mode\nnpx playwright test --headed --slowMo=1000\n\n# Generate trace for debugging\nnpx playwright test --trace=on\nnpx playwright show-trace test-results/example-test/trace.zip\n</code></pre>"},{"location":"testing/test-execution/#related-documentation","title":"Related Documentation","text":"<ul> <li>Playwright Setup - Initial configuration and test writing</li> <li>Playwright Runner Image - Container environment</li> <li>CI/CD Pipeline - Automated test execution</li> <li>Architecture Overview - Testing architecture</li> </ul> <p>Assumption: Test execution primarily occurs in containerized environments with reliable network connectivity. High-latency or unreliable network conditions may require additional timeout and retry configuration. Validation needed: Confirm network and infrastructure requirements for test execution environments.</p> <p>Maintainer: WebGrip Ops Team Configuration: <code>tests/playwright-runner/playwright.config.ts</code> Container: webgrip/playwright-runner</p>"}]}